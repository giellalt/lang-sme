#!/bin/bash
# @configure_input@

# Automake interprets the exit status as follows:
# - an exit status of 0 will denote a success
# - an exit status of 77 a skipped test
# - an exit status of 99 a hard error
# - any other exit status will denote a failure.

# To run this test script only, do:
#
# make check TESTS=generate-adj-lemmas.sh

# This test script will test that all adj lemmas do generate as themselves.
# Adj lemmas that do not generate properly are output in langs/$lang/test/data/missing_adj_lemma.txt
# Extend as needed, and copy to new files to adapt to other parts of speech.
# The changes usually needed are:
#
# 1. change the reference to the source file (line 23)
# 2. extend the extract lemmas egrep expression (lines 53 ff)
# 3. adapt the tag addition and lemma generation instructions (lines 79 ff)

###### Variables: #######
### in ###
source_file=${srcdir}/../../../src/morphology/stems/adjectives.lexc
generator_file=./../../../src/generator-gt-norm

### out ###
lemmas=./filtered-adjs.tmp
lemmas_pl=./filtered-pl_adjs.tmp
lemmas_attr=./filtered-attr_adjs.tmp
lemmas_super=./filtered-super_adjs.tmp
lemmas_comp=./filtered-comp_adjs.tmp
all_adjs=./all_adjs.tmp
generated_lemmas=./generated-adjs.tmp
result_file=${srcdir}/../../data/missing_adj_lemmas


# FAIL if source file does not exist:
if [ ! -f $source_file ]; then
    echo
    echo "*** Warning: Source file $source_file not found."
    echo
    exit 77
fi

# Use autotools mechanisms to only run the configured fst types in the tests:
fsttype=
@CAN_HFST_TRUE@fsttype="$fsttype hfst"
@CAN_XFST_TRUE@fsttype="$fsttype xfst"

# Exit if both hfst and xerox have been shut off:
if test -z "$fsttype" ; then
    echo "All transducer types have been shut off at configure time."
    echo "Nothing to test. Skipping."
    exit 77
fi

# Get external Mac editor for viewing failed results from configure:
EXTEDITOR=@SEE@

##### Extract lemmas #####
### don't use extract-lemmas.sh ###

# Hent ut lemmaer, bortsett fra utkommmenterte (^\!):

# 1. dem med hardkoding for spesielle former (K), LexErr/ (som blir filtrert bort fra normgenerator), adjektiver som bare har attributtform (ATTR|Attr| At ) , adjektiver som krever tagger for komparering (BBO |MUS |BUOREMUSS|OVDDIT |STUORIBUS|BUStem) og lemmaer som bare opptrer i sammensetninger (FINJU|Rreal | R) Lemmaene lagres som $lemmas
grep ";" $source_file | grep -v "^\!" |\
   egrep -v "(LEXICON|ATTR|FINJU|Der|Attr| At |BBO |MUS |BUOREMUSS|OVDDIT |STUORIBUS|BUStem | K | Rreal | R |\+Err\/Lex)" |\
   sed 's/% /€/g' | sed 's/%:/¢/g' |  tr ":+" " " | cut -d " " -f1 | tr -d "%" | tr "€" " " | tr "¢" ":" |\
   sort -u > $lemmas

# 2. for plurale lemmaer (_PL). Lemmaene lagres som $lemmas_pl
grep ";" $source_file | grep -v "^\!" |\
  grep -v "+Gen" | grep -v \+Err\/Lex | grep "_PL " | tr ":+" " " |\
  cut -d " " -f1 | tr -d "%" | sort -u > $lemmas_pl

# 3. som bare har attributtform. Lagres i $lemmas_attr
grep ";" $source_file | grep -v "^\!" |\
  grep -v "+Gen" | grep -v \+Err\/Lex | egrep "(ATTR|Attr)" |\
  sed 's/% /€/g' | sed 's/%:/¢/g' |  tr ":+" " " | cut -d " " -f1 |\
  tr -d "%" | tr "€" " " | tr "¢" ":" | sort -u > $lemmas_attr

# 4. som krever superlativtagg. Lagres i $lemmas_super
grep ";" $source_file | grep -v "^\!" |\
  grep "BUOREMUSS" | grep -v \+Err\/Lex | tr ":+" " " |\
  cut -d " " -f1 | tr -d "%" | sort -u > $lemmas_super

# 5. som krever komparativtagg. Lagres i $lemmas_comp
grep ";" $source_file | grep -v "^\!" |\
  egrep "(OVDDIT|BBO |BU/MUS|EABBO/EAMOS|STUORIBUS|BUStem)" |\
  grep -v \+Err\/Lex | tr ":+" " " | cut -d " " -f1 | tr -d "%" |\
  sort -u > $lemmas_comp


###### Start testing: #######
transducer_found=0
Fail=0

# The script tests both Xerox and Hfst transducers if available:
for f in $fsttype; do
	if [ $f == "xfst" ]; then
		lookuptool="@LOOKUP@ -q -flags mbTT"
		suffix="xfst"
	elif [ $f == "hfst" ]; then
		lookuptool="@HFST_LOOKUP@ -q"
		suffix="hfstol"
	else
	    Fail=1
		printf "ERROR: Unknown fst type! "
	    echo "$f - FAIL"
	    continue
	fi
	if [ -f "$generator_file.$suffix" ]; then
		let "transducer_found += 1"

###### Test generation: #######
		# generate adjectives, extract the resulting generated lemma,
		# store it:

# Generer former:

# 1. med +A+Sg+Nom (grunnformen for de fleste). Lagres som $generated_lemmas.$f.txt
		sed 's/$/+A+Sg+Nom/' $lemmas | $lookuptool $generator_file.$suffix \
            | cut -f2 | grep -v "A+" | grep -v "^$" | sort -u > $generated_lemmas.$f.txt

# 2. med +A+Pl+Nom for plurale lemmaer. Lagres i $generated_lemmas.$f.txt
		sed 's/$/+A+Pl+Nom/' $lemmas_pl | $lookuptool $generator_file.$suffix \
            | cut -f2 | grep -v "A+" | grep -v "^$" | sort -u >> $generated_lemmas.$f.txt

# 3. med +A+Attr lemmaer som bare har attributtform. Lagres i $generated_lemmas.$f.txt
		sed 's/$/+A+Attr/' $lemmas_attr | $lookuptool $generator_file.$suffix \
            | cut -f2 | grep -v "A+" | grep -v "^$" | sort -u >> $generated_lemmas.$f.txt

# 4. for lemmaer lemmaer som krever superlativtagg, med +A+Superl+Sg+Nom. Lagres i $generated_lemmas.$f.txt
		sed 's/$/+A+Superl+Sg+Nom/' $lemmas_super | $lookuptool $generator_file.$suffix \
            | cut -f2 | grep -v "A+" | grep -v "^$" | sort -u >> $generated_lemmas.$f.txt

# 5. for lemmaer lemmaer som krever komparativtagg, med +A+Comp+Sg+Nom. Lagres i $generated_lemmas.$f.txt
		sed 's/$/+A+Comp+Sg+Nom/' $lemmas_comp | $lookuptool $generator_file.$suffix \
            | cut -f2 | grep -v "A+" | grep -v "^$" | sort -u >> $generated_lemmas.$f.txt

###### Collect results: #######
		# Sort and compare original input with resulting output - the diff is
		# stored and opened in SEE:

# Samle alle lemmaer i en fil, sorter, unifiser
cat $lemmas $lemmas_pl $lemmas_attr $lemmas_super $lemmas_comp > $all_adjs
sort -u -o $all_adjs $all_adjs 

# Alle genererte former sorteres og unifiseres.
sort -u -o $generated_lemmas.$f.txt $generated_lemmas.$f.txt 
		
# Sammenlikne lista med verblemmaer med den genererte lista med infinitivsformer.
# Formene som er i verblemmalista, men ikke i den genererte lista, kopieres til
# missingverbLemmas.txt. Formene generes med  +V+Inf for lettere debugging.

		comm -23 $lemmas $generated_lemmas.$f.txt \
		     | grep -v '^$' | sed 's/$/+A+Sg+Nom/' \
		     | $lookuptool $generator_file.$suffix > $result_file.$f.txt

		# Open the diff file in SubEthaEdit (if there is a diff):
		if [ -s $result_file.$f.txt ]; then
			# Only open the failed lemmas in see if @SEE@ is defined:
			if [ "$EXTEDITOR" ]; then
				$EXTEDITOR $result_file.$f.txt
			fi
		    Fail=1
		    echo "$f - FAIL"
		    continue
		fi
	    echo "$f - PASS"
	fi
done

# When done, remove the generated data file:
rm -f $lemmas $lemmas_pl $lemmas_attr $lemmas_super $lemmas_comp $all_adjs $generated_lemmas.$f.txt

# At least one of the Xerox or HFST tests failed:
if [ "$Fail" = "1" ]; then
	exit 1
fi

if [ $transducer_found -eq 0 ]; then
    echo ERROR: No transducer found
    exit 77
fi
