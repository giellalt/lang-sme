






!!!DELIMITERS 

Sentence delimiters are the following: <.> <!> <?> <...> <¶>


!!!TAGS AND SETS



!!Tags


This section lists all the tags inherited from the fst, and used as tags
in the syntactic analysis. The next section, __Sets__, contains sets defined
on the basis of the tags listed here, those set names are not visible in the output.




!Beginning and end of sentence
BOS 
EOS



!Parts of speech tags

N
A
Adv
V
Pron
CS
CC
Po
Pr
Pcle
Num
Interj
ABBR
ACR
CLB
LEFT
RIGHT
WEB
LEFT RIGHT because of apertium




!Tags for POS sub-categories

Pers
Dem
Interr
Indef
Recipr
Refl
Rel
Coll
NomAg
G3
Prop
Allegro
Arab
Romertall


!Tags for morphosyntactic properties

Nom
Acc
Gen
Ill
Loc
Com
Ess
Sg
Du
Pl
Cmp/SplitR
Cmpnd
Cmp/SgNom Cmp/SgGen
Cmp/SgGen
Cmp/Sh
Cmp
PxSg1
PxSg2
PxSg3
PxDu1
PxDu2
PxDu3
PxPl1
PxPl2
PxPl3
Comp
Superl
Attr
Ord
Qst
IV
TV 
Prt
Prs
Ind
Pot
Cond
Imprt
ImprtII
Sg1
Sg2
Sg3
Du1
Du2
Du3
Pl1
Pl2
Pl3
Inf
ConNeg
Neg
PrfPrc
VGen
PrsPrc
Ger
Sup
Actio


!Tags for clitic particles
Foc/ge
Foc/ge
Foc/ge
Foc/gen
Foc/ges
Foc/gis
Foc/naj
Foc/ba
Foc/be
Foc/hal
Foc/han
Foc/bat
Foc/son
Foc/mis
Foc/mat

!Derivation tags

Der/PassL Der/PassS
Der/NomAg
NomAg
Der/adda
Der/alla
Der/easti
Der/d
Der/eamoš
Der/amoš
Der/geahtes
Der/h
Der/Car
Der/Car
Der/huhtti
Der/huvva
Der/halla
Der/l
Der/lasj
Der/las
Der/meahttun
Der/muš
Der/NomAct
Der/sasj
Der/st
Der/stuvva
Der/upmi
Der/supmi
Der/vuota
Der/InchL
Der/laakan
Der/laagasj
Der/jagáš
Der/A Der/A* pga av bug i lookup2cg
Der/Dimin
Der/viđá
Der/viđi
Der/veara
Der/AAdv
Der/Adv
Der/dáfot 
Der/keahtta
Der/nuolus
Der/náittot
Der/seagat
Der/suttat
Der/ár 
<vdic>



!Semantic tags







! Syntactic tags

* @+FAUXV : finite auxiliary verb 
** ferte: Son ferte oaidnit ollislaš gova. - She must see the whole picture.
* @+FMAINV : finite main verb
** oaidná: Son oaidná ollislaš gova. - She sees the whole picture	
* @-FAUXV : infinite auxiliary verb
** sáhte: In sáhte gáhku borrat. - I cannot eat cake.	
* @-FMAINV : infinite main verb
** oaidnit: Son ferte oaidnit ollislaš gova. - She must see the whole picture.
* @-FSUBJ> : Subject of infinite verb outside the verbal.
** mu: Diet dáhpáhuvai mu dieđikeahttá. - It happened without me knowing about it.
* @-F<OBJ : Subject of infinite verb outside the verbal.
** nuppi: Ulbmil lea oažžut nuppi boagustit. - The goal is to get the other one to laugh.
* @-FOBJ> : Object of infinite verb outside the verbal.
** váldovuoittuid: Sii vurde váldovuoittuid fasket. - They waited to grab the main prizes.
* @-FSPRED<OBJ
* @-F<ADVL
* @-FADVL>
* @-F<SPRED
* @-F<OPRED
* @-FSPRED>
* @-FOPRED>
* @>ADVL
* @ADVL<
* @<ADVL
* @ADVL>
* @HAB>
* @<HAB
* @>N
* @Interj
* @N<
* @>A
* @P<
* @>P
* @HNOUN
* @INTERJ
* @>Num
* @Pron<
* @>Pron
* @Num<
* @OBJ
* @<OBJ
* @OBJ>
* @OPRED
* @<OPRED
* @OPRED>
* @PCLE
* @COMP-CS<
* @SPRED
* @<SPRED
* @SPRED>
* @SUBJ
* @<SUBJ
* @SUBJ>
* @PPRED
* @APP
* @APP-N<
* @APP-Pron<
* @APP>Pron
* @APP-Num<
* @APP-ADVL<
* @VOC : Vocative
** Miss Turner : Bures boahtin deike, Miss Turner! - Welcome her, Miss Turner!
* @CVP : Conjunction or subjunction that conjoins finite verb phrases.
** go : Leago guhkes áigi dassá go Máreha oidnet? - Is it a long time since you saw Máret?
* @CNP : Local conjunction or subjunction.
** vai : Leago nieida vai bárdni? - Is it a girl or a boy?
* @X : unknown





!!Sets containing sets of lists and tags

This part of the file lists a large number of sets based partly upon the tags defined above, and 
partly upon lexemes drawn from the lexicon.
See the sourcefile itself to inspect the sets, what follows here is an overview of the set types.



!Sets for Single-word sets

OKTA and go, and the set INITIAL for initial letters 
OKTA
go
INITIAL


!Sets for word or not

WORD
REAL-WORD
REAL-WORD-NOT-ABBR
WORD-NOT-de
NOT-COMMA


!Derivational affixes

DER-V

DER-N

DER-A1

DER-A

A-V

A-NOT-V

!Case sets

ADLVCASE


CASE-HALFAGREEMENT
CASE-AGREEMENT
CASE

NOT-NOM
NOT-GEN
NOT-ACC

!Verb sets


NOT-V

!Sets for finiteness and mood

REAL-NEG

MOOD-V

GC

VFIN

VFIN-POS

VFIN-NOT-IMPRT

VFIN-NOT-NEG

NOT-PRFPRC


!Sets for person
















!Sets consisting of forms of "leat" (these ones need to be rewritten)




!Pronoun sets
















!Adjectival sets and their complements









!Adverbial sets and their complements











!Sets for coordinators








!Sets for adverbs that have lookalikes
Here come some adverbs that have identical twins in other POS. 
If these are found in Adv contexts, we treat them as adverbs.















!Sets of elements with common syntactic behaviour


!Sets for verbs


V is all readings with a V tag in them, REAL-V should
be the ones without an N tag following the V.  
The REAL-V set thus awaits a fix to the preprocess V ... N bug.



* The set COPULAS is for predicative constructions















TRANS-V is the set for verbs really taking objects



* Sets for verbs choosing oblique objects or adverbials
* __STVLIST__ is the list of strictly transitive verbs. In the rules, refer not to STVLIST, but to the set STV defined below.



STRICT-TRANS-V is the set for verbs which don't let a GenAcc be a modifier of anything else than an object, e.g. Mun organiseren eatni gievkkanis. - eatni wants to be the object
























!Valency sets






















































* __PLACE-V__ Those get only not locative if the target is a member TOOL, ABSTR-TOOL or ANIMATE or CONCEPT. Selects more locatives than ONLY-PLACE-LOC-V 




















!Adverb sets









!Adjective sets






















!NP sets defined according to their morphosyntactic features










!The PRE-NP-HEAD family of sets

These sets model noun phrases (NPs). The idea is to first define whatever can
occur in front of the head of the NP, and thereafter negate that with the
expression __WORD - premodifiers__.











The set __NOT-NPMOD__ is used to find barriers between NPs.
Typical usage: ... (*1 N BARRIER NPT-NPMOD) ...
meaning: Scan to the first noun, ignoring anything that can be
part of the noun phrase of that noun (i.e., "scan to the next NP head")







!Other negatively defined morphosyntactic noun sets












!Noun sets

Nominal sets defined according to their morphophonological properties
Sets for lexeme homonymy (most of them are moved to where the actual rules are.)


The words in the set __N-PO__ can be both N and Po, the set takes that into account.


!The LAHKA set family
















!Nominal sets defined according to their semantical properties


* Spatial noun sets. These nouns behave like postpositions




* Time sets
































* Amount sets




















* Sets for nouns with morpho-syntactic preferences

* Number-related sets






* Sets for case, possessive, etc.













* Sets for nouns as pred








































* Sets for animals













* Sets for things
























* Sets for qualities


* Sets for things, not necessarily tools


















* Sets for things such that people can be inside them:

* Sets for things such that people cannot be inside them:






* Part-whole sets for human




* Sets for places






























* Sets that can both be buildings/places and represent humans


























































* Sets denoting relations





!Miscellaneous sets




















!Border sets and their complements














!Syntactic sets

ALLSYNTAG
NON-APP

''These were the set types.''



!!Guessing: Rule for adding Sem/Date as a tag to readings which looks like dates



!!Guessing: Rule for adding Adv Sem/Adr as a tag to readings which looks addresses




* Rule for adding <vdic> to verbs denoting verbal actions like: ... dadjá Aili Kestkitalo.





! Removing or selecting proper nouns that are lookalikes

* __AvvilProp__ selects Prop for Avvil


* __SamediggiProp__ selects Prop after Ášši 01/12





we don't want propernoun analysis of these words, initially in sentences



* __InitialSapmiProp__ the initial Sápmi rule. 

* Rules for removing some Props which are identical to common nouns


*Removes __PropPl__, but problems with names as Davviriikkaid Ráđi, there we want Prop Pl






*Select __PlcSur__ (Sem/Plc) (Sem/Sur) 







!Some propernouns have two parts and the first is not a genitive. We still have problems with abbr when these propernouns are inflected or are a part of a cmp. The copy rule adds Attr reading to names which not get it in the fst (Soria). The select rule selects Attr when the next word is e.g. Moria.




* __SoriaAttr__  Soria Attr Moria, Harry Attr Potter-girji

* __SoriaMoria__

! Rules for giving Attr to names, e.g. Ole Attr Kåven.



* __PropAttr__ 

Remove unwanted analyses


!!Southern Locative vs. Essive

* __SouthLoc__ removes Southern Locative vs. Essive


* __Apertium-rule__ we want Num as alternativ to Ord reading  




!!Numerals

* __IINeg__  Rom, not Neg (for apertium)

* __NumRom__ in beginning of sentence


!!Lexicalised derivations

* __derVuohta__ removes A Attr Der/vuota if A Der/vuota.	


* __eapmi__ compounds with eapmi if they have Der/NomAct analysis


* __derN__ removes DER-N if lexicalised non-essives




* __derNEss__ removes DER-N if lexicalised essives (revise this) - flytter denne til slutten av fila

* __derA__ removes DER-A if lexicalised A



* __derV__ removes DER-V if lexicalised V,





* __derHderAlla, derAlla, derH, derST__ chosses longest Der/tag




* __derPassActio__ removes Actio Nom/Gen/Acc for passive forms. I don't think they exist in Sg, we prefer the PrfPrc analysis.


!Particular verbs




* __notRealV__ removes verb readings from verbs like álbmotregistreret

* __notN__ removes N for adjectives which have got noun analysis because of Px for Divvun 

* __leapmaDimin__ removes it

* __leage__ removes leahki Allegro



* __Der/PassS__ removes some Pass-readings in favour of V not Pass



* __notPass__ removes som Pass readings which are not likely at all


* __LEX-PASS__ removes passive forms of some lemmas in favour for the lexixalised one

* __LEX-PASSPrfPrc__ selects PrfPrc when noun to the right

* __VGenPass__ remove when Pass or LEX-PASS


* __LexSelbeassat__

* __LexSelgieldit__

* __LexSelmuohttit__

* LexSelvuhttot


* __LexSelollet__

* __Lexdiehttelasaid__ diehttelasaid Adv

* __Lexgeassit__ geassit Adv vs geassit V

* __Lexvaldot__ váldot V, not váldu

* __Lexsáhttit__ sáhtašit V, sáhttit Err/Orth


* __Ger and GER-NOTV__ remove Ger-forms which are not likely at all

















!!Propernouns


* __PropVfin__ selects propernouns which can be Vfin in the beginning of a sentence



* __confProp, Lea, Man, Hui, Mo, Prop__ removes Props which confuces the analyser, 




 * __Dert__ Rule for removing Der/t Prop when there are other analysis






!Some adjectives are never derived as Adv

!Rules for Prop Attr, Sem/Sur and Plc




* __PropAttrIfPropx__ removes Attr if no Prop on the right side

* __nationalOrg__ removes Prop after nation


* __PropInsideProp__ Selects Prop if capital letter inside clause

* __AttrPropDerlaš__ Selects (Prop Der/lasj Attr) if first one to the right is a noun

* __PropAttr__ Removes (Prop Attr), but not if to the right is Prop or Ord OR ABBR 

* __PropSur__ Selects (Prop Sem/Sur) if finite verb to the left. Immediately to the right is Sem/Fem OR Sem/Mal




* __PropAttr1__ Selects Attr if you are Sem/Fem OR Sem/Mal, Sem/Sur or INITIAL and to your right is Prop which is Sem/Fem OR Sem/Mal or Sem/Sur 









* Removes __PropAttr__ if no Prop on the right side

* Removes __PropEss__ if no Der/lasj

* Removes __HearránEss__ we want Px for Voc (we should we add it to the Prop version)

* Selects __PropNom__ 


!MISC

* __NotConNegII__ removes ConNegII if no Neg Imprt around. This is important, as the homonym forms are common. - 30850






* __errsub_uvvo__ removes -uvvat Err/Orth Sg3 if Der/PassL, e.g. čujuhuvvo



* sutnje is not verb

 * __ABBR__ Removes ABBR in favour of Adv, Pcle or Pron, e.g. "dii" when there is no punctuation

* __ollit__ removes ollit when ollu - move this one?

* __FocbaDu3__ removes Foc/ba when Du3 verbs like máhttiba and Adv like juoba and Prop like Jáhkoba (Acc) 

* __Focmis__ removes Foc/mis when Loc  

* __Focmat__ removes Foc/mat when not Imprt  



* __Focbe__ removes Foc/be when juobe Adv  


* __Focge__ removes Foc/ge when Adv like dieđusge

* __Focge-dis__ disambiguation Foc/Neg-ge and Foc/Pos-ge


!!!ONE-COHORT DISAMBIGUATION - CYCLE 0

The idea behind "cycle 0" is to have safe rules without context first.
These rules typically chose lexicalisations over derivations, 
Saami words instead of marginal names, etc.


!!Lexicalised derivations



* Removes __derV__  DER-V if lexicalised.

*Removes __derN__ if lexicalised.

*Removes __derNEss__ if lexicalised, and both nouns are essive.

*Removes __derA__ or PrsPrc or VGen if lexicalised. VGen is a chance.

*Removes __derAdv__  when Adv is lexicalised.  

*Removes __VAbess__  when Adv is lexicalised.  


* Removes __derVhmm__ Does this function?

* __derHderAlla__ removes Der/h Der/alla if Der/halla.

* __derAlla__ removes Der/halla if Der/alla.

* Removes __derH__ if Der/InchL.  

* Removes __derST__ if Der/ahtti #OBS se på denne	




!!Fragments and headliners

* __foto__ 



* __Sem/Act__ selects lexicalised NomAct in fragments (instead of looking for VFIN). 

* __AnomInf__ initial adjectiv or ceartain nouns

* __ACompPl__ adjective plural nomitative, not comp sg nor adv


* __SA kurssat__  



* __NotGen__ 








* __compgo__ 












!!Adjectives or nouns, not adverbs

* __Aifeambbo__ selects A after eambbo




* __muhtunlagan__ removes lága Ess if Indef ja lágan A

* __aiggePo__ removes áigge Po, which belongs to MT and thu

Adjective plural, not comparative

* __positivepl__ Pos Pl not Comp Pl for man A sii leat

!!Adverbs

* IFF __buotAdv__ : buot Adv in front of Superl



!Lexicalised adverbs
It is useful to select early the adverbial reading for potensial nouns or verbs.

* __aibbasAdv__ áibbas dolin

*__aloGen__ removes állu Gen,  álo  Adv vs. N Gen

* __aiddo__

*__bealisAdv__ 

*__ilusAdv__ 


* __mannelTimeAdv__ golbma jagi maŋŋel

* __Advbadjelii__ nahkehit badjelii


* __AdvSTV__ váldit mielde, oahppat bajil. eará? STRICT-TRANS-V is too strong

* __cadaAdv__ if oažžut juoidá čađa

* __cohkkutAdv__ čohkkut


* __dussaiAdv__  


* __gaskanAdvVGen__  

* __gotAdv__  

* __ovdalgoCS__  

* __ikteAdv__  

* __miehtaV__  

* __mannelAdv__  

* __miehtaPr__  


* __aigiAdv__  guokte vahku áigi

*  __viimmatAdv__ 



* __dalleAdv__

*  __dusseAdv__ 








* __alggageAdv__  

* __bearraiAdv__  

* __boaittobealeAdv__  


* __buresAdv__  

* __cadatAdv__  

* __cuozzutAdv__  

* __dadjatAdv__  

* __dadjatAdv2__ 


* __dainnaAdv__  

* __danin__ (Pron Ess OR Adv)
* __daninAdv__ selects danin Adv. It is a special rule, only negative restrictions.


* Select Ess, and then kill?  

* __dassaAdv__  

* __dakkoAdv__  




* __duoAdv__  

* __duoN__  


* __duodaidAdv__  


* __plcadv__ words like nuortan adv (DOPPE) not N Ess



* __AdvNotNA__ Adverbs, not nouns or adjectives


* __AComp__ remove A Comp when Adv



* __birrasii__ removes birrasii N

* dieđusge chooses adv

* __sávvamis__ chooses adv

* __beali__ chooses adv


* __doarvaiAdv__ removes birrasii N


* __doložat__ removes doalut N


* __eanasAdv__  

* __eambbogo__ selects Adv eambbo go


* __eanetAdv__  






* __AdvComp__  

* __easkkaAdv__  





* __gaskatAdv__  

* __goassigeAdv__  

* __gosaAdv__  

* __gustoAdv__


* __gustoAdvláhka__

* __guhkasAdv__  



* __VifVFIN__ removes V 

* __harveAdv__

* __juogoQst__

* __justeAdv__



* __loahpasAdv__

* __liikkaAdv__


* __luovosAdv__



* __maninAdv__

* __manneAdv__





* __muhtuminAdv3__

* __njuolgaAdv__

* __oddasitAdv__


* __oktanAdv__

* __ollengeAdv__i

* __ovttasAdv__




* __oktiiV__ remove

* __oktiiAdv__ select






* __ollasitAdv__ selects

* __radjaiPo__ selects

* __rabasAdv__ selects

* __soaittáhagasAdv__ selects




* __seahkáPl__ selects Pl


* __seammaAdv__ selects

* __unnanAdv__ selects

* __varraAdv__ selects


* __vehaziidAdv__ selects

* __visotdAdv__ selects







* __vuhtiiAdv__

!!Pronouns 

* __recipr, reciprPl__ select Recipr






!Nouns, not verbs

* __álbmotN__, ii V.


* __headisge__, ii heađisge.

* __loahppa__ after TIME Gen.





























!Lexical selection - nouns

















































































































* __sahkaEss__ if Mii lea sáhkan.

* __sahkaPl__ after PLURALIZER in NP





















































* __UsImprt__ removes Imprt Sg3 for all nouns in -us	

* __SUBImprt__ removes Imprt when it can be a part of an NP	





* __oahppit__, ii Imprt.

!mánnu vs mánus

!Not noun


!!Adposition or not

* The rules __Pooaivai, Pogiedas__ removes oaivái and gieđas as Po

*  __aldatV1, aldatPo, KillaldatV__ for the problem aldat V vs. alde Po



!!Not Qst

* __AdvQst__ removes dego/nugo Qst 


!!Interjections

* __Interjlemma__ voja voja nana nana select interj if repeated 


* __Interj__ or not



!!Px-rules for special nouns

* __NnoPx__ Remove Px for special nouns

* __gaskaneaset__ selects Po for gaskaneaset	

!!Some verb rules

* __vfingo__ selects VFIN in front of go Qst

* __buoritV__ removes buorit as V


* Some brave rules for removing Imprt










* __ImprtCopPrfPrc__ removes imperative readings in front of coopulas and PrfPrc

* __FocV__ revmoves Foc when Actio, PrfPrc, VGen, e.g. čađahan, ovttasge




!Particular CS

* __madeCS__ for mađe/mađi and dađe/dađi

* __dadeCS__ for mađe/mađi and dađe/dađi
!Verb or Noun?






* __Včiehká__ selects V instead of N when nomintive to the right and accusative to the left ''fápmu čiehká luottaid''


!!Adpositions

!Adpositions, not verbs

* __bealisPo__ removes imperatives when Po lookalikes






!!!Section 2: LOCAL DISAMBIGUATION - CYCLE 1



!!FAMILY pronouns

!Pron Pers 1. p.

* __moai__ This rule is not in use because of REMOVE:Prop

* __miiPersLeft1, miiPersLeft2, _miiPersRight__ select mii Pers 



!Pron Pers 2. p.

* __donDem__ selecst don as Dem instead of Pers


* __donPers__ selecst don as Pers instead of Dem



!Pron Pers 3. p.

* __sonSG3V, sonRel, goson__ select son as Pers, Rel or Pcle 




* __dePcle__ de as Pcle


* __sutnje__ ( = forms of the verb "suotnjat")


* __datPlIll__ selects dát Pron Dem Pl Ill

* __daiddaVerb__ removes dáidda N Sg Nom 


* __dasaVGen, dasaLassin dasa,datSg3, datSg3PrfPrc__ ( = forms of the verb "dassat"): 

* __dasaILLV__ choses dasa to the left of verbs like duhtat, suhttat, luohttit












* __DemPlLoc__ selects Dem when Dem Pl Loc and agreement, perhaps no need for it here because we have agreement-rules later. Men viktig: her blir vi kvitt duo N.

* __DemPlCom__ selects Dem when Dem Pl Com and agreement, perhaps no need for it here because we have agreement-rules later.

* __datPersCopulas__ select Pers in front of copula. I setninger som Riššat dat gal leat musge, jus eai leačča njuoskan. tolker jeg dat som Pcle. Derfor constraint hva som kommer etter.

* __datPcle1__ selects dat Pcle between N and finite, even if there is agreement between verb and dat .

* __datPcle2__ selects dat Pcle when there is no agreement between verb and dat .

* __KilldatPcle__ removes the remaining dat Pcle



* __PersAcc__ selects Pers Acc in accusativ infinitive clauses with object


* __datPers__ selects Pers. I made it stronger than it was. ref. r897 in sme-dis.rle

* __datDemSg__ selects Dem from Pron Pers Sg3 Gen

* __datPersPl3__ selects dat Pl3 in front of V Pl3 and V Du3 and Rel Pl


!!An early rule for "eanaš"/"eanas"

* __eanasPron__ selects Pron in front of Pron Loc

!!Px constraints 


First select Px, then remove all remaining Px

* Set with adjectives, which are documented to have Px in our corpus

* __APxifN__ Remove A Px if N:

* __PxAlone__ Remove Px if it is only word in the sentence, and not a typical px-term



* __APx__ Remove A Px if Adv of A Ess og A Attr og PrfPrc or Loc


* __PxLocIll__ Remove Px if viesus vissui or similar

* __NPxPrfPrc__ Remove Px if PrfPrc with  leat to the left


* Nouns: __NomPxSg1__ (not Ess) as the only word in a sentence. Needs no disambiguation.


* Nouns:  __AccPxSg1__ after a TV verb. Exception for Aux.

* Nouns:  __AccPxSg1__ after a TV Inf verb.


* __PxSg1LocAcc__ is Acc to the right.

* __PxSg1Acc__ is Acc to the right.


* coordination __PxSg1coord__ 

* __PxSg1coordLast__ for the last word of a coordination

* __ReflPxSg1__ lean oahppan alddán


* Nouns: __PxSg2__ if SG2-V. The rule needs no disambiguation. The DON-constraint because of homonymi with (N Pl)

* __PxSg2Acc__ if  TV to the right

* __PxSg2AccImprt__ if  TV Imprt to the left

* __PxSg2AccPrfPrc__ after PrfPrc 

* __NotPxSg2__ if no Sg2 

* __PxSg2GenPo__ if in front of Po, after til verb

* __PxSg2Loc__ after habitivconstruction

* __atnitPx__ removes Px for for atnit muittus, gudnis, árvvus, čalmmis

* Nouns: __PxSg3Acc__ if Sg3 or Sg to the left


* Nouns: __PxSg3Acc__ if Sg3 or Sg to the left

* Nouns: __PxSg3AccPrfPrc__ if PrfPrc and Sg3 to the left







*  __PxSg3GenPo1__ in front of Po, to the left of the owner

*  __PxSg3GenPo2__ in front of Po, to the left of the owner

* __Genguossis__ is  selection Gen, not only with Px. The FAMILY-set would be better than Sem/Hum-tag, but there is often a propernoun connected to the noun. guossái and guossis should have Po analysis?

* __GenNPFinal__ selects Gen as the modifier of a noun in the end of a sentence.

* __PxSg3Nom__

* __PxGenNorPo__  

* __PxGenNum__  

* __PxGenPr__  

* __PXGenoaivai__  for oaivái Po, there could be more Po for this rule?

* __eallitAcc__ Selects Acc for eallit IV if you are ''eallin'' or ''eallinahki''


* __PXAccCoor__  

*  __PxSg3CC__ in coordination with the owner



* __PxSgIllPx__  



* __gaskaAcc__  





We end section 2 by removing all remaining Px

* __KillPx__ removes all remaining Px readings


!!Section 3: Certain verb readings


* __FinGoInf__ for  vai áigu go njulget.. Lene:  we don't need this


verb or adv	


* __NotVGenIfDer__ removes VGen if 0 = Der/Pass or Der...(r947)

* __NotVGenIfDer__ selects Actio Ess 


!All imperatives

For imperative disambiguation we need the following:
Pick imperative contexts, and thereafter remove imperative.
Such contexts are: Imperative verb sentence-initially with exclamation mark



* __NotEmbeddedImprt__ removed Imprt after CS


* __NotImprtWhenInd__ removes Imprt if part of an Ind domain

* __NotImprtWhenIndCoor__ removes Imprt when coordination of an Ind domain - a very special case


* __NotImprtIfAttrLeft__ removes Imprt after attribute

* __NotImprtIfRel__ removes Imprt after Rel, unify this with other left context (r948)

* __ImprtDADJAT__ removes DADJAT



!Sg1 - early cycle, safe rules



* __VSg1IfLeftMun__ selects Sg1 when "mun" is to the left (r949)


* __VSG1IfRightMun__ selects Sg1 when "mun" is to the right (r950)


!Sg2 - early cycle, safe rules


* __VSG2IfLeftDon__ selects Sg2 when "don" is to the left (r951)



* __VSG2IfRightDon__ selects Sg2 when "don" is to the right (r952)

* __VInfIfAhte__ removes Inf if there is no other VFIN between BOS and "ahte" (r953)


!Sg3 - early cycle, safe rules

* __VSG3IfLeftSon__ selects Sg3 when "son" is to the left (r954)

* __VSG3IfRithgSon__ selects Sg3 when "son" is to the right (r954)

* __VNotSg3When12Left__ removes Sg3 if 12 Pron immediate left (r955)

* __VNotSg3IfCom__ removes Sg3 in X with Y is... (r957)

* __Sg3vdic__ selects Sg3 if VERBAL-ACTIVITY between comma and Nom



* __NegSg3BeforeFoc__ selects Neg before Foc/ge or ConNeg (r959)

* __vfin__ removes verb reading when the reading should be noun  





Negative verb, not abbreviation or roman numeral Ii.

!Du1 - early cycle, safe rules

These Du1, Du2 rules are (almost) not in use in our corpus, but we keep them for completeness.

* __VDu1IfMoaiLeft__ selects Du1 when "moai" left (r960)

* __VDu1IfMoaiRight__ selects Du1 when "moai" right (r961)



!Du2 - early cycle, safe rules

The next two rules are not found in the corpus, but logically
they belong, to cover the whole paradigm. There is no verb-internal
homonymy here, but there is homonymy with e.g. Illative for certain verbs.

* __VDu2IFDoaiLeft__ selects Du2 if "doai" to the left (r962)	 

* __VDu2IFDoaiRight__ selects Du2 if "doai" to the right (r963)	 

!Du3 - early cycle, safe rules

The competitor to Du3 is -ba Foc.

* __VDu3IfSoaiLeft__ selects Du3 when "soai" left (r964)

* __VDu3IFSoaiLeft__ selects Du2 if "doai" to the right (r965)	 

* __VDu3IfGuokteLeft__ selects Du3 if "guokte" left (r966) - 15

* __VDu3IfGuokteRight__ removes Sg3 if "guokte" right and 0 Du3 (r967)

* __VDu3IfNjaNLeft__ selects Du3 as verb with coordinated subject to the left (r968) - 43

* __VDu3IfNjaNRight__ selects Du3 as verb with coordinated subject to the right (r969) - 12

* __VDu3IfCollLeft__ hmm, remove this?

!Pl1 - early cycle, safe rules

The competitor here is obviously Inf, but also Pl3 and Prt Sg2.

* __goasbeareInf__ goas beare Inf

* __VPl1IfMiiLeft__ selects Pl1 if "mii" Pron to the left (r971) - 3163

* __VPl1IfMiiRight__ selects Pl1 if "mii" Pron to the right (r972) - 272

* __VPl1NotImprIfMiiLeft__ removes Imprt if if "mii" Pron to the left and 0 = "mii" (r973) - 557

!Pl2 - early cycle, safe rules

These rules are not used when disambiguating the corpus
* __VPl2IfDiiLeft__ selects Pl2 if "dii" Pron to the left (r974) - 0

* __VPl2IfDiiRight__ selects Pl2 if "dii" Pron to the right (r975) - 0


!Pl3 - early cycle, safe rules

Select...

* __r976__ SE V Pl1 if *-1 SII

* __r977__ SE V Pl1 if *1 SII

* __VPl3jaPl3__ selects Prt Pl3 in coordination (r978)

* __muVPl3__ removes Prs Pl1 after mu


The following two may be joined:

* __VPl3IfPronRelLeft1__ selects Pl3 if -1 Rel is linked to -2 Pl (r979) - 7801


* __VPl3IfPronRelLeft2__ selects Pl3 if -1 Rel is linked via COMMA to -3 Pl (r980) - 853

* __VPl3IfCSLinkPl3Left__ selects Pl3 if -1 Rel is linked via COMMA to -3 Pl (r979) - 341


Remove...


The following two may be joined:

* __r982__ removes Prt Sg2 if Pl3 subject - 6002

* __r983__ removes Prt Sg2 if Pl3 subject via CS - 305

* __VPl3Lookalikes__ removes "verbs" like "manne" and "dušše" (r984) - 274


* __VSg3Lookalikes__ removes "verbs" like "skuvlii" 


* __VPl3NotSg2BefPassive__ removes Sg2 for Pl3 and Inf before passive (r985)

* __EssNotV__ selects Ess instead of VFIN

* nuorra (vs. nuorrat V)
* __PlNomCoor__ Selects (N Pl Nom)

* __johtilit og bastilit__ removed johtit + Der/l 




!PrsPrc

* __PrsPrc__ selects PrsPrc if coordinated with A - 10
Early rule since many PrsPrc readings are removed later.


OBS: denne er ikke helt bra







* Actio Gen








* __BeallileatPl3__ when bealli or oassi + Pl Loc


* __ENInf1__ 

* __ENInf2__ selects Inf (NOTE, this was further down in sme-dis)

* __ENInfcoor1__ selects Inf coor

* __ENInfcoor2__ selects Inf coor



!!!Section 4: CYCLE 1B: REMOVING THE READINGS THAT WERE LEFT FROM THE 1A RULES 

We don't need more Px sections, it's done alrady

!!Noun, adjectiv, PrsPrc or not?




* __NnotAcoord__ removes A instead of N (earlier: selects N instead of A), based on coordination with N, and a vfin-verb

* __NPlbeforeRel, NSgbeforeRel__ select N in front of Rel and MO

!!Adjectives and adverbs

!Adv or not?
maid has many readings and as Rel it is a member of S-BOUNDARY. Therefore we need to disambiguate is early in this file. Most important is to select Adv. Because of that A ang N still can have Vfin readings, it is difficult to make very general rules.

* __vaikkomii__

* __giitu__ or not


* __AdvPx__

* __comparAdv__

* __guhkáAdv__

* __lasiAdv__


* __vuostálagaAdv__


* __maidAdv1__ selects maid Adv when there is no vfin to the right.

* __maidAdv2__ selects maid Adv copulas and PrfPrc or Actio Ess. We need this rule because of that there can be an Inf to the right which also has Vfin reading.


* __maidAdv3__ selects maid Adv even if there is a vfin to the right.

* __maidAdv4__ selects maid Adv between two verbs or the verb after is IV

* __maidAdv5__ selects maid Adv in front of Comp which at this stage can have vfin analysis.

* __maidAdv6__ selects maid Adv between copulas Pl3 and N Pl.

* __maidAdv7__ in a special construction with geahččat

* __maidAdv8__ selects maid Adv after a Pers

* __maidAdv9__ selects maid Adv even 

* __maidAdv10__ selects maid Adv iežas 

* __maidAdv11__ selects maid Adv iežas 

* __maidAdv12__ selects maid Adv for Lea maid A Inf


* __KillmaidAdv__ removed the remaining maid Adv


* __mielasAdv__ 


__matPcle__

The following two rules are omitted. They only inflect on the disambiguation of mat pcle, a wackernagel, which is done in the rule over here, I think.







* __olluNom__ 










* __olluAdv__






* __vejolaččatAdv__
















* __jogoAdv__ jogo and juoga as adverbs

* __AdvPx__ selects Adv Px instead of N Px

* __AdvwhenAPl__ selects A Pl instead of Adv

!!Disambiguating abbreviations


* __AttrABBRNum__


!!Disambiguating particles

* __sonPcle__ selects son Pcle, the remaining Pcle are removed



!!Disambiguating clitics




!!Disambiguating numerals



!!Disambiguating adpositions

!čađa
* __caddaN__ if čađa and movement-v


Commented out som adp-rules we don't need anymore:



!geahčai
* __geahcaiPP__ not geahččat V


!guovddaš
* __guovddasPP__ or not 

!mađe
* __madePo__ after Num Gen

* __NumMade__ Num before mađe

!miehta
* "miehtá" is also VFIN, and miehtá needs special treatment 
** __miehtaPo__ after place or time Gen

** __miehtaPr__ before place or time Gen

* __oidnosisAdv__

* "ovddas" has many readings and needs special treatment 
** __ovddasPo__  - commented out because we don't need it

* special rules for rastá because it often is Adv, and it can be an object connected to the PP
** __rastaAdv__  čuohppat/časkit/sahet rastá

** __rastaPo, rastaPr__  fievrridit olbmo man nu rastá

** __rastaPr__  rastá ráji/rájá

* __birraPo, birraPr__ special rules for birra because it often is Adv, and it can be an object connected to the PP




* "vuostá" has many readings and needs special treatment 
** __vuostaAdv__  váldit vuostá/vuostái
** __vuostaPr__  váldit vuostá/vuostái	


* vuollel ja badjel as Adv in front of Num











!LIST LG-MATERIAL = Inf Adv Nom ;

* __gaskasPosticky, gaskasPrsticky__ selects Po after coordinating language materials

* __PoParantes__ selects Po after paranteces






* __PoNomCompl__ removes Po if no possible complement to the left



* __PoMeasure__ removes Po when MEASURE to the left

* __PrGen1__ selects Pr

* __PrGen2__ selects Pr


* __PrNoCompl__ removes Pr if no complement to the right	


* __PoGen__ selects Po



!Diambiguation  Noun vs. Po or Pr:

* __vuollaiPo__ selects

* __beallaiPo__ selects

* __PrTime__ 


* __ovdalPr__ selects

* __gaskanPo__ selects

* __gaskkasPo__ selects

* __ovddasPo1__ selects

* __ovddasPo2__ selects

* __ovddasPo3__ 	selects

* __ovddasPocoord__ selects

* __NwhenPo__ removes N if Po

* __VwhenPo__ removes V if Po




!!Some particular subjunctions and Neg Sup

* __amasCS__ selects CS, not A or Neg Sup

* __amasA__ selects A, not CS or Neg Sup

* __amasNegSup__ selects Neg Sup, not CS or A

* __amasNegSup__ selects Neg Sup, not CS or A


* __amatNegSup__ selects Neg Sup, not CS

* __dasgoCS__ selects CS, not Qst

* Select and remove __vaikkoAdv__ , 


!!go as CS and Qst Pcle
First select all "go" Qst Pcle, then remove them so the rest will be "go" CS

* __standQst__ selects Pcle in standard questions

* __standQst__ selects Pcle in standard questions without question mark



* __objQst__ selects Pcle in questions which function as object in the clause



* __objQst2__ selects Pcle in standard questions where an object follows VFIN


* __subQst__ selects Pcle in questions as subordinated clause

* __vaiQst__ selects Pcle in questions with vai

* __auxQst__ selects Pcle in questions as subordinated clause, starting with AUX

* __refQst__ selects Pcle in two main clauses, the first one a question which is referred to in the second.

* __nounQst__ selects Pcle for go after NP

* __poQst__ selects Pcle for go after Po

* __negQst__ selects Pcle for go after Neg


* __AdvQst__ selects Pcle for go after WORD

* __killPcle__ removes all remaining Pcle for go 







!!!Section 9 WORD-SPECIFIC RULES



!!Some particular subjunctions

!!Adverb rules

!!!MAPPING OF COMP-CS< , COMPLEMENTS OF PARTICLES IN COMPARISON
First map all COMP-CS<, then remove the other readings


* __compInf__ Inf go Inf

* __ComptimeAdvl__ buoret go ovdal

* __ComptimeAdvl__ ii nu ollu go dál

* __Compadvlcase__ eará sivas go fuorrávuođas

* __CompNumP__ uhcit go njealji stivrralahtu doarjagiin

* __CompNumP__ numerals




* __CompEanet__ dohko eanet go 


* __Compvejolas__ go vejolaš

* __compNomHead__ NP-HEAD-NOM (ADVL) go NP-HEAD-NOM (ADVL). VFIN-NOT-IMPRT pga manglende disamgiguering

* __CompNomHead__ Comp NP-HEAD-NOM leat go NP-HEAD-NOM  


* __compMisc__ go geassebuođut, go dán áigge





* __Compdego__ dego @COMP-CS<


* __compAccdego__ Acc dego Acc

* __compAccgo__ Acc go Acc


* __compNum__ TRANS-V eambbo go Num  


* __compCoord__ coordination	

* __compCoordAttr__ coordination again, now with Attr. Speacial rule because of that Attr also has other readings.	

* __compInf__ 

* __compInfCoor__ 



* __killAllnotComp__ Removes analysis which are not @COMP-CS<

** ''This was the kill all not Comp rule!!''

* __goCSbeforeComp__ Selects CS analysis in front of @COMP-CS<

* __ACompgo__ Selects Comp analysis in front of go and @COMP-CS<




!!!MAPPING OF CC AND CS

Mostly we map both @CNP and @CVP, then we select @CNP, after that we remove them so @CVP remains

* __cnpCompSC__ Map @CNP if @COMP-CS< or COMPAR ahte

* __cnpCompSpec__ special rule because of PrfPrc = VFIN

* __CSasCNPCVP__ Map some CSs both @CNP @CVP

* __CSasCVP__ Map @CVP to CS

* __CCasCNPCVP__ Map (@CNP @CVP) to CC

* __ahteCNP__ ahte CC @CNP, remove the rest

* __killAllahtenotCS__ All other occurrences of "ahte" are CSs.


* __vaiCCCNP__ vai as CC or CS

* __vaiCC__ remove vai as CC 

* __vaiCCNegQst1__ vai CC @CVP before Neg or question

* __vaiCCNegQst2__ vai CC @CNP in question about two alternatives


* __vaiCCPrfPrcInfQst__ vai CC @CNP in question about two alternatives

* __killAllvainotCSCVP__ Select all vai CS @CVP	

* __dadeCNP__ removes dađe @CNP, so @CVP remains

* __CVPNPron__ No finite verb or verbalactivity in front N/Pron @CNP N/Pron	


* __CVPnoVfin__ No potential finite verb following

* __CVPnoVfin__ Infitive following


* __CVPnoVfin_iige__ didn't succeed including iige in barrier in the last rule

* __CVPInfInf__ between to Inf

* __CVPadvladvl__ between to ADVL


* __CVPAdvAdv__ between to Adv


* __CVPActioNom__ 







* __CVPnoVfinAdvl__ No finite verb in front ADVLCASE @CNP ADVLCASE	







* __CVPAdvNom__ Nom @CNP Adv Nom	

* __CVPCopNomInf__ COPULAS Nom @CNP Nom Inf	


 *__CVPoppramsing__ Lásse, Iŋgá ja mun


*__CVPCmp/SplitR__ Cmp/SplitR @CNP

* __CVPwrongCmpnd__ wrongly formatted compounds

* __CVPAAttr__ A Attr @CNP A Attr	

* __CVPA__ A @CNP A 	


* __CVPAccAdv__ Acc @CNP Adv Acc	








* __killAllCNP__ removes all remaining @CNP

* __XCC-CS__ removes CC and CS with no synttag



!!PRONOUNS

!Plural?

* __PlSg3V__ removes plural in front of Sg3 verb (and __SgPl3V__ does the opposite)



!!Interrogative and relative pronouns


* __Interr__ selects interrogative pronouns in questions




* __InterrIfPot__ selects interrogative pronouns in potential sentences, and after that we remove the remaining Interr


* __munPl3__ removes Pron Pers Pl3 if there is no verb agreement

* __Rel__ selects Rel

* __RelSg1, RelSg2__ select Rel

* __RelPl__ selects Rel

* __RelPl__ removes Rel



!!Emphatic ieš     

* __ies1Pl, ies2Pl__ select Pl for ieža



* __iesDu__ select Pl for ieža


!!Numerals

* __NifNum__ 



* __AdvOvtta__ 

* __AdvNumEss__ 

* __NumCurrency__ Selects Num

* __NumNomJahki__ Selects (Num Nom) 

* __NumDassa__ Selects (Num Nom)

* __NumAccCurrency__ Selects (Num Acc)	

* __NumNom__ Selects (Num Nom) 

* __NumNomCoord__ Selects (Num Nom) 

* __r1082__ Selects (Num Nom) 

* __year__ Selects (Num Gen)

* __numunit__ Selects (Num Gen) + NUMUNIT 

* __NumGenPo__ Selects Gen if you are Num and there is a Gen following the first Gen to the right ''gávcci máná njuni ovddas'' 




* __WWNumOrdIllAttr__ selects Ill Attr and Loc Attr for numerals and ordinals























!!Indefinite pronouns
The rules are not documented yet

* __IndefAttr1__ Selects (Indef Attr) 	


* __IndefAttr2__ Selects (Indef Attr) 

* __IndefAttr3__ Selects (Indef Attr)


* __NoAttr__ Removes Attr if you are Pron and first one to your right is (Pron Rel)	

* __NoIndefAttr__ Removes (Indef Attr) if first one to the right is (Pron Pers Loc)

* __NoIndefGen__ Removes (Pron Gen Indef) or (Pron Acc Indef) if intransitive mainverb to the left and end of sentence to the right ''muhto gávdnojit maid eará''

* __IndefAttr4__ Selects Indef if you are Interr, and to the left is ''jus''












* __AttrBuot__ IFF-rule

* __IndefNom__ Selects (Pron Indef Nom) if you are BUOT and first one to the right is PL3-V 	

* __IndefNom2__ Selects Indef Nom if you are BUOT and there is no transitive verb to your left or roght in the clause















* __miiIndef__ it vaikko mii or mii beare












!!Demonstrative pronouns - should have a look at these



* __DemPlIll__ removes Dem Ill and Dem Loc in front of Acc


* __DemSgNom__ selects Dem Nom Sg if VFIN Sg3



* __DemIndefAttr__ selects Dem in front of Indef Attr, no verb to the left

* __DemGenSeammas__ selects dat Dem Gen in front seammás

* __DemSg__ removes Dem Sg when there is no Sg N to the right

* __datPersSg3__ selects dat Pers Sg3 when there is no N to the right


* __PersNRel__ selects Pers Sg3 when there is a N and a Rel to the right

* __DemMeasure__ removes Dem in front of a Num and MEASURE or NUMUNIT in Ill




!!Disambiguating adjectives 

!Rules related to specific adjectives

* jagáš

* boaris A or N



* dáláš

* dološ 

* garra N vs. garas A

* nanus



* sierra

* surgat

* veara


* __vulitAttr__

* __Comp__ rules select Comp A


!Attribute disambiguation


* __AttrVFIN__ removes Attr in front of VFIN


* __AttrnotNA__ removes Attr when no N or A to the right

* __ANomILLA__ selects Nom when ILL-A	

!Rules for Attr between Dem and N

* __AAttrDemSg1, AAttrDemPl1__ 

* __AAttrDemSg2, AAttrDemPl2__ 

* __AAttrDemSg3, AAttrDemPl3__ 

* __AAttrDemSgIll, AAttrDemPlIll__ 

* __AAttrDemSgLoc, AAttrDemPlLoc__ 

* __AAttrDemComPl__ 

* __AAttrDemdakkar__ 

!Other attribute rules 

* Not attribute in front of Ess: dovddus sánálaš nissonin



* __AAttrN__ no copulas close to the left

* __AAttrCop__  copulas close to the left



* __AttrPlacelaš__ This rule selects Sem/Plc Der/lasj A Attr in front of Prop or N


* __AdvManimus__ 


* __AttrIllCop__ 

* __AttrAdv__ 


* __Cop__ 


* __ANom__  removes A Nom

* __AAttr__  selects A Attr


* __ASuperlAttr__  selects A Superl Attr





* __AdvN__ removes Adv   

* __AAttrPunct__    

* __AAttrgoAAttr__    

* __AttrTIME__    bad rule

* __AAttrCoord1__ coordination, first part

* __AAttrCoord2__ coordination, first part

* __PrfPrcCoordA__ selects PrfPrc in coordination with an A

* __ACoordPrfPrc__ selects A itn coordination with PrfPrc 

* __AAttrContra__ selects A itn coordination with PrfPrc 



!Special rules for 'buorre' (the only adjective showing case agreement)







This block of rules is there to ensure case agreement for comparatives.

* Select Pl Nom if V Pl3

* Remove Nom, Acc and Gen if Comp


!alit vs. allat Comp Attr


* __allat__ in front of ALLAT OR MONEY OR EDUCATION OR go

* __alitColour__ in coordination with COLOUR

* __alitN__ in front of VEHICLE, CLOTHES, BEDCLOTHES, BUILDING and more

* __alitEOS__ in the end of a sentence


* __APlNomafterCop__ selects A Pl Nom after copulas and Pl Nom OR Pl Pron

* __APlNomafterCop2__ selects A Pl Nom after copulas and Pl Nom OR Pl Pron

* __APlNomafterDu__ selects A Pl Nom after copulas and Du

* __ASgNomNoSubj__ selects A Sg Nom after copulas Sg3 or Neg Sg3

* __ASgNomafterCop__ selects A Sg Nom after copulas and Sg Nom, not so strong constraint for the target


* __ASgNomEssCopNeg__ selects A Sg Nom after copulas Sg3 or Neg Sg3s, 


* dsfa

* __AcompGo__ Selects (A Comp Nom) even if there is no verb (ellipse)

* __Wr1775xc__ Selects (A Sg Nom) if you are (N Sg Loc), Der/NomAg or (Ex/N A). Copulas is to the left. EOS or CLB is to the right

* __Wr1776xc__ selects (A Sg Nom) 



























!!And now some rules for adverbs that modify adjectives




















!!Proper nouns

!!!VERBS

!!Disambiguating verbs - part 1 

First ConNeg forms, they are dependent upon Neg verbs. Then Imperative 
(with their special syntax), infinitive, and other infinite forms. 
Person comes later (in part 2)




!!ConNeg forms

Number following the rule headers below refer to numbers of hit in a 13 053 859 word corpus.

* __ConNegImp__ selects ConNeg Imprt if Neg Imprt to the left. - 4265

* __PrfPrcConNeg__  to ConNeg Aux after PrfPrc

* __ConNegIfNeg__ selects Ind ConNeg if Neg Ind to the left. This is the main (and common) ConNeg rule. - 660327


* __ConNegPrt__ selects Prt if Prt to the left

* __ConNegCondIfNeg__ selects Cond ConNeg if Neg Cond to the left. Less used, obviously. - 0 - homonymi?

* __ConNegPrfPrc__ selects ConNeg for leat when topicalised PrfPrc between Neg and leat - 713

* __ConNegImpCC__ catches the second ConNeg in cases like don't smile or laugh - 0

* __ConNegIndCC__ catches the second ConNeg in cases like doesn't smile or laugh - 369

* __NotConNegIfNotNeg__ removes ConNeg if no Neg to the left. Consider unifying with NotConNegNotNeg. - 1094269



* __NotConNegNotNeg__ removes remaining ConNegs whenever no Neg to the left. - 5862






!!Imperative

See also ''Imprt or Ind'' some sections down.

* __PassLNotImprt__ removes Imprt when passive (sentence-initial, hence important)

* __ImprtLeat__ says BOS Leat A is Imprt - 575

* __ImprtDál__ 

* __SelImprtExcl__ selects initial Imprt when excl mark 


* __ImprtComma__ 

* __ImprtNotVGen__

* __NotImprtInd__ 

* __NotImprtConNeg__ 

* __NotImprtA__ 

* __NotImprtN__ 


* __NotImprtVFIN__ 


* __NotImprtSlash__ 


* __NotImprtGo__ 


* bearrat TV or berret IV - berret is aux


!!Infinitive


* __r2974__ was moved up to select PL3-V after N Pl, might be relaxed to REMOVE Inf

* __r2976__ was moved up to select PL3-V after N Pl, might be relaxed to REMOVE Inf

* __r1809__ Not Pl1 (but Inf) if VFIN to the left, This is the basic Inf rule.

* __r1812__ 


* __InfCompCs__ 

* __r1811__ 


* __EssInf__

Rules that prevent later selection of Inf for a finite verb in the frame 			

''INF-V...CC...''

* __r1816__ 


* __r1818__ 

* __r1819__ 



* __r1820__ 

* __r1821__ 







* __r1823__ 

* __r1824__ 

* __r1825__ 

* __r1827__ 

* __r1828__ 




!!Verbgenitive




* __VGen__ is typo



* __VGen__ selects VGen after VGEN-V-TRIGGER-verb


* __Gen2__	selects VGen after after gaskan and lahka

* __VGen3__ selects VGen after copulas

* __VGen4__

* __VGenCoor__


* __KillAllVGen__ removes all VGen (r1842)


!!Supinum vs. potential -- no example found in large corpus

!!Perfect Participle

* __r1844__ removes PrfPrc if 0 is the second N in an N and ... N construction

* __r1844__ removes PrfPrc if 0 is the second N in an N and Gen ... N construction (this is marginal)

* __PrfPrc_Ess__ removes N Ess if 0 PrfPrc

* __r1852__ selects PrfPrc if copula to the left

* __r1853__ selects PrfPrc if Rel to the left which again is linked to copula



!Topicalized version

the following chapter should be possible to unify.

* __r1855__ selects PrfPrc if Nom to the left linked to copula

* __r1857__ selects PrfPrc if Acc to the left linked to copula

* __r1858__ selects PrfPrc if NP head to the left linked to copula

* __r1857__ selects PrfPrc if copula to the left

* __r1861__ selects PrfPrc if VFIN to the left



* __r3576__ selects PrfPrc if Acc to the left linked to activity verb

* __r1863__ is the mannan vahkku rule


!!Actio


!!Present participle
*orrut vs. orrot) 
!!Rules for "addit" (which is an adjective, but more often a verb)
!!Actio Loc = N Loc


* __ActioLoc__ is an IFF rule, we also need rule for 'leat', like in lea go bieru oastimis




!!Actio Nom = Ess


!!Imprt or Ind



* __removeAllImp__

!!Nouns or verbs

The rules are no documented yet

* __VFINAttr__

* __NPlbuorit__  

* __ActioEssNum__	

* __ActEssIfSensationv__	

* __NoActorIfSg3__

* __GenIfPo__


!!Demonstrative pronouns, agreement in DP - should it be moved to after verbmappings? 
The rules are no documented yet

* __DemAttr__



* __IndefAgree__ guhtege goappašat iešguhtege guhte




* __DemCASEPl__

* __DemCASESg__

* __DemAttrNum__

* __DemAcc__

* __DemAttr__



!!!VERB MAPPINGS


!!Verbs as predicatives (@SPRED>) and (@<OPRED) 

!The tags (@SPRED>) and (@<OPRED) target  PrfPrc
The rules are no documented yet

* __spredPrfPrc__ Buressivdniduvvon lehkos (topicalised PrfPrc) -- was r494

* __opredPrfPrc__	

* __opredPrfPrc__


!!Passive verbs often have 




!!Verbs as prenominal participles (@>N):

* Some verbs will not be @>N

* __NPrfPrc1__ with 1C N Nom


* __NPrfPrc2__ with -1C Dem or Num or Attr or Indef

* __NPrfPrc3__ with PrfPrc or ConNeg to the left, the N can be different cases

* __NPrfPrc4__ mannat in front of TIME

* __NPrfPrc5__ for LEX-PASS


* __NPrfPrcPr__ after Pr 

* __NPrfPrcPo__ before Po

* __NPrfPrcGen__ after Gen


* __NPrfPrc__ between aux and prfprc


* __NPrfPrc6__ the verb can be to the right

* __NPrfPrc7__ Der/Pass, no TIME to the right

* __NPrfPrcCoor__ coordination

!(@+FAUXV) and (@+FMAINV) target Neg, orrut
* __+FAUXVNeg__

* __+FMAINVorrut__ finite orrut

* __FAUXVorrut__ finite orrut

* __FAUXVorrut__ infinite orrut

!(@<SUBJ)  target Inf




* __<SUBJInf2__

* __r354__

* __<SUBJInf3__

* __<SUBJInf4__

* __<SUBJInf5__

* __<SUBJInf6__

* __SUBJ>Inf__

!(@<SPRED)  target Inf






!(@<ADVL)  target Inf, Actio Ess

















!@-F<OBJ  target Inf 





!(@A<)  target Inf 	
* __AInf__ Inf 	

* __r368__	

!(@N<)  target Inf, Actio Ess






* __N<Infcoor__





!(@<ADVL)  target Inf, Actio Ess




* __ADVLActioEss__ Inf 		


!(@<OBJ)  target Inf, Actio Ess, PrfPrc 

















* __OBJActioEss__ Inf 		


* __OBJPrfPrc__ PrfPrc 			










!(@+FMAINV) and (@+FAUXV) and (@-FAUXV)

* __+FMAINVaux__ AUX-OR-MAIN verbs     

* __+FAUXVcop__ AUX  COPULAS     



* __+FMAINVcop__ COPULAS verbs     

* __+FAUXVaux__ AUX  verbs     


* __+FAUXVboahtit__ boahtit as AUX      

* __-FAUXVaux__ AUX verbs     

* __+FMAINVcopInfconstr__ leat before Inf     



* __+FMAINVCop__  copulas even if PrfPrc coming after


* __+FAUXVCop__  copulas coming before the mainverb


* __+FAUXVCop__  copulas coming before the mainverb, relative clause inbetween


* __+FMAINVcopMannan__  leat before mannan TIME     

* __+FMAINVHabconstr__  in habitive constructions    

* __+FMAINVCoopCoord__ coordination  

* __+FAUXVleat__  

* __+FMAINVAux1__  

* __-FMAINVAux2__  

* __+FAUXVCop__  copulas coming after the mainverb

* __+FAUXVboahtit__  boahtit coming before the mainverb

* __+FMAINVCop__  copulas 	


* __+FMAINV__  to the remaining finite verbs which are not AUX    




* __+FMAINV__  to finite verb after mainverb


















!(@-FMAINV) and (@-FAUXV)

* __-FAUXVConNegCop__  to ConNeg COPULAS   

* __-FAUXVConNegAux__  to ConNeg AUX-OR-MAIN   

* __-FAUXVConNegAux__  to ConNeg AUX   




* __-FMAINVConNeg__  to ConNeg   





* __-FMAINVConNeg__  to ConNeg

* __-FMAINVConNeg__  to ConNeg Aux after PrfPrc

* __-FMAINVConNegCop__  to ConNeg COPULAS   




* __-FAUXVPrfPrcAux__  to PrfPrc AUX  before Inf or Actio Ess

* __-FMAINVPrfPrc__  to PrfPrc 

* __-FMAINVPrfPrcEss__  to PrfPrc before Ess

* __-FMAINVPrfPrcleat__  to PrfPrc leat

* __-FMAINVPrfPrcafterAuxAux__  to PrfPrc after two Auxs

* __-FMAINVPrfPrccoord__  to PrfPrc coordination	

* __-FMAINVPrfPrccoord__  to PrfPrc coordination	

* __-FMAINVPrfbeforeAux__  to PrfPrc before the Aux	

* __-FMAINVPrfafterMan__  to PrfPrc before the Aux	



* __-FMAINVInf__  to Inf



* __-FMAUXVActioEss__  to Actio Ess

* __-FMAINVActioEss__  to Actio Ess

* __-FMAINVSup__  to Sup

* __+FAUXV__ to  Aux


* __NPrsPrc1__ with 1C N Nom



* __ActioNom__ with 1C N Nom

* __<ADVLVAbess__ VAbess ADVL

* __<ADVLVGen__ VGen ADVL

* __ADVL>VGen__ VGen ADVL


* __<ADVLGer__ Gerundium ADVL

* __ADVLGer>__

* __-FMAINVLoc__ Actio Loc

* __>AActioGen__ Actio Gen

* __PrfPrcEllipsis__ being verbal head when finite verb is missing


!And then we remove the verbs which didn't get any syntactic tag, in favour of verbs with syntactic tags.



* __realverbX__


* __NomActLocX__

* __NomActX__ removes other readings when PrfPrc Or Actio Ess

* __IfonlyVerb__ selects the FMAINV reading in the cohort

* __IfonlyConNeg__ ConNeg if it is @-FMAINV or @-FAUXV


!__killifVinCohort__ This rule removes all other readings, if there is a mapped V reading in the same cohort. Every case which this goes wrong, should be fixed in mapping rules or previous disrules.

* __X__





!!!NOUNS





!!!CASE DISAMBIGUATION

!!Num as subject, tricky cases - the rule should be here because of the verbdisambiguation





* __DiminNomPxSg1__	


!!ACCUSATIVE-GENITIVE DISAMBIGUATION


!!Secure rules for choosing Acc



* __PGenN__ selects Gen when (Pron Pers) to the left and N to the right ''mu sámevuođa iđuid''

* __CoGen1__ (quite strict) selects the first of coordinated genitives ''riikkaid, čearuid ja boazoorohagaid ovttasbarggu''



! Semantihkka: Choosing accusative or genitive semantically



* __vuoiAcc__ selects accusative if ''vuoi'' or ''vuoi surgat'' to the left 







* __SEMnotPossessor__ Removes Gen if you are not a possible possessor (a human) # HAB-ACTOR


* __SEMnotHUM__ removes Gen. This is when an NP is thought to be the OBJ, because it's not in the human sets and to the right is NON-FAMILY ''njálgáid mánáide''. 

* __SEMXr2066__ Removes Gen if there is a human or org to the right, exeption for ''čállingiela áhčči'' and so on





* __SEMgenEss__ Removes Acc if there is Gen + Ess, like ''dálu eamidin''




* __SEMXxr2071__ Removes Gen: Nobody can possess a Proper name? Except from (Pron Pers) and Sem/Fem OR Sem/Mal

* __SEMXxPropOrg__ Removes Gen: Who can possess Prop Sem/Org?    

* __SEMNation__ Removes Gen: Who can possess Sápmi?    

* __SEMdep__ Select Gen if main-organization in front of department   
* __SEMorghum__ select gen if organization or education in front of human   



* __SEMXr2073__ Remove Gen: Accusative in front of a human group ''loktema sámiid buorrin''

* __SEMr2074__ Selects Gen in front of HUMAN-GROUP

* __SEMGenOrg__ Selects Gen in front of Sem/Act


 * __SEMactor__ Select Gen in front of ABSTRACT and RIEKTEDILLI ''unnitlogu oaidninčiegas''

* __SEMXr2076__ Selects Gen if you are HUMAN or Pron with an ABSTRACT to your right ''iežaset vuoigatvuođa''

* __VocNom__ 



* __SEMyouareNom__ Removes Gen and Acc when 0 FAMILY or PROFESSION because you are Nom. Not if -1 Num and VFIN is LEAT or IV ''Oahpai go Sire sámegiela''

* __SEMyouareGen__ Removes Nom if movement verb to the left and illative to the right, because you are the modifier of Ill ''mannat Madame Tussaud kabinehttii''

* __SEMnotNom__ Removes Nom if a Nom to the right followed by a transitive verb. 0 is animate and to the right is Ill. You are the modifier of Ill







* __SEMXxr2081__ Removes Gen if NATION or POLITICAL-PLACE are to your right ''dilálašvuođaid sámi''


* __SEMr2082__ Selects Gen if you are LANGUAGE, giellanjuolggadus or giellaláhka in Acc-case and to your right is SAPMI-N-HEAD ''sámegiela hálddašanguovlun''


* __SEMr2084__ Selects Gen for ''hálddašanguovllu suohkanat/gielddat''


* __SEMguovttis__ selects genitive in front of guovttos and guovttis

* __SEMXr2087__ selects Gen if you are a Prop/Plc followed by "gielda" or "suohkan"

* __SEMXr2087__ Selects Gen if you have "eana" or "guovu" immediately to your right ''Gomorra eatnamii''

* __SEMhumgroup__ , tja




* __SEMplcGen_a__ Selects Gen if you are GEOGRAPHICAL-PLACE or (Prop Sem/Plc) in front of PLACE-ADV ''Finnmárkku máttabealde''
* __SEMplcGen_b__ Selects Gen if you are GEOGRAPHICAL-PLACE or (Prop Sem/Plc) after a PLACE-ADV


* __SEMplcGen2__ Removes Gen in front of a GENERAL-PLACE or POLITICAL-PLACE, if you are a noun ''bidjen hildu sadjásis'' 

* __SEMplcGen3__ Removes Gen in front of GENERAL-PLACE or POLITICAL-PLACE, if you are ABSTR-TEXT or TEXT ''cealkámušaid guovlluid dearvvašvuođafitnodagaid jahkedieđáhusain''

* __SEMXr2079__ Removes Gen if you are Acc in front of MANNU ''guđii virggi skábmanánu 1. b.''




* __SEMxhab__ Selects Acc if COPULAS to the left of HAB-ACTOR ''lea min''

* __SEMxboaris__ Selects Gen if you are ''boaris'' in front of SAPMI-N-HEAD or SAPMI-PROP-HEAD ''sii dolvo áhku boarrásiid siidii''

* __EMeallimamuorra__ Selects Gen eallima muorra


* __ACRGen__ Selects genitive: NRK Sápmi

* __ACRAttr__ Selects genitive: IL Nordlys








* __SEMXxr2093__ Selects accusative: if váldit to the left and mielde to the right: ''váldit mielde''


* __SEMXr2096__ Removes genitive: because Accusative in front of an organization


* __SEMGenORG__ selects Gen (modifier): in front of an organization ''Stáhta Oahpahuskantuvra''


* __SEMGenORG__ selects Gen (modifier): in front of an organization ''Stáhta Oahpahuskantuvra''



* __SEMgen1__ removes Acc if buot, gait or buohkat in front of a genitive, followed by a plural noun ''buot Norlándda ohppiid''


* __SEMgen2__ removes Acc if bargat or dihte are FMAINV or Inf and are found somewhere to the left of a Gen, which is followed by a noun ''bargame boazodoallolága ođastemiin''

* __SEMXr2103__ Selects accusative: OASSI is usually accusative ''hálddaša stuora oasi''


* __SEMXxr2104__ Selects accusative: if WRITING-ACTIVITY-V to the left and you are a TEXT ''čállá vaidaga''

* __SEMXxacc__Removes accusative: if WRITING-ACTIVITY-V to the left and a noun to the right ''čállit Norgga vásáhusaid''


* __SEMXxOrgRep__ Selects genitive: An organization´s representative ''Sámiráđi ovdaolmmoš''


* __SEMxr2107__ Acc if *-1 fáktemuš




* __SEMXxr2108__ Selects genitive if you are SAPMI with an Acc/Gen immediately to your left and a noun immediately to your right ''girji sámi áššiid (birra)''

* __SEMsapmiModifier__ Selects genitive (modifier): Sámi, suoma or ruoŧa  as modifier of noun ''sámi oahpahus''




* __SEMsapmiModifier2__ Select genitive (modifier): Sámi, suoma or ruoŧa on both sides of CNP as modifier of noun ''Suoma ja Ruošša soahti''

* __SEMdazaModifier__ Selects genitive (modifier): dáža, indiána, maya-indiána or romer  as modifier of noun ''dáža oahpahus''




* __SEMXr2115__ Selects genitive (modifier) in front of a lahka-noun ''spábbačiekčanlága vuoigatvuohta''

* __SEMXr2116__ Selects genitive (modifier) if you are LAHKA OR ORGANIZATION followed by mannu, day and numerals..


* __SEMvaldi__ Selects removes NomAg váldi, till we find examples of actual use of it 



* __SEMtext__ (modifier) selects genitive (modifier) if you are a TEXT in front of KLASS ''doalloplána čuoggái''




*  __SEMgiella1__ (modifier) selects Gen if you are a LANGUAGE in front of LESSON or SATNI ''sámegiela oahpahusa''


* __SEMsamegiella__ selects Gen for LANGUAGE if *1 is LESSON 



* __SEMlang__ removes Gen if LANGUAGE is to the right, but not if you are ACTOR-ROLE and so on ''oahpponeavvuid sámegillii'' 

* __SEMlang2__ Gen if you are LANGUAGE with 1 N: You are only a modifier in a sentence with a TV-verb, if there is an Acc or Com between you, or if the Obj is topicalized ''ráhkadii sámegiela Áppesa''


* __SEMgiella2__ Gen if you are Pron followed by giella ''iežas giella''










* __SEMstahta1__ Gen if 0 stáhta 1 org etc.



* __SEMfylka1__ Gen if you are FYLKA followed by fylka ''Romssa fylkkasuohkan''

* __SEMfylka2__ Gen if you are FYLKA, then "ja" to the right followed by FYLKA ''Finnmárkku ja Romssa fylkkagielddaide''

* __SEMfylka3__ Gen if FYLKA and some place or org to the right ''Finnmárkku ássiide''



!Other genitive rules

* __topGEN__ Selects Gen if sentence intitial. To the right a Prf Prc that modifies nominative ''Stáhta nammadan láhtu''

* __NomQst__ Selects Nom in a Qst-sentence. To the left is Nom and leat with a Qst-particle ''Leat go álbmotmeahcit veahkaváldi''

*__Genlassin__ Selects Gen if first one to the right is lassin ''bargostipeanddaid lassin''

*__lassinIll__ Selects Ill if first one to the left is lassin ''lassin Sarai''



!Gen and preposition/postposition



* __GenAPP__ Selects genitive when a preposition to the left, or when a postposition to the right ''rastá riikarájiid''


* __NomIfPo__ removes Nom if sentence initial, because it modifies Gen


* __GenPoCoordPunct__ Selects genitive for coordinated postpositions: with PUNKT to the left 

* __GenPoCoord__ Selects genitive for coordinated postpositions ''ráŋggáštusa ja buhtadusa hárrái''


* __GenGenPo__ (modifies pp-phrase) selects Gen in front of postposition-phrase ''álgojagiid soađi maŋŋá''

* __GenORG__ (modifies Loc) selects Gen if you are MAIN-ORGANIZATION and to your right is Loc ''dearvvašvuođafitnodagaid jahkedieđáhusain''

* __SEMnom__ (modifies Nom) removes Acc if sentence boundary or adv to the left. To the right is Nom followed by a transitive verb and Acc ''stálu beana njoallu háviid''


* __SEMDomain__ 

* __deaivatGenlusa__ selects genitive when used like deaivat Gen lusa/lahkosii even if the verb deaivat belongs to the strict TV set.


!Genitive in place adverbials ROUTE

* __GenPlc__ Selects genitive if you are ROUTE, and there is a MOVEMENT-V to your left or right ''boahtiba dán geainnu''

* Selects accusative if you are ROUTE, and the verb čuovvut to the left. 

* __ruovttoluottaAdv__

!Adjectives take object

!Temporal adverbials: Choosing accusative or genitive TIME

* __GenMannuOrdRight__ selects Gen if you are mannu and to your right is A Ord ''miessemánu 10.''

* __GenMannuOrdLeft__ selects Gen if you are mannu, to your left is Ord and to your right is a numeral

* __JahkeNumNom__ selects Nom if you are Num, to your left is beaivi, then ord/Num and then mannu ''borgemánu 1. b. 1891''

* __GenBoahtte__ selects Gen if you are time, to your left is boahtte, boahtit, čuovvovaš or ovddit


* __TIMEobs__ selects Gen if you are time, and to your right is an intransitive real-verb. No adverbials allowed to the right ''vuolggán bearjadaga''

* __GenGuhte__ selects Gen if you are vahkku with guhte to your left ''guđe beaivvi''

* __GenMan__ selects Gen : man adj


* __Nom_b_1__ selects Nom if you are b/beaivi with a numeral/Ord to your left and a mannu to the left of that. To your right a finite verb čuovvut

* __Nom_b_2__ selects Nom if your are b with a numeral/Ord to your left and a mannu to the left of that. To your right copulas followd by beaivi in nom-case ''juovlamánu 1. b. 1972 lei buorre beaivi''

* __Nom_b_3__ selects Nom if you are b/beaivi with Num/Ord to your left, with mannu to the left of that, with copulas even futer to the left and beaivi to the left of copulas

* __aigiAcc__ Gen if 0 TIME 1 áigi


* __GenBeaivi2__ selects Gen if you are beaivi with the end of the sentence or comma to your right. Restrictions to the left ''riegádanbeaivvi,''

* __GenBeaivi3__ selects Gen if you are beaivi with the beginning of the sentence to your right ''Bearjadaga mii vuolgit''

* __GenBeaivi4__ selects Gen if you are beaivi with a NP-boundary to your right

* __GenDate__ selects Gen if you are Sem/Date


* __GenJuohke__ selects Gen if juohke or seamma to the left ''juohke dálvvi''

* __GenJahkiNum__ selects Gen if you are jahki num with a numeral to your right ''Skuvlajagi 1998-99''

* __AigiModifier__ (modifier) selects Gen if aigi to the right ''konferánssa áiggi''

* __GenHávvi__ selects Gen for hávvi if Acc somewhere to the right 


* __GenHávvi2__ selects Gen for hávvi if a transitive verb cannot be found somewhere in the sentence

* __GenGeardi__ selects Gen if the beginning of the sentence to the left ''Eará háviid''

* __GenRbeaivi__ (modifier) selects Gen if riegádanbeaivi to your right 

* __GenGeardi2__ selects Gen for geardi if Num Gen or Ord to the left 

* __GenTimePl__ selects Gen for TIME-N + Pl if an attribute to the left ''lagamus beivviid''

* __GenDURadj1__ selects Gen if a duration adverbial to the left 

* __GenDURadj2__ removes Gen for TIME-N, if duration adjective to the left ''olles dálvvi''

* __GenDURNumPl__ duháhiid jagiid

* __GenDUR1__ removes Gen for VAHKKU-DUR if duration verb or place verb somewhere in the sentence. Restrictions. ''ádjánii beaivvi''

* __GenDURNum__ vázzen guokte maŋimuš jagi doppe

* __GenDUR2__ removes Gen for VAHKKU-DUR if the duration verb or place verb to the left is perfectum participle or infinitive with an auxiliary to the left 

* __NoTimeAcc__ removes Acc for time if POINT-IN-TIME-SPEC or Ord to the left ''vuosttas beaivvi''

* __NoTimeAccII__ removes Acc for time if POINT-IN-TIME verb to the left 

* __NoTimeAccIII__ removes Acc for time if POINT-IN-TIME verb to the left is infinitive or perfectum participle with an auxilliary or negation to the left 

* __AccBeaivi__ removes Acc for relative pronouns if followed by general beaivi ''guđe beaivvi''

* __timeADVL__ selects Gen for time: when perfectum participle or infinitive to the left are time adverbial verbs or not time object verbs, to the left of this there shall be an auxiliary ''lean čoavdán cealkagiid maŋimuš áiggi''














* __theAccusative___ selects Acc if you are a N or Pron with CC to your right, followed by Acc and a CLB or VFIN ''gápmagiid ja vuoddagiid, sii geavahedje''







* __NotGenitive__ selects Acc if you are a N or Pron with punctuation marks to your right, followed by a noun-phrase boundary




! Reflexive pronouns: acc or gen



* __NUGOr2159__ selects Gen between nugo and N ''nugo suorri dulkaoahpu''




* __AccIEScoord__ selects (Pron Refl Acc) Acc in front of "ja" to the left. To the right Loc or Ill ''elliideaset ja iežaset ealáhussii''

* __GenIES__ (modifier) selects (Pron Refl Gen) if NON-FAMILY OR ("bellodat") OR SAMEDIGGI-GEN to the right ''iežaset mánáide''


* __AccIES__ SELECTS accusative object (Pron Refl Acc)  

* __AccIES__ (modifier) removes accusative object (Pron Refl Acc) if Ill or Loc to the right, but not if a transitive verb is found to the left 


* __GenIESinf__ removes (Pron Refl Gen) if a transitive verb to the left and an Inf to the right 







!Accusative object 


* __AccActioEss__ Selects accusative: when a Strict transitive verb actio ess to the left, but not if there is an other Acc to the right followed by EOS

* __AccEss__ removes Acc when you are SAPMI-N-HEAD with an Ess to your right, but not if there is a transitive mainverb to the left ''dutkama duogážin''


*__topOBJPers__ Removes Gen if you are Acc, and to you right is a Pron followed by a transitive verb. You have to be sentence initial

*__AccVAbess__ Selects Gen if to the right is abessive 

* __topOBJ1__ Selects accusative: when a Strict transitive verb to the right (topicalized object) ''beaskka geavahedje''

* __topOBJ2__ Selects Acc when a transitive finite mainverb to the right (less strict) ''dan juohkehaš fuobmá''



* __topOBJ3__ Selects Acc. It is not depending on a transitive verb like topOBJ1 and 2, but selects Acc when Aux to the left, but only if there is no chanse of it beeing a Nom 

* __AccTV1__ Selects accusative: when a Strict transitive verb to the left (barrier exludes everything but: adv, N Ess , N Loc and Pcle). No Acc allowed to the left of the verb. No Acc allowed to the right of you, except pronouns and education (sentenceboundary and N Ess as barriers). Only numunit numerals are allowed to the left. You are not Acc if you are: time, ruote or Pron Indef. Neither if you are Pron Refl with Gen to your right followed by N Ess. Neither if you are Pron Refl with Gen to your right followed by Po. N Nom and Ger not allowed immediatly to your right. You are not Acc if you are a Nom cased Prop and the verb is some kind of verbalactivityverb and ahte or sentenceboundary is to the right. Vdic not allowed immediately to your left. If váldit is the verb, you are likely to be a Gen if Ill-body noun is found to the right. ''oste mielkki gávppis''

* __gosnevrriid__ selects Acc in the special cases where there is an Acc Pl in the beginning of the question which is not the object of the verb: Gos nevrriid...




* __PronNP__ (removes Acc): selects Gen for Pron Pers if Acc or Ill to the right, given that there is a secure object or that no transitive verb is found ''bija ruđa mu kontoi''

* __dahkatGen__ selects Gen when dahkat or bargat takes only adverb

* __r2206__ selects Gen when a finite verb to the left and Nom or Acc to the right ''lohkaba su girjji''


* __r2271__ Removes genitive when a transitive verb to the left and you (not if you are a pronoun) are followed by Ill/Loc/Com/Adv: ''doalvvui stálu meahccái''

* __AccTV2__ Selects accusative: when a transitive verb to the left. No Acc allowed to the left in the sentence (sentenceboundary as a barrier). No Acc allowed to the right (barriers are CC, comma and sentenceboundary). Note that Gen to the right followed by a noun is allowed. You shall not be: route, time, Pron Dem. You are not Acc if you are: Gen-cased Pron or Animate with Ill immediately to your right. No Acc, Com, N Nom or Gerundium allowed immediately to your right. No Gen followed by Po allowed immediately to your right. A SG3-verb is only allowed to your left (barriers excluding everything except NP-heads and adverbs, PrfPrc is also a barrier) if there is a Nom left to the SG3-verb. No vdic allowed immediately to your left. You are not Acc if: you are a Nom-cased Prop, followed by ahte or EOS and the verb found to the left (SV-boundary) is some kind of verbalactivityverb or a humanagentverb.

* __AccTV3__ Selects accusative: when transitive verb to the left, if it doesn't find a barrier: comma, Num, real-v, Ess, s-boundary. Acc not allowed to the left of the verb. Not Acc if animate or Gen in front of Ill. Numerals the only Acc allowed to the right. Not Num, time route or adv. Not Com or Ger immediately to the right. Neither Po. Not Acc if sg3-verb to the left without a Nom to its left. Not Pron Dem followed by N, neither Pron Rel followed by time. No vdic immediately to your left. No Nom-cased Prop with some sort of verbal activity to its left is allowed..  


* __OLDr2466__ Selects accusative: when transitive verb to the left, but not if the TV is FAUX OR LOC-V




* __AccInf__ Selects Acc if the verb to the left is TV + Inf (you are the obj of the Inf). Differs from the other rules by not beeing restricted by an Acc to the right ''hállat eatnigiela''

* __AccCOP__ Selects Acc if copulas to the left and nominative to the left of COP ''gápmagat leat áhči''

!Gen modifiers inside NP 


* __GenNP1__ Selects Gen for Pron Pers (modifier): if NP-BOUNDARY OR Acc (but not if the finite verb is TV) to the left and N to right 

* __GenNP2__ Selects Gen for N (modifier): if CC "ja" immediately to your left and accusative to your right ''ja sámi jurddašanvuogi''

* __GenNP3__ Selects Gen (modifier): if first one to right is Nom or Loc ''Norgga oaivegávpogis''

* __GenNP4__ (modifier) selects Gen -1 BOS or COMMA, 1 Nom ''nissoniid bargu''

* __GenNPCo__ (modifier) Selects Pron Pers Gen if Nom to the left of ja ''Mun ja mu ustibat''

* __GenRefl__ (modifier) selects Gen in front of a noun in accusative or nominative case ''iežaset oiviliid''



* __AccAfterCC__ Select accusative: if genitiv to the left, and CC "ja" to the left of genitive ''eamiálbmot- ja globaliserenprošeavtta koordináhtor''




!Accusative in coordination



* __CoAcc1__ Selects Acc when NP inbetween commas ''guolleoivviid, dáraid, debbuid, buđeittaid, boares rásiid''


* __CoAcc2__ Select Acc if coordinator to your left and accusative to the left of the coordinator ''deaja dahje sávtta''


* __CoAcc3__ Selects Acc in front of ''ja'' if there is a secure Acc to the right ''semináraid ja diehtojuohkinčoahkimiid''


* __CoAccJA__ Selects Acc when "ja" to the left and comma to the left of "ja" with a secure Acc to the left of comma ''sámegiela, ja heajos dárogiela.''

* __CoAccJA2__ Selects Acc in front of Gen + Po if ja in front of Acc ''ja ruhtan sávzzaid ovddas''









!Intransitive verbs can sometimes be transitive

* __IVasTV__ Selects Acc if you are GEOGRAPHICAL-PLACE, ABSTR-ROUTE or EDUCATION and somewhere in the sentence is a intransitive verb acting as a transitive verb ''sii vázzet skuvlla''




* __IVisTrans__ Selects Acc if you are ''spábba'' and somewhere is ''viehkat'' 

* __IVisTrans2__ Selects Acc if you are SHOE or HUNT-ANIMAL or BOAZU and somewhere is ''vázzit''

* __IVceavzit__ Selects Acc for ceavzit IV if you are ''eksámen'' and ceavzit is found somewhere in the clause 


* __IVnohkkat__ Selects Acc if you are BEDCLOTHES  

* __IVsahttit__ Selects Acc 

* __IVsahttit2__ Selects Acc 


!Accusative or genitive in front of ALU and in front of adjectives


!Exceptional accusative attributes in front of ALU nouns.

* __ALU__ Selects Acc when Num and right is MEASURE LINK 1 ALU

* __ALU2__ Selects Acc when Num and not Adv, and 1 ALU

* __ALU3__ Selects Acc for Num when right context Num ALU


* __arabpros__ Selects Nom


* __NewGen__ (complement of numerals) Selects Gen Sg when Num Sg to the left ''guhtta kilu''



* __NewGenCo__ (coordinated complement of numerals) Selects Gen if Num Acc + NewGen found to the left of "ja" ''máŋga dáhpáhusa ja digaštallama''

* __ALU4__ Selects Acc if you are Num and to your right Num Acc followed by MEASURE OR ALU/A ''guokte golbma mehtara alu'' 

* __ALU5__ Selects Gen if Num to the right, followed by Num, followed by ALU/A 


* __NumTimeMannel__ Selects Acc for Num before TIME MANNEL

* __NumPageMannel__ Selects Acc for Num before siiddu etc + MANNEL.

* __NumPageMannel2__ Selects Acc for Num before ovdalis etc


* __GenBoaris__ Selects Gen in golbma ''jagi'' boaris

** Ritva comment: Find a rule for "viđa" aswell, this hits "mehter" as it should


* __XXr2002__ Selects genitive if there is a numeral immediately to your left, and you are TIME: ''golbma jagi''



!Numerals 


* __NumGenPo__ Selects Gen for a numeral if a transitive verb to the left. To the right a Gen followed by a postposition ''vuovdán 163 000 ruvnnu ovddas''

* __NumMoney__ Selects Gen if you are a numeral and immediately to your right is CURRENCY ''vihtta ruvnnu''

* __NumGitta__ Selects Acc when you are a numeral with "gitta" immediately to your right followed by a numeral with acc-case ''180 gitta 200''


* __NumAcc1__ Selects Acc if you have a transitive verb to the left and you are a numeral followed by a noun  ''oste guokte mielkki''

* __NumJahki__ Removes Acc if you are a numeral and JAHKI-NUM is immediately to your left ''mávssii mannan jagi 43 ruvnnu''

* __NomIfNum__ Removes Acc if Gen to the right (because you are Nom). Transitive verb with an Acc to the right ''máŋga gávpeolbmá lonuhedje fáhcaid''

__NumGenMeasure__ Genitive numerals in front of ruvdnosaš with friends


* __NumAcc2__ Selects Acc for singular numerals if there is a transitive verb somewhere in the sentence and the numeral is followed by a noun ''logi báhkkoma'' OBS



* __GenIfNum__ (complement of numerals) Selects Gen Sg if there is a Num Sg to your left ''guđa geardde'' 

* __NumAccCo__ (coordinated num) Selects Acc if you are Num Sg and to your right: CC with a Num to the right ''guokte ja eanemusat golbma''

* __NumAccIV__ Selects Acc 

* __NumAge__ Selects Acc for Sg numerals if a time unit to the right is followed by boaris ''vihtta jagi boaris''


* __NumAccPlRight__ Selects Acc when transitive verb to the left. You are Num Pl and to your right is Acc ''goarui viđaid gápmagiid''

* __NumAccPlLeft__ Selects Acc when tranistive verb to the right (same as the previous. Only differs in which direction the verb is found). ''galliid sabehiid don ostet''	

* __NumAccPlLeft__ Selects Acc if you are N Acc Pl and to your left is Num Acc Pl ''galliid sabegiid''		



* __NumOkta__ Selects Acc if 0 okta followed by a noun. Transitive verb to the left ''oidnen ovtta nieidda''









* __QUANgenCoord__ Selects Gen for coordinated complement of a numeral

* __QUANgen1__ Selects Gen if a numeral with Nom-case to the left and 3Pl-verb to the right

* __QUANr2142__ Selects Gen if a numeral to the left and genitive to the right. Transitive verb not allowed to the left.




!Leftover accusatives


*__COMPInfAcc__ Selects Acc if you are Gen and to the left is an Inf TV @COMP-CS<



* __NomInf__ Selects Nom


* __AccInf2__ Selects Acc if Inf immediately to the RIGHT ''guliid čoallut''

* __AccNomCOPconstr__ Selects Acc in front of Inf; only if there is no chance for itself beeing Nom


* __AccTV4__ Selects Acc if transitive mainverb to the left. Lots of restrictions to the right



* __AccPronRel__ Selects (Pron Rel Acc) when a secure Acc or Nom to the left ''gáibidedje internáhttaskuvlla man''

* __AccPronRel2__ Selects (Pron Rel Acc) when somewhere in the sentence is a Nom (barrier is sv-boundary), but only if leat isn't the main verb. ''geaid eamiálbmogat'' 

* __AccPronRel3__ Selects Acc if there is a (Pron Rel Nom) to the right. Obs: not hit nominatives, hence negations. ''eanu mii šealgá''	

* __AccActioLoc__ Selects Acc when transitive Actio Loc somewhere in the sentence ''guldeleames muitalusaid''


* __AccAhte__ Selects Acc when ''ahte'' is found to the right 

* __AccAux__ Selects Acc if beginning of sentence to the right and aux, not leat,  is to the left. No Acc allowed to the left ''láđđi fertejetne oastit''


* __HabGenAdvl__ Removes Acc; in a habitive adverbial construction with Gen, but only if there is no chans of 0 beeing Nom ''Dat lea áhči''

* __AccIll__ Selects Acc if a strict transitive verb is found to the left and Ill to your right. You are not allowed to be a possible modifier of ill: Pron, Px. ''buktán heasttaid meahccái''




* __Gerundium0__ Selects Acc as the complement of Ger

* __Gerundium1__ Removes Gen if no other object available for the preceding tv-verb


* __Gerundium2__ Selects Acc in front of Ger, but not if it is not HAB-ACTOR/Pron Pers. No transitive verb allowed to the left, exept it it has an object of its own.

* __GerundiumTEST__ Selects Acc 
* __GerundiumTEST__ selects Gen for HAB-ACTOR and Pron Pers in front of Ger, but only if there is an Acc belonging to a transitive to the left








* __NomIfProp__ Removes Acc and Gen when you Prop because you are Nom. To the left is a sg3-verb. Should not hit Prop that are Sem/Plc.

* __NomIfProp2__ Removes Acc and Nom when you are Prop Sem/Plc because you are Gen. To the left is a sg3-verb. To the right is a noun.

* __NomSentFin__ Selects Nom if you are Acc or Gen and EOS is to yoru right. Copulas is found to the left 

* __jr_sr__ Selects (ABBR Nom) if you are ''jr'' or ''sr'' and first one to your left is (Sem/Sur Nom)

!!Accusative before @COMP-CS<
!!Accusative before some A
!!Accusative sentence-finally

!!Genitive

* __r2143__ The most frequent genitive rule: Gen when postpos immediately to the right:




!!Nominative and accusative




* __NAr2266__ Selects Nom

*__NomIFInitialThenSg3__ Selects Nom if -1 BOS and 1 oblique / Sg3 lookalike. Works in fragments.


* __NAAccEllipsis1__ Selects Acc	

* __NAAccEllipsis2__ Selects Acc












* __r2281__ marginal



* __NAr2288__ Removes Nom




!!Nominative




!Miscellaneous rules
* __NDnom__ Selects Nom



* __NDr2300__ Selects Nom if Gen immediately to the left. You are N-SG-NOM and to your right is SG3-V ''Du ášši lea dehálaš''

* __NDr2302__ Selects Nom if immediately to the left is "ruvdno" and to the left of it is Num ''70 ruvnno mehtar''

* __NDr2304__ Selects Nom for (Num Sg Loc) if to the left is a spesific word and to the right is EOC 	

* __NDr2305__ Selects Nom for (Coll Nom) if to the left is (Pers Pl Nom) ''mii golmmas''


* __NDr2306__ Selects Nom for (N Nom) if to the left is "okta" or "nubbi" ''okta lihtter''



* __NDr2308__ Selects Nom for PROP



!Vocatives, subjects of sentence fragments
* __NDr2309__ Selects Nom

* __NDr2310__ Selects Nom	

* __NDr2311__ Selects Nom

* __NDr2312__ Selects Nom

* __NDr2313__ Selects Nom

* __NDr2314__ Selects Nom

* __NDr2315__ Selects Nom


!Nominative in titles and sentence fragments

* __NDr2317__ Selects Nom: A single word is nominative


* __NDr2318__ Selects Nom: A single word with a numeral in front of it is nominative

* __NDr2319__ Selects Nom: An NP head with a genitive modifier is nominative 

* __NDr2320__ Selects Nom: A title is nominative if it has a Nom reading at all

* __NDr2321__ Selects Nom: An NP head with an Attr modifier is nominative



* __onlyProp__ Selects Nom


* __nomAuthor__



!Nominative after "go", "dego", "dugo" and "nugo"

* __NDr2324__ Selects Nom

* __NDr2325__ Selects Nom

* __NDr2326__ Selects Nom

* __NDr2327__ Selects Nom


* __NumNomgo__ Selects (Num Nom)

* __NumAccgo__ Selects (Num Acc)



!Preverbal subjects

* __NDr2331__ Selects (N Nom)

* __NDr2332__ Selects (Num Nom)

* __NDr2333__ Selects (Num Nom)	

* __NDr2334__ Selects Nom

* __NomEss__ Selects Nom when not copula

* __NDr2335__ Selects Nom

* __NDr2336__ selects (N Sg Nom) when 1 SG3-V

* __NDr2337__ Selects (N Sg Nom)	

* __NDr2338__ Selects (N Sg Nom)	

* __NDr2339__ Selects (N Sg Nom)	



* __NDr2341__ Selects Nom

* __NDr2341__ Selects Nom

* __NDr2343__ Selects (Sg Nom)

* __NDr2345__ Selects Nom




* __NDr2350__ Selects Nom

* __NDr2351__ Selects Nom

* __NDr2353__ Selects Adv

* __NDr2354__ Selects Adv - Outcommented: This rule does not function well

* __NDr2355__ Selects Adv

* __NDr2357__ Selects (A Pl Nom)

* __NDr2358__ Selects (A Pl Nom)

* __NDr2359__ Selects (A Pl Nom)




!Postverbal subjects

* __NDr2360__ Selects Nom

* __NDr2361__ Selects Nom


* __NDr2364__ Selects (Sg Nom)

* __NDr2366__ Selects Nom

* __NDr2367__ Selects Nom

* __NDr2368__ Selects (N Pl Nom)



* __NDr2369__ Selects (Pl3 Nom)

* __NDr2370__ Selects (Num Nom)

* __NDr2372__ Selects (Pron Pl Nom)

* __NDr2373__ Selects Nom

* __NDr2375__ Selects Nom

* __NDr2376__ Selects Nom

* __PostVNom__ Selects Nom if a singular third person verb to the left with no Nom to the left of it

* __PostVNomComp__ Selects (N Sg Nom)




!Nominative predicatives


* __NDr2378__ Selects (Sg Nom)

* __ND__ selects Nom if; you are HUMAN and immediately to your right is a place. Leat is to the left, and there is HUMAN or Pers to the left of leat ''Son lei oahpaheaddji Kárášjogas''

* __NDr2379__ Selects (Sg Nom)

* __NDr2380__ Selects (Pl Nom)

* __NDr2381__ Selects (Pl Nom)	

* __NDr2382__ Selects (Pl Nom)

* __NDr2383__ Selects Nom

* __NDr2384__ Selects Nom

* __NDr2385__ Selects Nom

* __NDr2386__ Selects Nom

* __CollNom__ Selects Nom

* __CollGen__ Selects Nom


!Nominative as objects in existential clauses

* __NDSgr2388__ Selects Nom

* __NDPlr2388__ Selects Nom

* __NDr2389__ Selects Nom

* __NDr2390__ Selects Nom

* __NDr2391__ Selects Nom 

* __NDr2392__ Selects Nom



* __NDr2396__ Selects (Pl Nom)

* __NDr2391__ Selects Nom

!Nominative in coordination and apposition


* __NDr2399__ Selects Nom  


* __NDr2400__ Selects Nom

* __NDr2401__ Selects Nom

* __NDr2402__ Selects Nom

* __NDr2403__ Selects Nom

* __NDr3529__ Selects Nom	




* __NDr2406__ Selects Nom

* __NDr2407__ Selects Nom

* __NDr2408__ Selects Nom

* __NDr2409__ Selects Nom

* __NDr2411__ Selects Nom

* __NDr2412__ Selects Nom

* __NDr2413__ Selects Nom

* __NDr2414__ Selects Nom

* __NomCCNom__ Selects Nom

* __NDr2416__ Selects Nom

* __NDr2417__ Selects Nom

* __NDr2418__ Selects Nom

* __NDr2420__ Selects Nom

* __NDr2421__ Selects 

!Nominative in parallell constructions

* __NDr2422__ Selects Nom

* __NDr2423__ selects Nom if it finds a Nom to the left of CC and to the left of a verb. No verb allowed to the right ''eamit barggai vuođđoskuvllas ja isit fas gymnásas''

* __nomHnoun__ Selects Nom

* __SOV__ Selects Nom in front of an Acc	


!Not nominative
* __NDr2424__ Removes Nom

* __NDr2425__ Removes Nom

* __NDr2426__ Removes Nom, but not Actio 

* __NDr2427__ Removes Nom

* __ND__ Removes Nom	



!!Comitative rules

!NP internal disambiguation of Com

* __PlSg-W__ removes Pl when SG-WORD


* __LocPlur__ removes Sg when PLURALIZER or OASSI OR HEADOFPARTS

* __Locgoabbat__ selects Pl Loc after goabbat Foc/ge

* __NumCom__ selects Num Com: guvttiin nieiddain if not plural-noun like: guvttiin heajain

* __ComDemNum1__ selects N Com if there is a Dem or Num or buorre + Com to the left: Exception for plural-nouns  

* __Comburiin__ selects N Com if there is a safe N Com to the right: buriin vugiin  


* __ComCOM-A__ selects Sg Com after COM-A


* __Comduhtavas__ selects Sg Com after duhtavaš

* __ComComAdv1__ selects Com after COM-ADV or juohke







* __vuoitit__ select Com Sem/Time





!Disambiguation based upon verb valency


* __LocLocVL1, LocLocVR__ select Pl Loc if there is a LOC-V


* __LLocAccLocVL__ select Pl Loc if there is a ACC-LOC-V

* __Loc-v__ select Sg Loc if LOC-V to the left in the clause. No mainverb to the right in the clause

!Disambiguation of Com depending on Adv or certain verb or N

* __ComComAdv1__ selects Com for ACTOR OR ACTOR-ROLE after og before COM-ADV 

* __Comboahtit__ selects riika Com when boahtit: boahtit riikkainis, which is a special construction

* __Comjohtit__ selects bihttá and čájálmas and čájáhus Com 


* __Combealli__ selects riika Com when boahtit: boahtit riikkainis, which is a special construction


* __ComComplPl-N__ selects Sg Com for HUMAN, ORGANIZATION, INSTITUTION, STATE, EVENT-TOOL-ACTIVITY, láhka when there is a COM-COMPL-N to the left or right

* __Comoktavuohta__ selects Sg Com when oktavuohta is to the left or right

* __ComDU-NR__ selects Sg Com after Pers dualis: moai áhčiin, munno vieljain


* __ComHumanOrg__ selects HUMAN Sg Com after HUMAN, ORGANIZATION, INSTITUTION

!Animate nouns
* __ComAnimate__ selecst Sg Com if there is an animate to the left, and the noun itself is not a ABSTR-TEXT,  TEXT,  PLACE,  INDUSTRY,  EDUCATION,  INSTITUTION,  ANIMATE

* __ComProp__ selecst Prop Sg Com for person names. Exception for habitive constructions.



!HAB-ACTOR in habitive-constructions

* __LocHab1, LocHab2__ select Pl when HAB-ACTOR


* __LocHab1, LocHab2__ select Pl when HAB-ACTOR

* __LocGenerell__ select Pl 

váldit vára + Loc

dahkat earrodearvvuođat geainna nu

eallit mainna nu

!Disambiguation based upon verb valency 

!COM-V 
* __ComVR, ComVL__ select Com when COM-V



* __ComVOktiiL__ select Com when OKTII-V 

* __ComVOktiiR__ select Com when OKTII-V 

!tools (concrete and abstract)

* __ComTool1, ComTool2, ComToolCoord__ select Com TOOL when ACTIVITY-V, MOVEMENT-V, PLACE-V-V 



* __ComHuman__ selects Com ABSTR-TOOL OR SATNI when HUMAN-AGENT-V - does it function? 

!BODY as an instrument

* __ComBodyVerbalV__ selects Com BODY when VERBAL-ACTIVITY-V 

* __ComHumanVerbalV__ selects Com HUMAN when VERBAL-ACTIVITY-V or báhcit

* Abstract-entity-com-verbs

* __ComAbstract__ selects Com if ABSTR-ENTITY-COM-V somwhere

* __ComOnlyPlaceV__ is Only-place-loc-verb 





!Dynamic-verbs

* __LocdynamicVR, LocdynamicVL__ select Pl Loc if there is a DYNAMIC-V and the noun itself is not a TOOL, ABSTR-TOOL, WRITING-TOOL, CONCEPT, HUMAN, VEHICLE, buorre, Der/NomAc






!Event-tool-actio
Most actio can be both tool and event. 


!PLACE-V

* __LocFurniture__ select Pl Loc FURNITURE if there is a PLACE-V

* __ComPlaceV__ select Com ANIMATE, CONCEPT, TOOL, ABSTR-TOOL, EVENT-TOOL-ACTIVITY if there is a PLACE-V

* __HumPxComPlaceV__  

* __HumPxComPlaceV__  


* __LocInstitution__ select Loc INSTITUTION if there is a ABSTR-PLACE-V

* __LocPlaceIndustry__ select Loc GEOGRAPHICAL-PLACE if there is a INDUSTRY to the right

* __LocSourceVR__ select (Pl Loc)  


* __LocHumanAgVL__ XXX This one was commented out (cf. 0 .. LINK ... BARRIER). Note that this rule did not affect the test result

* __LocHuman-agentV__ XXX This one was commented out (cf. 0 .. LINK ... BARRIER). Note that this rule did not affect the test result

!STATE-V (eallit)















!Movement-verbs







!The super-set Dynamic-verb according to choose (Pl Loc) or (Sg Com)

The idea is that the superset DYNAMIC-V are not connected to TOOL, ABSTR-TOOL or CONCEPT in (Pl Loc). This is the "minste felles multiplum". The sub-sets are different, f.i. many of them (but not all) are not connected to HUMAN in (Pl Loc), one is not connected to ABSTR-ENTITY and ACTOR in (Pl Loc). We work with negation so the rules don´t destroy analysis because of insufficent sets. 

First the general-rules for selecting (Sg Com), then the more special rules for selecting (Sg Com), and then we selct (Pl Loc) for the rest of them under # Another round of locative rules.


* __ComDynV__ Dynamic-verbs selects Com when TOOL, ABSTR-TOOL, WRITING-TOOL, CONCEPT, EVENT-TOOL-ACTIVITY


* Dynamic-verb selects Com when HUMAN, but not for HUMAN-SOURCE-VEHICLE-V 


* __ComBody__ Body-activity-verb Selects Com when BODY, for BODY-ACTIVITY-V or VERBAL-ACTIVITY-V

* __ComVeh__ Selects (Sg Com) if you are VEHICLE, default is Sg Com




!HUMAN-LOC-V 
* __LOCsatni__ Selects (Pl Loc)

* __LOCwordparts__ Selects (Pl Loc)






* bivvat - we don't need this any more

* ealihit

* ipmirdit / áddet

* ruhtadit

* ávvudit


* suokkardit and čielggadit


* vástidit 

* Coordination






* __AccTV1NoC__ was Eckhard's late version of AccTV1 without C. We will look at this.

* __AccEOS__ is The Dangerous Rule: it is one of the last rules before removing all leftover Acc. It only selects Acc if Nom is not an option, dont change this btw, and the end of the sentence is the next one to the right

* __AccEllipse__ 


* __genRel__ removes genitive if Rel OR @CVPg to your right ''ožžot olbmot skoviid maid''

* __genAcc__ selects Acc 

* __TopObj__ selects Acc for Finnish-style topicalisation


* __genNom__ removes Acc

* __makkárAcc__ selects Acc after makkár, if not time or route


* __DemAcc__ selects Den Acc after the last acc-disambiguation of nouns


* __KillAcc__ Removes Acc if you are Gen 







!Locative and comitative - Disambiguation based upon coordination




!And then we remove the remaining Sg Com analysis








!!Essive   OBS










!!Late case rules (after other case rules have worked). 


!!!VERBS PART 2, Section #22





!!Finite or not

!Finite





!Not Finite









!Indicative Negative



!Infinitive

* __InfComplToN__ Inf when -1 N




































!!Indicative or imperative

!!Verbs according to person and number

!Sg1 - First person singular


* __InitialLeanRule__ selects lean when no VFIN to the left

* __Sg1WhenAloneVfin__ selects Sg1 when no other VFIN or PrfPrc





!Sg2 - Second person singular



* --r2907__Sg2__ Prt Sg2 if ikte etc.













!Sg3 - Third person singular
Infinitive and clausal subject

Rules that look backwards for a subject across a relative clause:

Rules that look backwards for a subject across a subordinate clause (CP boundary):

Extension possibilities: Coordination

Son oaidná du ja mu ovdal go boahtit... 

Coordinated Sg3 verbs

Not V + Sg3 

!Du1 - First person dual 


* __MunJaDonDu__ selects Du1 if Mon V ja don V de V-Du2

* __DonJaMunDu__ selects Du1 if Don V ja mun V de V-Du2

The previous two rules look marginal.	

* __DuNotPrtIfToday__ selects Du1 over Prt in the context of a present-marker.

* __Du1IfDu1__ selects Du1 with a left context Du1 ... ja ... 


* __NoDu1__ removes Du1 if no MOAI or Du1 around.


!Du2 - Second person dual

!Rules for leahppi = ("leahppi" N Sg Nom)

!Du3 - Third person dual

!Pl1 - First person plural

!Pl2 - Second person plural

!Pl3 - Third person plural


* __Pl3IfPlSubj__ Pl3 if Pl noun to the left

* __Pl3IfPlSubj__ Pl3 if safe plural (incl pron) to the left



* __Sg2LeftDon__ selects Sg2 in Rel phrase if don to the left of it


* __groupPl3__ selects Prs Pl3





* __allSg2leat__ removes Sg2 if leat Prs Pl3


* __allPrsPl3__ selects and removes PrsPl3 if PrtSg2 initially


* __allPrtSg2__ removes PrtSg2 if PrsPl3


!!Rules for a special infinitive construction
!!More finite verbs
!!Passive
!!Infinitive

!!Present Participle
!!Actio/Perfect Participle 


















!!Actio
!!Selecting some more finite verbs


!!Lexical disambiguation of verbs 
















































































































































!!!NOMEN

!!Case rules


!!Other rules for nouns and pronouns

!!Determiners
!!Adverbs and adjectives

!!!NOUNS




* __derNEss__ removes DER-N if lexicalised essives 






!!Variant lemmas


* Remove lemma2 if lemma 1






* __cleanSemClass__ cleans up if a word has more semclasses. This is just a start.


!!!VERBS





!!Final removing rules

* __TEST__ selects some infinte verb readings in the cohort



!!!Removing Err/Orth








