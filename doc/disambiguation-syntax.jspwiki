








!!!DELIMITERS 



!!!TAGS AND SETS


!!Sets containing lists of tags






* Sets for parts of speech






* Sets for POS sub-categories





* Sets for Semantic tags






* Sets for Morphosyntactic properties






























* Sets for Derivation






* Sets for Syntactic tags


























* Sets for Single-word sets






!!Sets containing sets of lists and tags


* Sets for word or not





* Derivational affixes







* Case sets





* Verb sets



* Sets for finiteness and mood











* Sets for person















* Sets consisting of forms of "leat" (these ones need to be rewritten)




* Pronoun sets














* Adjectival sets and their complements









* Adverbial sets and their complements










* Sets for coordinators








* Sets for adverbs that have lookalikes















* Sets of elements with common syntactic behaviour


* Sets for verbs
** V is all readings with a V tag in them, REAL-V should
be the ones without an N tag following the V.  
The REAL-V set thus awaits a fix to the preprocess V ... N bug.



* The set COPULAS is for predicative constructions













TRANS-V is the set for verbs really taking objects

* Sets for verbs choosing oblique objects or adverbials




STRICT-TRANS-V is the set for verbs which don't leat a GenAcc be a modifyer of anything else than an object, e.g. Mun organiseren eatni gievkkanis. - eatni wants to be the object

























* Valency sets



































































* Adverb sets









* Adjective sets






















* NP sets defined according to their morphosyntactic features









* The PRE-NP-HEAD family of sets

These sets model noun phrases (NPs). The idea is to first define whatever can
occur in front of the head of the NP, and thereafter negate that with the
expression __WORD - premodifiers__.











The set __NOT-NPOD__ is used to find barriers between NPs.
Typical usage: ... (*1 N BARRIER NPT-NPMOD) ...
meaning: Scan to the first noun, ignoring anything that can be
part of the noun phrase of that noun (i.e., "scan to the next NP head")






* Other negatively defined morphosyntactic noun sets












* Noun sets

Nominal sets defined according to their morphophonological properties
Sets for lexeme homonymy (most of them are moved to where the actual rules are.)


The words in the set __N-PO__ can be both N and Po, the set takes that into account.


* The LAHKA set family





















* Nominal sets defined according to their semantical properties


* Spatial noun sets. These nouns behave like postpositions




* Time sets































* Amount sets

















* Sets for nouns with morpho-syntactic preferences

* Number-related sets






* Sets for case, possessive, etc.














* Sets for nouns as pred






































* Sets for animals













* Sets for things
























* Sets for qualities


* Sets for things, not necessarily tools



















* Sets for things such that people can be inside them:

* Sets for things such that people cannot be inside them:






* Part-whole sets for human




* Sets for places




























* Sets that can both be buildings/places and represent humans

























































* Sets denoting relations





* Miscellaneous sets



















* Border sets and their complements














* Syntactic sets




These were the set types.



!!!DISAMBIGUATION RULES  


!!!SECTION 1, THE SECTION FOR POPULAR RULES 








!!Lexicalised derivations


* __r542__ removes DER-N if lexicalised non-essives

* __r543__ removes DER-N if lexicalised essives (revise this)

* __r544__ removes DER-A if lexicalised A

* __r542__ removes DER-V if lexicalised V, but not eaddji

* __derHderAlla, derAlla, derH, derST__ chosses longest Der/tag

* __vuohtaNotAttr__ removes Attr for Der/vuohta












!!Propernouns

*Selects __Prop__ if capital letter inside clause

*Removes __PropAttr__ if no Prop on the right side

*Removes __PropPl__

* __Prop=noun__ removes some prop which are identical with noun,  which is bad e.g. Apertium. This rule can be moved to the end of this file.


*Substitute __PlcSur__ (Plc) (Sur) 

* __r863__ removed plural Prop if COMMON-N


! Removing proper nouns that are lookalikes


* __PropVfin__ selects propernouns which can be Vfin in the beginning of a sentence



* __confProp, Lea, Man, Hui, Prop__ removes Props which confuces the analyser, 




 * Rules for removing Prop



!!Other popular rules?

 * __ABBR__ Removes ABBR in favour of Adv, Pcle or Pron, e.g. "dii" when there is no punctuation

 * __Dert__ Rule for removing Der/t Prop when there are other analysis


* Removes __viibmat__ 

* Removes __dussat__ 

!!!ONE-COHORT DISAMBIGUATION - CYCLE 0

The idea behind "cycle 0" is to have safe rules without context first.
These rules typically chose lexicalisations over derivations, 
Saami words instead of marginal names, etc.

!!Lexicalised derivations

* Removes __derV__  DER-V if lexicalised.

*Removes __derN__ if lexicalised.

*Removes __derNEss__ if lexicalised, and both nouns are essive.

*Removes __derA__ or PrsPrc or VGen if lexicalised. VGen is a chance.

* Removes __derVhmm__ Does this function?

* __derHderAlla__ removes Der/h Der/alla if Der/halla.

* __derAlla__ removes Der/halla if Der/alla.

* Removes __derH__ if Der/goahti.  

* Removes __derST__ if Der/ahtti	

* __derVuohta__ removes A Attr Der/vuohta if A Der/vuohta.	


!!Adjectives or nouns, not adverbs

* __Aifeambbo__ selects A after eambbo


* __muhtunlagan__ removes lága Ess if Indef ja lágan A

!!Adverbs

* IFF __buotSuperl__ : buot Adv in front of Superl

!Lexicalised adverbs


!Adverbs, not nouns or adjectives

* __AdvNotNA__ Adverbs, not nouns or adjectives


* __birrasii__ removes birrasii N


* __eambbogo__ selects Adv eambbo go

!!Pronouns 

* __recipr, reciprPl__ select Recipr



!!Nouns



!Not noun


!!Not adposition

* The rules __Pooaivai, Pogiedas__ removes oaivái and gieđas as Po

!!Not Qst

* __AdvQst__ removes dego/nugo Qst 


!!Interj: 

* __Interjlemma__ voja voja nana nana select interj if repeated 



!!Southern Locative vs. Essive

* __SouthLoc__ removes Southern Locative vs. Essive

!!Px-rules for special nouns

* __NnoPx__ Remove Px for special nouns


* __gaskaneaset__ selects Po for gaskaneaset	

!!Some verb rules

* __vfingo__ selects VFIN in front of go Qst

* __buoritV__ removes buorit as V

* __ImprtCopPrfPrc__ removes imperative readings in front of coopulas and PrfPrc

!Particular verbs

* __leapmaDimin__ removes it

* __Der/PassS__ removes some of them which are not likely at all



* __LEX-PASS__ removes passive forms of some lemmas in favour for the lexixalised one



* __Ger and GER-NOTV__ remove Ger-forms which are not likely at all





!Particular CS

* __madeCS__ for mađe/mađi and dađe/dađi

* __dadeCS__ for mađe/mađi and dađe/dađi



!!!SECTION 2: LOCAL DISAMBIGUATION - CYCLE 1



!!FAMILY pronouns

!Pron Pers 1. p.

* __moai__ This rule is not in use because of REMOVE:Prop

* __miiPersLeft1, miiPersLeft2, _miiPersRight__ select mii Pers 



!Pron Pers 2. p.

* __donPers__ selecst don as Pers instead of Dem

!Pron Pers 3. p.

* __sonSG3V, sonRel, goson__ select son as Pers, Rel or Pcle 




* __sutnje__ ( = forms of the verb "suotnjat")

* __danin__ (Pron Ess OR Adv)

* __datPlIll__ selects dát Pron Dem Pl Ill

* __daiddaVerb__ removes dáidda N Sg Nom 


* __dasaVGen, dasaLassin dasa,datSg3, datSg3PrfPrc__ ( = forms of the verb "dassat"): 





* __DemPlLoc__ selects Dem when Dem Pl Loc and agreement, perhaps no need for it here because we have agreement-rules later. Men viktig: her blir vi kvitt duo N.

* __DemPlCom__ selects Dem when Dem Pl Com and agreement, perhaps no need for it here because we have agreement-rules later.

* __datPersCopulas__ select Pers in front of copula. I setninger som Riššat dat gal leat musge, jus eai leačča njuoskan. tolker jeg dat som Pcle. Derfor constraint hva som kommer etter.

* __datPcle1__ selects dat Pcle between N and finite, even if there is agreement between verb and dat .

* __datPcle2__ selects dat Pcle when there is no agreement between verb and dat .

* __KilldatPcle__ removes the remaining dat Pcle


* __PersAcc__ selects Pers Acc in accusativ infinitive clauses with object


* __datPers__ selects Pers. I made it stronger than it was. ref. r897 in sme-dis.rle

* __datDemSg__ selects Dem from Pron Pers Sg3 Gen

* __datPersPl3__ selects dat Pl3 in front of V Pl3 and V Du3 and Rel Pl


!!An early rule for "eanaš"/"eanas"

* __eanasPron__ selects Pron in front of Pron Loc

!!Px constraints 
First select Px, then remove all remaining Px

* Nouns: __NomPxSg1__ (not Ess) as the only word in a sentence. Needs no disambiguation.

* Nouns:  __AccPxSg1__ after a TV verb. Exception for Aux.

* Nouns:  __AccPxSg1__ after a TV Inf verb.


* __PxSg1LocAcc__ is Acc to the right.

* __PxSg1Acc__ is Acc to the right.


* coordination __PxSg1coord__ 

* __PxSg1coordLast__ for the last word of a coordination

* __ReflPxSg1__ lean oahppan alddán


* Nouns: __PxSg2__ if SG2-V. The rule needs no disambiguation. The DON-constraint because of homonymi with (N Pl)

* __PxSg2Acc__ if  TV to the right

* __PxSg2AccImprt__ if  TV Imprt to the left

* __PxSg2AccPrfPrc__ after PrfPrc 

* __PxSg2GenPo__ if in front of Po, after til verb

* __PxSg3Loc__ after habitivconstruction

* Nouns: __PxSg3Acc__ if Sg3 or Sg to the left

* Nouns: __PxSg3AccPrfPrc__ if PrfPrc and Sg3 to the left

*  __PxSg3CC__ in coordination with the owner

*  __PxSg3GenPo1__ in front of Po, to the left of the owner

*  __PxSg3GenPo2__ in front of Po, to the left of the owner

* __Genguossis__ is  selection Gen, not only with Px. The FAMILY-set would be better than Hum-tag, but there is often a propernoun connected to the noun. guossái and guossis should have Po analysis?

* __GenNPFinal__ selects Gen as the modifier of a noun in the end of a sentence.

* __PxSg3Nom__

* __PxGenPo__  

* __PxGenPr__  


We end section 2 by removing all remaining Px

* __KillPx__ removes all remaining Px readings


!!SECTION 3: Certain verb readings


* __NotVGenIfDer__ removes VGen if 0 = Der/Pass or Der...(r947)


!All imperatives

* __NotImprtIfRel__ removes Imprt after Rel, unify this with other left context (r948)


!Sg1 - early cycle, safe rules

* __VSg1IfLeftMun__ selects Sg1 when "mun" is to the left (r949)

* __VSG1IfRightMun__ selects Sg1 when "mun" is to the right (r950)


!Sg2 - early cycle, safe rules


* __VSG2IfLeftDon__ selects Sg2 when "don" is to the right (r951)

* __VSG2IfRightDon__ selects Sg2 when "don" is to the left (r952)

* __VInfIfAhte__ removes Inf if there is no other VFIN between BOS and "ahte" (r953)


!Sg3 - early cycle, safe rules

* __VSG3IfLeftSon__ selects Sg3 when "son" is to the left (r954)

* __VSG3IfRithgSon__ selects Sg3 when "son" is to the right (r954)

* __VNotSg3When12Left__ removes Sg3 if 12 Pron immediate left (r955)

* __VNotSg3IfCom__ removes Sg3 in X with Y is... (r957)



* __NegSg3BeforeFoc__ selects Neg before Foc/ge or ConNeg (r959)

Negative verb, not abbreviation or roman numeral Ii.

!Du1 - early cycle, safe rules

These Du1, Du2 rules are (almost) not in use in our corpus, but we keep them for completeness.

* __VDu1IfMoaiLeft__ selects Du1 when "moai" left (r960)

* __VDu1IfMoaiRight__ selects Du1 when "moai" right (r961)



!Du2 - early cycle, safe rules

The next two rules are not found in the corpus, but logically
they belong, to cover the whole paradigm. There is no verb-internal
homonymy here, but there is homonymy with e.g. Illative for certain verbs.

* __VDu2IFDoaiLeft__ selects Du2 if "doai" to the left (r962)	 

* __VDu2IFDoaiRight__ selects Du2 if "doai" to the right (r963)	 

!Du3 - early cycle, safe rules

The competitor to Du3 is -ba Foc.

* __VDu3IfSoaiLeft__ selects Du3 when "soai" left (r964)

* __VDu3IFSoaiLeft__ selects Du2 if "doai" to the right (r965)	 

* __VDu3IfGuokteLeft__ selects Du3 if "guokte" left (r966) - 15

* __VDu3IfGuokteRight__ removes Sg3 if "guokte" right and 0 Du3 (r967)

* __VDu3IfNjaNLeft__ selects Du3 as verb with coordinated subject to the left (r968) - 43

* __VDu3IfNjaNRight__ selects Du3 as verb with coordinated subject to the right (r969) - 12

* __VDu3IfCollLeft__ hmm, remove this?

!Pl1 - early cycle, safe rules

The competitor here is obviously Inf, but also Pl3 and Prt Sg2.

* __VPl1IfMiiLeft__ selects Pl1 if "mii" Pron to the left (r971) - 3163

* __VPl1IfMiiRight__ selects Pl1 if "mii" Pron to the right (r972) - 272

* __VPl1NotImprIfMiiLeft__ removes Imprt if if "mii" Pron to the left and 0 = "mii" (r973) - 557

!Pl2 - early cycle, safe rules

These rules are not used when disambiguating the corpus
* __VPl2IfDiiLeft__ selects Pl2 if "dii" Pron to the left (r974) - 0

* __VPl2IfDiiRight__ selects Pl2 if "dii" Pron to the right (r975) - 0


!Pl3 - early cycle, safe rules

Select...

* __r976__ SE V Pl1 if *-1 SII

* __r977__ SE V Pl1 if *1 SII

* __VPl3jaPl3__ selects Prt Pl3 in coordination (r978)


The following two may be joined:

* __VPl3IfPronRelLeft1__ selects Pl3 if -1 Rel is linked to -2 Pl (r979) - 7801

* __VPl3IfPronRelLeft2__ selects Pl3 if -1 Rel is linked via COMMA to -3 Pl (r980) - 853

* __VPl3IfCSLinkPl3Left__ selects Pl3 if -1 Rel is linked via COMMA to -3 Pl (r979) - 341


Remove...


The following two may be joined:

* __r982__ removes Prt Sg2 if Pl3 subject - 6002

* __r983__ removes Prt Sg2 if Pl3 subject via CS - 305

* __VPl3Lookalikes__ removes "verbs" like "manne" and "dušše" (r984) - 274

* __VPl3NotSg2BefPassive__ removes Sg2 for Pl3 and Inf before passive (r985)

!PrsPrc

* __r986__ selects PrsPrc if coordinated with A - 10
Early rule since many PrsPrc readings are removed later.



!!!SECTION 4: CYCLE 1B: REMOVING THE READINGS THAT WERE LEFT FROM THE 1A RULES 

We don't need more Px sections, it's done alrady

!!Noun, adjectiv, PrsPrc or not?
The rules are not documented yet.



* __NnotAcoord__ selects N instead of A, based on coordination with N, and a vfin-verb

* __NPlbeforeRel, NSgbeforeRel__ select N in front of Rel and MO


!!Adjectives and adverbs

!maid - Adv or not?
maid has many readings and as Rel it is a member of S-BOUNDARY. Therefore we need to disambiguate is early in this file. Most important is to select Adv. Because of that A ang N still can have Vfin readings, it is difficult to make very general rules.

* __maidInterj__ or not

* __maidAdv1__ selects maid Adv when there is no vfin to the right.

* __maidAdv2__ selects maid Adv copulas and PrfPrc or Actio Ess. We need this rule because of that there can be an Inf to the right which also has Vfin reading.


* __maidAdv3__ selects maid Adv even if there is a vfin to the right.

* __maidAdv4__ selects maid Adv between two verbs.

* __maidAdv5__ selects maid Adv in front of Comp which at this stage can have vfin analysis.

* __maidAdv6__ selects maid Adv between copulas Pl3 and N Pl.

* __maidAd7v__ in a special construction with geahččat

* __maidAdv8__ selects maid Adv after a Pers

* __KillmaidAdv__ removed the remaining maid Adv

__matPcle__

The following two rules are omitted. They only inflect on the disambiguation of mat pcle, a wackernagel, which is done in the rule over here, I think.






* __olluAdv__ 













!!Disambiguationg abbreviations


* __AttrABBRNum__

!!Disambiguationg particles

* __sonPcle__ selects son Pcle, the remaining Pcle are removed



!!Disambiguationg numerals


!!Disambiguationg adpositions

* __caddaN__ if čađa and movement-v

* __mannelTimeAdv__ golbma jagi maŋŋel

* __AdvSTV__ váldit mielde, oahppat bajil. eará? STRICT-TV-V is too strong

* __cadaAdv__ if oažžut juoidá čađa

Commented out som adp-rules we don't need anymore:


* __gaskanAdvVGen__  

* __geahcaiPP__ not geahččat V

* __madePo__ after Num Gen

* __NumMade__ Num before mađe

* "miehtá" is also VFIN, and miehtá needs special treatment 
** __miehtaPo__ after place or time Gen

** __miehtaPr__ before place or time Gen

** __miehtaV__  


* "ovddas" has many readings and needs special treatment 
** __ovddasPo__  

* special rules for rastá because it often is Adv, and it can be an object connected to the PP
** __rastaAdv__  čuohppat/časkit/sahet rastá

** __rastaPo, rastaPr__  fievrridit olbmo man nu rastá

** __rastaPr__  rastá ráji/rájá

* __birraPo, birraPr__ special rules for birra because it often is Adv, and it can be an object connected to the PP




* "vuostá" has many readings and needs special treatment 
** __vuostaAdv__  váldit vuostá/vuostái
** __vuostaPr__  váldit vuostá/vuostái	

* "áigi" has many readings and needs special treatment 
** __aigiAdv__  guokte vahku áigi












! LIST LG-MATERIAL = Inf Adv Nom ;

* __gaskasPosticky, gaskasPrsticky__ selects Po after coordinating language materials

* __PoParantes__ selects Po after paranteces


* __PoNomCompl__ removes Po if no possible complement to the left

* __PrGen1__ selects Pr

* __PrGen2__ selects Pr

* __PrNoCompl__ removes Pr if no complement to the right	


* __PoGen__ selects Po

!Diambiguation  Noun vs. Po or Pr:

* __vuollaiPo__ selects

* __beallaiPo__ selects

* __ovdalPr__ selects

* __gaskanPo__ selects

* __gaskkasPo__ selects

* __ovddasPo1__ selects

* __ovddasPo2__ selects

* __ovddasPo3__ 	selects

* __ovddasPocoord__ selects

* __NwhenPo__ removes N if Po

* __VwhenPo__ removes V if Po




!!Some particular subjunctions and Neg Sup

* __amasCS__ selects CS, not A or Neg Sup

* __amasA__ selects A, not CS or Neg Sup

* __amasNegSup__ selects Neg Sup, not CS or A

* __amatNegSup__ selects Neg Sup, not CS

* __dasgoCS__ selects CS, not Qst

* Removes __vaikkoAdv__ , it is always CS because of abbr: "vaikko_mii" Pron Indef

!!go as CS and Qst Pcle
First select all "go" Qst Pcle, then remove them so the rest will be "go" CS

* __standQst__ selects Pcle in standard questions

* __objQst__ selects Pcle in questions which function as object in the clause

* __subQst__ selects Pcle in questions as subordinated clause

* __vaiQst__ selects Pcle in questions with vai

* __auxQst__ selects Pcle in questions as subordinated clause, starting with AUX

* __refQst__ selects Pcle in two main clauses, the first one a question which is referred to in the second.

* __nounQst__ selects Pcle for go after NP

* __poQst__ selects Pcle for go after Po

* __AdvQst__ selects Pcle for go after WORD


* __killPcle__ removes all remaining Pcle for go 


!!!SECTION 9 WORD-SPECIFIC RULES


!!Some particular subjunctions

!!Adverb rules

!!!MAPPING OF COMP-CS< , COMPLEMENTS OF PARTICLES IN COMPARISON
First map all COMP-CS<, then remove the other readings

* __ComptimeAdvl__ buoret go ovdal

* __Compadvlcase__ eará sivas go fuorrávuođas

* __Compvejolas__ go vejolaš

* __compNomHead__ NP-HEAD-NOM (ADVL) go NP-HEAD-NOM (ADVL). VFIN-NOT-IMPRT pga manglende disamgiguering

* __CompNomHead__ Comp NP-HEAD-NOM leat go NP-HEAD-NOM  


* __compMisc__ go geassebuođut, go dán áigge

* __compInf__ Inf go Inf


* __Compdego__ dego @COMP-CS<

* __compAccdego__ Acc dego Acc

* __compTVeambbo__ TRANS-V eambbo go Num Acc + Gen


* __compCoord__ coordination	

* __compCoordAttr__ coordination again, now with Attr. Speacial rule because of that Attr also has other readings.	


* __killAllnotComp__ Removes analysis which are not @COMP-CS<

** ''This was the kill all not Comp rule!!''

* __goCSbeforeComp__ Selects CS analysis in front of @COMP-CS<

!!!MAPPING OF CC AND CS

Mostly we map both @CNP and @CVP, then we select @CNP, after that we remove them so @CVP remains

* __cnpCompSC__ Map @CNP if @COMP-CS< or COMPAR ahte

* __CSasCNPCVP__ Map some CSs both @CNP @CVP

* __CSasCVP__ Map @CVP to CS

* __CCasCNPCVP__ Map (@CNP @CVP) to CC

* __ahteCNP__ ahte CC @CNP, remove the rest

* __killAllahtenotCS__ All other occurrences of "ahte" are CSs.

* __vaiCCCNP__ vai as CC or CS

* __vaiCC__ remove vai as CC 

* __vaiCCNegQst1__ vai CC @CVP before Neg or question

* __vaiCCNegQst2__ vai CC @CNP in question about two alternatives

* __killAllvainotCSCVP__ Select all vai CS @CVP	

* __dadeCNP__ removes dađe @CNP, so @CVP remains

* __CVPnoVfin__ No potential finite verb following

* __CVPnoVfinAdvl__ No finite verb in front ADVLCASE @CNP ADVLCASE	

* __CVPNPron__ No finite verb or verbalactivity in front N/Pron @CNP N/Pron	

* __CVPAdvNom__ Nom @CNP Adv Nom	

* __CVPCopNomInf__ COPULAS Nom @CNP Nom Inf	


 *__CVPoppramsing__ Lásse, Iŋgá ja mun


*__CVPRCmpnd__ RCmpnd @CNP

* __CVPwrongCmpnd__ wrongly formated compounds

* __CVPAAttr__ A Attr @CNP A Attr	

* __CVPA__ A @CNP A 	


* __CVPAccAdv__ Acc @CNP Adv Acc	



* __killAllCNP__ removes all remaining @CNP

* __XCC-CS__ removes CC and CS with no synttag



!!!PRONOUNS

!!Interrogative and relative pronouns

* __Interr__ selects interrogative pronouns in questions


* __InterrIfPot__ selects interrogative pronouns in potential sentences, and after that we remove the remaining Interr


* __munPl3__ removes Pron Pers Pl3 if there is no verb agreement

* __Rel__ selects Rel

* __RelSg1, RelSg2__ select Rel

* __RelPl__ selects Rel

* __RelPl__ removes Rel

!!Emphatic ieš     

* __ies1Pl, ies2Pl__ select Pl for ieža



* __iesDu__ select Pl for ieža


!!Numerals

* __NifNum__ 

* __AdvOvtta__ 

* __AdvNumEss__ 


!!Indefinite pronouns
The rules are not documented yet




















!!Demonstrative pronouns

The rules are no documented yet











!!Disambiguating adjectives 

!Rules related to specific adjectives


* boaris A or N

* dološ 

* garra N vs. garas A

* nanus

* nuorra (vs. nuorrat V)


* sierra

* surgat

* veara


* vuolit



!Attribute disambiguation


















* __BMAttrPlacelašr1718__ This rule selects Plc Der/laš A Attr in front of Prop or N








































!!!MISC 
!!And now some rules for adverbs that modify adjectives
!!Proper nouns

!!!VERBS

!!Disambiguating verbs - part 1 

First ConNeg forms, they are dependent upon Neg verbs. Then Imperative 
(with their special syntax), infinitive, and other infinite forms. 
Person comes later (in part 2)




!!ConNeg forms

Number following the rule headers below refer to numbers of hit in a 13 053 859 word corpus.

* __ConNegImp__ selects ConNeg Imprt if Neg Imprt to the left. - 4265

* __ConNegIfNeg__ selects Ind ConNeg if Neg Ind to the left. This is the main (and common) ConNeg rule. - 660327

* __ConNegCondIfNeg__ selects Cond ConNeg if Neg Cond to the left. Less used, obviously. - 0

* __ConNegPrfPrc__ selects ConNeg for leat when topicalised PrfPrc between Neg and leat - 713

* __ConNegImpCC__ catches the second ConNeg in cases like don't smile or laugh - 0

* __ConNegIndCC__ catches the second ConNeg in cases like doesn't smile or laugh - 369

* __NotConNegII__ removes ConNegII if no Neg Imprt around. This is important, as the homonym forms are common. - 30850

* __NotConNegIfNotNeg__ removes ConNeg if no Neg to the left. Consider unifying with NotConNegNotNeg. - 1094269

* __NotConNegNotNeg__ removes remaining ConNegs whenever no Neg to the left. - 5862






!!Imperative

See also ''Imprt or Ind'' some sections down.


* __ImprtLeat__ says BOS Leat A is Imprt - 575

* __ImprtDál__ 


* __ImprtComma__ 

* __ImprtNotVGen__

* __NotImprtInd__ 

* __NotImprtConNeg__ 

* __NotImprtA__ 

* __NotImprtN__ 


* __NotImprtVFIN__ 


* __NotImprtSlash__ 


* __NotImprtGo__ 


!!Infinitive




* __r2974__ was moved up to select PL3-V after N Pl, might be relaxed to REMOVE Inf

* __r2976__ was moved up to select PL3-V after N Pl, might be relaxed to REMOVE Inf




* __r1813__ 

* __r1822__ selects Inf (NOTE, this was further down in sme-dis)


* __r1809__ Not Pl1 (but Inf) if VFIN to the left, This is the basic Inf rule.

* __r1812__ 


* __InfCompCs__ 

* __r1811__ 

* __r1814__ 


Rules that prevent later selection of Inf for a finite verb in the frame 						  
''INF-V...CC...''

* __r1816__ 

* __r1817__ 

* __r1818__ 

* __r1819__ 



* __r1820__ 

* __r1821__ 





* __r1823__ 

* __r1824__ 

* __r1825__ 

* __r1827__ 

* __r1828__ 




!!Verbgenitive



* __r1835__ selects VGen if VGEN-V to the left (2)





* __KillAllVGen__ removes all VGen (r1842)


!!Supinum vs. potential -- no example found in large corpus

!!Perfect Participle

* __r1844__ removes PrfPrc if 0 is the second N in an N and ... N construction

* __r1844__ removes PrfPrc if 0 is the second N in an N and Gen ... N construction (this is marginal)

* __PrfPrc_Ess__ removes N Ess if 0 PrfPrc

* __r1852__ selects PrfPrc if copula to the left

* __r1853__ selects PrfPrc if Rel to the left which again is linked to copula


!Topicalized version

the following chapter should be possible to unify.

* __r1855__ selects PrfPrc if Nom to the left linked to copula

* __r1857__ selects PrfPrc if Acc to the left linked to copula

* __r1858__ selects PrfPrc if NP head to the left linked to copula

* __r1857__ selects PrfPrc if copula to the left

* __r1861__ selects PrfPrc if VFIN to the left


* __r3576__ selects PrfPrc if Acc to the left linked to activity verb

* __r1863__ is the mannan vahkku rule


!!Actio
!!Present participle
*orrut vs. orrot) 
!!Rules for "addit" (which is an adjective, but more often a verb)
!!Actio Loc = Actio Ess
!!Actio Gen = Actio Ess
!!Imprt or Ind



* __removeAllImp__

!!Nouns or verbs
The rules are no documented yet






!!Demonstrative pronouns, agreement in DP - should it be moved to after verbmappings? 
The rules are no documented yet




!!!VERB MAPPINGS



!!Verbs as predicatives (@SPRED>) and (@<OPRED) 

!The tags (@SPRED>) and (@<OPRED) target  PrfPrc
The rules are no documented yet




!!Verbs as prenominal participles (@>N) - Er ikke ferdig med reglene som kommer her:

!(@>N) target  PrfPrc

* __NPrfPrc1__ with 1C N Nom


* __NPrfPrc2__ with -1C Dem or Num or Attr or Indef

* __NPrfPrc3__ with PrfPrc or ConNeg to the left, the N can be different cases

* __NPrfPrc4__ mannat in front of TIME

* __NPrfPrc5__ after Pr

* __NPrfPrc6__ the verb can be to the right

* __NPrfPrc7__ Der/Pass, no TIME to the right

!(@+FAUXV) and (@+FMAINV) target Neg, orrut

* __+FMAINVorrut__ finite orrut

* __FAUXVorrut__ finite orrut

* __FAUXVorrut__ infinite orrut

* __-FMAINVorrut__ infinite orrut

!(@<SUBJ)  target Inf









!(@<SPRED)  target Inf


!(@<ADVL)  target Inf, Actio Ess










!(@-F<OBJ)  target Inf 


!(@A<)  target Inf 	
* __AInf__ Inf 	


!(@N<)  target Inf, Actio Ess




!(@<ADVL)  target Inf, Actio Ess



* __ADVLActioEss__ Inf 		


!(@<OBJ)  target Inf, Actio Ess, PrfPrc 











* __OBJActioEss__ Inf 		


* __OBJPrfPrc__ Inf 			


!(@+FMAINV) and (@+FAUXV) and (@-FAUXV)

* __+FMAINVaux__ AUX-OR-MAIN verbs     

* __+FMAINVcop__ COPULAS verbs     

* __+FAUXVaux__ AUX  verbs     

* __+FAUXVboahtit__ boahtit as AUX      

* __-FAUXVaux__ AUX verbs     

* __+FMAINVcopInfconstr__ leat before Inf     



* __+FMAINVcopMannan__  leat before mannan TIME     

* __+FMAINVHabconstr__  in habitive constructions    

* __+FMAINVCoopCoord__ coordination  

* __+FAUXVleat__  

* __+FMAINVAux1__  

* __-FMAINVAux2__  

* __+FAUXVCop__  copulas coming after the mainverb

* __+FAUXVCop__  copulas coming before the mainverb

* __+FAUXVboahtit__  boahtit coming before the mainverb

* __+FMAINVCop__  copulas 	

* __+FMAINV__  to the remaining finite verbs which are not AUX    

!(@-FMAINV) and (@-FAUXV)

* __-FAUXVConNegCop__  to ConNeg COPULAS   

* __-FAUXVConNegAux__  to ConNeg AUX-OR-MAIN   

* __-FAUXVConNegAux__  to ConNeg AUX   

* __-FMAINVConNeg__  to ConNeg   

* __-FMAINVConNeg__  to ConNeg

* __-FMAINVConNegCop__  to ConNeg COPULAS   


* __-FAUXVPrfPrcAux__  to PrfPrc AUX  before Inf or Actio Ess

* __-FMAINVPrfPrc__  to PrfPrc 

* __-FMAINVPrfPrcEss__  to PrfPrc before Ess

* __-FMAINVPrfPrcleat__  to PrfPrc leat

* __-FMAINVPrfPrcafterAuxAux__  to PrfPrc after two Auxs

* __-FMAINVPrfPrccoord__  to PrfPrc coordination	

* __-FMAINVPrfbeforeAux__  to PrfPrc before the Aux	


* __-FMAINVInf__  to Inf

* __-FMAUXVActioEss__  to Actio Ess

* __-FMAINVActioEss__  to Actio Ess

* __-FMAINVSup__  to Sup

* __+FAUXV__ to  Aux

* VAbess ADVL

* VGen ADVL

* Gerundium ADVL


!And then we remove the verbs which didn't get any syntactic tag, in favour of verbs with syntactic tags.



!Substitute-rule __TV-IV__ for verbs which are both IV AUX and TV main verb: lávet and sáhttit


!!!NOUNS
!!Disambiguating nouns 
!!Nouns vs. adjectives
!!Disambiguating proper nouns 

!!!CASE DISAMBIGUATION

!!Secure rules for choosing Acc

*Gen and preposition/postposition

* Transitive verb + Acc-object

!Intransitive verbs can sometimes be transitive
The rules are no documented yet






!Accusative or genitive in front of ALU and in front of adjectives





Exceptional accusative attributes in front of ALU nouns.
Not-so-exceptional?






















!!Intransitive verbs can sometimes be transitive
!!Accusative or genitive in front of ALU and in front of adjectives
!!Accusative before @COMP-CS<
!!Accusative before some A
!!Accusative sentence-finally
!!Genitive and accusative in temporal adverbials
!!Choosing accusative or genitive semantically
!!Genitive

The most frequent genitive rule: Gen when postpos immediately to the right:



!!Nominative and accusative





*__NomIFInitialThenSg3__ selects Nom if -1 BOS and 1 oblique / Sg3 lookalike. Works in fragments.














* __r2281__ marginal








!!Nominative























































































































































!!Accusative

!!Illative

!!Comitative rules

!NP internal disambiguation of Com

* __NumCom__ selects Num Com: guvttiin nieiddain if not plural-noun like: guvttiin heajain

* __ComDemNum1__ selects N Com if there is a Dem or Num or buorre + Com to the left: Exception for plural-nouns  

* __Comburiin__ selects N Com if there is a safe N Com to the right: buriin vugiin  

!Dynamic-verbs

* __LocdynamicVR, LocdynamicVL__ select Pl Loc if there is a DYNAMIC-V and the noun itself is not a TOOL, ABSTR-TOOL, WRITING-TOOL, CONCEPT, HUMAN, VEHICLE, buorre, Der/NomAc






!Animate nouns
* __ComAnimate__ selecst Sg Com if there is an animate to the left, and the noun itself is not a ABSTR-TEXT,  TEXT,  PLACE,  INDUSTRY,  EDUCATION,  INSTITUTION,  ANIMATE


* __LocfuolaL, LocfuolaR__ selecst Pl Loc: Son atná fuola dávviriin.


* __ComProp__ selecst Prop Sg Com for person names. Exception for habitive constructions.


* __ComComplPl-N__ selecst Sg Com for HUMAN, ORGANIZATION, INSTITUTION, STATE, EVENT-TOOL-ACTIVITY when there is a COM-COMPL-N to the left



!HAB-ACTOR in habitive-constructions




!Disambiguation based upon verb valency - Har ikke ennå arbeidet med reglene som kommer her:

!COM-V 





!tools (concrete and abstract)





!BODY as an instrument




!Disambiguation based upon verb valency




!Event-tool-actio
Most actio can be both tool and event. 


!PLACE-V










!STATE-V













!Movement-verbs







!The super-set Dynamic-verb according to choose (Pl Loc) or (Sg Com)
The idea is that the superset DYNAMIC-V are not connected to TOOL, ABSTR-TOOL or CONCEPT in (Pl Loc). This is the "minste felles multiplum". The sub-sets are different, f.i. many of them (but not all) are not connected to HUMAN in (Pl Loc), one is not connected to ABSTR-ENTITY and ACTOR in (Pl Loc). We work with negation so the rules don´t destroy analysis because of insufficent sets. 
First the general-rules for selecting (Sg Com), then the more special rules for selecting (Sg Com), and then we selct (Pl Loc) for the rest of them under # Another round of locative rules.


* Dynamic-verbs


* Dynamic-verb but not HUMAN-SOURCE-VEHICLE-V


* Body-activity-verb

* FROM-HUMAN-LOC-VEH-V

* Abstract-entity-com-verbs


* Only-place-loc-verb 


!HUMAN-LOC-V 







* bivvat

* ealihit

* ipmirdit / áddet

* ruhtadit


* suokkardit and čielggadit


* vástidit 







* Coordination



!Locative and comitative - Disambiguation based upon coordination









!!Essive  
!!Late case rules (after other case rules have worked). 

!!!VERBS PART 2, SECTION #22


!!Finite or not



















































!!Indicative or imperative

!!Verbs according to person and number

!Sg1 - First person singular
!Sg2 - Second person singular
!Sg3 - Third person singular
Infinitive and clausal subject

Rules that look backwards for a subject across a relative clause:

Rules that look backwards for a subject across a subordinate clause (CP boundary):

Extension possibilities: Coordination

Son oaidná du ja mu ovdal go boahtit... 

Coordinated Sg3 verbs

Not (V Sg3)

!Du1 - First person dual 

!Du2 - Second person dual

!Rules for leahppi = ("leahppi" N Sg Nom)

!Du3 - Third person dual

!Pl1 - First person plural

!Pl2 - Second person plural

!Pl3 - Third person plural




* __allSg2leat__ removes Sg2 if leat Prs Pl3

* __allPl1__ removes Pl1 if Pl3

* __allPrtSg2__ removes PrtSg2 if PrsPl3


!!Rules for a special infinitive construction
!!More finite verbs
!!Passive
!!Infinitive
!!Present Participle
!!Actio/Perfect Participle 


















!!Actio
!!Selecting some more finite verbs
!!Lexical disambiguation of verbs 

!!!NOMEN
!!Case rules
!!Other rules for nouns and pronouns

!!Determiners
!!Adverbs and adjectives

!!!NOUNS

!!!VERBS

!!!NOMEN


!!Genitive after preposition - round 2
*MAINLY MAPPING-RULES #####









