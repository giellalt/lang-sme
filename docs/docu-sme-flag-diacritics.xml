<html xmlns:xi="http://www.w3.org/2001/XInclude" lang="en">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <title>Flags diacritics</title>
   </head>
   <body>
      <h1>Flag diacritics</h1>
      <h2>Introduction</h2>
      <p>The use of flag diacritics is documented in chapter 8 of the Xerox
         book. The present page documents the flag diacritics format, and the
         use of them in the parser.
      </p>
      <p>Flag diacritics are used in the Saami morphological parser in order
         to remove illegal compounds, and in order to handle
         automatic downcasing of proper names when they are converted to e.g.
         adjectives.
      </p>
      <h2>Flag diacritics format</h2>
      <p>There are four types of flag diacritics, all of them with the
         format @operator.feature.value@ or @operator.feature@:
      </p>
      <ul>
         <li><strong>U or Unification flags, @U.feature.value@:
               </strong><br>U is the unification operator, and the form is accepted if, for
            the relevant feature, the two flags in the derivation string have
            the same value.
         </li>
         <li><strong>P or Positive (Re)Setting, @P.feature.value@:
               </strong><br>Sets or resets the feature to the given value.
         </li>
         <li><strong>N or Negative (Re)Setting, @N.feature.value@:
               </strong><br>Sets or resets the feature to the negation of the given
            value.
         </li>
         <li><strong>R or Require Test, @R.feature.value@:
               </strong><br>For this diacritic, a test is performed, and it succeeds iff
            feature is currently set to value, otherwise the path is
            blocked.
         </li>
         <li><strong>D or Disallow Test, @D.feature.value@:
               </strong><br>A test is performed that succeds if feature is neutral or set to
            a value that is incompatible with value.
         </li>
         <li><strong>C or Clear Feature, @C.feature@:
               </strong><br>For this flag, the value of feature is reset to neutral.
         </li>
         <li><strong>U or Unification Test, @U.feature.value@:
               </strong><br>If feature is currently neutra, this diacritic causes feature to
            be set to value. Else if feature is currently set, then the test
            succeeds iff value is compatible with the current value of
            feature.
         </li>
      </ul>
      <h1>Flags diacritics for Saami compounds</h1>
      <h2>Introduction</h2>
      <p>Flag diacritics are used in the Saami morphological parser in order
         to remove illegal compounds. 
      </p>
      <h2>The problem</h2>
      <p>Without flag diacritics, compounds with derived nouns are
         errouneously blocked, or, if they are accepted,
      </p>
      <ul>
         <li><strong>Too strict::
               </strong><br>only N + N accepted, N + [V-suf]N is not
         </li>
         <li><strong>Too sloppy::
               </strong><br>also N + V accepted, not only N + [V-suf]N
         </li>
         <li><strong>Correct: :
               </strong><br>accept compound only if 2nd part is N at end of derivation
         </li>
      </ul>
      <h2>A solution</h2>
      <ol>
         <li>The Nominative and Genitive sublexica of all NounRoot entries
            are lead to the R lexicon (as earlier).
         </li>
         <li>From there, they go to NounRoot again without flag diacritics.
            They are also led to VerbRoot and AdjectiveRoot, but equipped with a
            compound flag diacritic. Then, all affixes that turn adjectives and
            verbs into nouns are equipped with a corresponding diacritic.
         </li>
         <li>Compounds with only an unsaturated diacritic are removed,
            whereas compounds with a saturated diacritic are accepted.
         </li>
      </ol>
      <h2>A sketch</h2>
      <p>Here, the P and R diacritics are used, as shown with the R lexicon
         and two lexica for deverbal nouns, that takes verbal stems as input.
         The P diacritic sets the value of cmpnd to N, and the R diacritic
         requires a test.
      </p>
      <ul>
         <li>LEXICON R
            
            <ul>
               <li># NounRoot ;</li>
               <li>#@P.cmpnd.N@   VerbRoot ;</li>
               <li>#@P.cmpnd.N@   AdjectiveRoot ;</li>
            </ul>
            
         </li>
         <li>LEXICON DeverbalNounsBOAHTI
            
            <ul>
               <li>+N+Actor:@R.cmpnd.N@  DEVNVCASE ;</li>
            </ul>
            
         </li>
         <li>LEXICON DeverbalNounsDOHPPE-
            
            <ul>
               <li>+n+N+Actio:m@R.cmpnd.N@ BOAHTIN ;</li>
               <li>+mus1+N:mus1s1@R.cmpnd.N@ MUSH ;</li>
               <li>+meahttun+A:X7#meahttum MEAHTTUN ;</li>
            </ul>
            
         </li>
      </ul>
      <h1>Flag diacritics for downcasing of derived proper nouns</h1>
      <h2>The problem</h2>
      <fixme author="Trond">This is fixed, isn't it?</fixme>
      <p>All proper nouns may be turned into adjectives of the type London
         &gt; Londoner, in Sámi, Oslo &gt; oslolaš. In Sámi, the capital letter
         of the proper name must be downcased.
      </p>
      <p>An earlier solution was to write a twol rule that exchanged all
         initial uppercase letters with an initial lowercase one if the stem
         was followed by the right kind of derivational suffix (this rule is
         still found at the end of the twol-sme.txt file, where it is commented
         out). This solution was abandoned, since the compilation time was
         simply too long
      </p>
      <h2>A solution involving flag diacritics</h2>
      <p>A possible solution is to use flag diacritics, in the same way as
         we used flag diacritics to fix compounds.
      </p>
      <p>The tags <code>@U.Cap.Obl@ @U.Cap.Opt@</code> were introduced (cf.
         the <code>sme-lext.txt </code>file), but so far, we don't have a
         working solution. The problem is documented (for Finnish) in section
         8.5.5. (of the pre-published version), and on pp. 368-372 in the
         published version of the B&amp;K book.
      </p>
      <p>Working on it (Trond): I copied the two files demo-lex.txt (the
         lexc file) and lexscript.xfst (the xfst script). I then saved the
         former as lex.fst (in lexc) and ran the latter (in xfst). The lexc
         commands were:
      </p>
      <pre xml:space="preserve">compile-source demo-lex.txt
obey-flags
source-to-result
save-result lex.fst</pre>
      <p>The sole xfst command was:</p>
      <pre xml:space="preserve">source paloscript.xfst</pre>
      <p>The resulting message from xfst is seen below:</p>
      <pre xml:space="preserve">xfst[0]: source paloscript.xfst
Opening file paloscript.xfst...
defined UC: 568 bytes. 2 states, 26 arcs, 26 paths.
5.2 Kb. 6 states, 356 arcs, Circular.
 &gt;&gt;&gt;&gt;This leaves the rule transducer on the stack
0: 5.2 Kb. 6 states, 356 arcs, Circular.
 &gt;&gt;&gt;&gt;Loading lex.fst onto the stack
Opening 'lex.fst'
Closing 'lex.fst'
 &gt;&gt;&gt;&gt;There should now be two networks on the stack
0: 1.5 Kb. 32 states, 35 arcs, 12 paths.
1: 5.2 Kb. 6 states, 356 arcs, Circular.
 &gt;&gt;&gt;&gt;Composing the rules under the lexicon
1.8 Kb. 38 states, 45 arcs, 18 paths.
flex scanner jammed</pre>
      <p>According to the Book, we should have two networks, so that is ok.
         The question is why we get the final message (<code>flex scanner
            jammed</code>), and how we shall get the demo work, and thereafter how
         we can make our own problem work.
      </p>
      <h2>Appendix: The files used</h2>
      <p>These two files were copied from the B&amp;K book. No attempt was
         done do modify them, as the first goal should be to get them to
         work.
      </p>
      <p>The lexc file demo-lex.txt</p>
      <pre xml:space="preserve">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! demo-lex.txt
!
! Simple Finnish Lexicon with Flag Diacritics
!
! Includes words like "Pariisi" (Paris) "pariisilainen"
! (Parisian), "Palo Alto", "paloaltolainen" (Palo Altan).
! The initial capital is obligatory in "Pariisi",
! optional in "pariisilainen". The internal space in
! "Palo Alto" is not present in "paloaltolainen".

Multichar_Symbols
 @U.Cap.Obl@ @U.Cap.Opt@
 +PN +Adj +Der+

LEXICON Root
 @U.Cap.Obl@ PropNoun ;
 @U.Cap.Opt@ PropNoun ;

LEXICON PropNoun
 Pariisi PNSuff ;
 Grenoble PNSuff ;
 Palo_Alto PNSuff ;

! N.B. that _ denotes the literal space
! character in this grammar

LEXICON PNSuff
 @U.Cap.Obl@ PN ;
 @U.Cap.Opt@ AdjSuff ;

LEXICON PN
+PN:0 # ;

LEXICON AdjSuff
 +Der+:0 LAINEN ;

LEXICON LAINEN
 lainen ADJ ;

LEXICON ADJ
 +Adj:0 # ;</pre>
      <p>The xfst script paloscript.xfst</p>
      <pre xml:space="preserve">clear stack
define UC A | B | C | D | E | F | G | H |
I | J | K | L | M | N | O | P | Q | R | S |
T | U | V | W | X | Y | Z ;

read regex [
# Allow optional initial downcasing after @U.Cap.Opt@
A (-&gt;) a, B (-&gt;) b, C (-&gt;) c, D (-&gt;) d, E (-&gt;) e,
F (-&gt;) f, G (-&gt;) g, H (-&gt;) h, I (-&gt;) i, J (-&gt;) j,
K (-&gt;) k, L (-&gt;) l, M (-&gt;) m, N (-&gt;) n, O (-&gt;) o,
P (-&gt;) p, Q (-&gt;) q, R (-&gt;) r, S (-&gt;) s, T (-&gt;) t,
U (-&gt;) u, V (-&gt;) v, W (-&gt;) w, X (-&gt;) x, Y (-&gt;) y,
Z (-&gt;) z
                || .#. %@U%.Cap%.Opt%@ _

.o.

# No uppercase in the middle of a downcasable word

A-&gt;a, B-&gt;b, C-&gt;c, D-&gt;d, E-&gt;e, F-&gt;f, G-&gt;g, H-&gt;h,
I-&gt;i, J-&gt;j, K-&gt;k, L-&gt;l, M-&gt;m, N-&gt;n, O-&gt;o, P-&gt;p,
Q-&gt;q, R-&gt;r, S-&gt;s, T-&gt;t, U-&gt;u, V-&gt;v, W-&gt;w, X-&gt;x,
Y-&gt;y, Z-&gt;z

|| %@U%.Cap%.Opt%@ ?+ _

.o.

# Eliminate internal spaces inside a downcasable word
# Spaces are indicated here with the literal
# underscore character
%_ -&gt; [] || .#. %@U%.Cap%.Opt%@ ?+ _
] ;

echo &gt;&gt;&gt;&gt;This leaves the rule transducer on the stack
print stack

echo &gt;&gt;&gt;&gt;Loading lex.fst onto the stack
load stack lex.fst

echo &gt;&gt;&gt;&gt;There should now be two networks on the stack
print stack

echo &gt;&gt;&gt;&gt;Composing the rules under the lexicon
compose net

echo &gt;&gt;&gt;&gt;Composition complete</pre>
      </body>
</html>