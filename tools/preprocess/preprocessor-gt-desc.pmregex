
! First go at fst-based preprocessor

! original documentation
! https://kitwiki.csc.fi/twiki/bin/view/KitWiki/HfstPmatch
! Define CapWord UppercaseAlpha Alpha* ;
! Define StreetWordFr [{avenue} | {boulevard} | {rue}] ;
! Define DeFr [ [{de} | {du} | {des} | {de la}] Whitespace ] | [{d'} | {l'}] ;
! Define StreetFr StreetWordFr (Whitespace DeFr) CapWord+ ;
! Define TOP StreetFr EndTag(FrenchStreetName) ;

! First experimental code (note path to hfst file)
Define word @bin"analyser-gt-desc.hfst";
Define TOP Ins(word) EndTag(w) ;


!Compile, usage:

! Kitwiki example:
! hfst-pmatch2fst < streets.txt > streets.hfst
! echo "Je marche seul dans l'avenue des Ternes" | hfst-pmatch -v streets.hfst 
! Je marche seul dans l'<FrenchStreetName>avenue des Ternes</FrenchStreetName>

! The code above:
! $ hfst-pmatch2fst < test.pregex > test.hfst
! $ echo "Mun ja son." | hfst-pmatch test.hfst 
!
! Expected result at present:
! <w>mun+Pron+Pers+Sg1+Nom</w> <w>ja+CC</w> <w>son+Pron+Pers+Sg3+Nom</w><w>.+CLB</w>


! Targeted result at present:
! <w>mun+Pron+Pers+Sg1+Nom</w> <w>ja+CC</w> <w>son+Pron+Pers+Sg3+Nom</w><w>.+CLB</w>

! Targeted result: To have a preprocessor which works as the present
! $GTHOME/gt/scripts/preprocess,
! and, combined with the transducer of the language in question gives output
! like the following:
!
! Mun	mun+Pron+Pers+Sg1+Nom
! 
! ja	ja+CC
! 
! son	son+Pron+Pers+Sg3+Nom
! son	son+Pcle
! 
! .	.+CLB

! Issues:
! Ambiguous input
! Ambiguous multiword expessions with ambiguous tokenisation
! Unknown words
