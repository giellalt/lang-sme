## Process this file with automake to produce Makefile.in

## Copyright (C) 2011 Samediggi

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is the default weight for all editing operations in the error model:
DEFAULT_WEIGHT=100

# Whether to use swaps - ..ab.. -> ..ba.. in one single operation.
# NB! Beware that this increases the size of the errormodel by ~ 3 * S^2, where
# S is the size of the alphabet. Ie by A LOT.
# If you want to enable swaps, consider using an edit distance of only 1, or
# better yet, dot NOT include UPPERCASE LETTERS in the error model alphabet.
#
# Possible values are 'yes' or 'no'
USE_SWAPS=yes

# Edit distanse for the Levenshtein error model:
EDIT_DISTANCE=1

# Define whether we allow changes to the initial letter(s) in the error model,
# possible values are:
# * no    - no longer string edits = only the default, letter-based error model
# * txt   - use only the txt file as source
# * regex - use only the regex file as source
# * both  - use both the txt and regex files as sources
# NB!!! Setting this to anything but 'no' will greatly increase the size and
# search space of the error model, and thus make it much, much slower. Make sure
# you TEST the resulting error model properly and thoroughly, both for speed
# and suggestion quality.
INITIAL_EDITS=no

# Variable to define whether to enable edits of longer strings (as opposed to
# single letters). Possible values are:
# * no    - no longer string edits = only the default, letter-based error model
# * txt   - use only the txt file as source
# * regex - use only the regex file as source
# * both  - use both the txt and regex files as sources
STRING_EDITS=no
# Variable to specify the edit distance for the regex
# version of the strings file. The total edit distance for those operations is
# this value multiplied with the value of the EDIT_DISTANCE variable.
STRING_REGEX_EDIT_DISTANCE=2

# Variable to define whether to enable edits of word-final strings (as opposed
# to single letters). Possible values are:
# * no    - no longer string edits = only the default, letter-based error model
# * txt   - use only the txt file as source
# * regex - use only the regex file as source
# * both  - use both the txt and regex files as sources
FINAL_STRING_EDITS=txt

# Variable to define whether to enable whole-word replacements. Possible values:
# - yes
# - no
WORD_REPLACEMENTS=no

### BEGIN: Local build rules: *.hfst: *.tmp.hfst ###

analyser.%.hfst: ../analyser-desktopspeller-gt-norm.hfst \
				 easteregg.%.hfst
	$(AM_V_HFST2FST)cat $< \
		| $(HFST_MINIMIZE_SPELLER) $(HFST_FLAGS)        \
		| $(HFST_DISJUNCT) - easteregg.$*.hfst          \
		| $(HFST_FST2FST) $(HFST_FLAGS) -f olw          \
		-o $@

se-cg.zhfst: $(srcdir)/index.xml \
					 $(GT_ERRMODELS) \
					 analyser.default.hfst
	$(AM_V_at)rm -f $@
	$(AM_V_at)$(MKDIR_P) build/$@
	$(AM_V_at)rm -f build/$@/*
	$(AM_V_at)cp $(srcdir)/index.xml build/$@/index.xml
	$(AM_V_at)cp analyser.default.hfst build/$@/$(GT_SPELLER_ACCEPTOR)
	$(AM_V_at)cp $(GT_ERRMODELS) build/$@/$(GT_ERRMODELS)
	$(AM_V_GEN)cd build/$@/ && $(ZHFST_COMPRESSION)
	$(AM_V_at)$(MKDIR_P) 3
	$(AM_V_at)cp -f $@ 3/

# edit distance=1
# typos related to computer keyboard:
# substitute, transpose, add, delete
editdist.festschrift.hfst: editdist.festschrift.regex
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) -S $(HFST_FLAGS) -i $<\
	   --format=openfst-tropical \
		-o $@

# any accented letter
accents.festschrift.hfst: accents.festschrift.regex 
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) -S $(HFST_FLAGS) -i $<\
	   --format=openfst-tropical \
		-o $@

# edits that are so specific we may allow them to occur any number of times
# (they will occur only once or twice anyway)
strings.festschrift.hfst: strings.festschrift.regex 
	$(AM_V_RGX2FST)$(HFST_REGEXP2FST) -S $(HFST_FLAGS) -i $<\
	   --format=openfst-tropical \
		-o $@

# any number of ad hoc style accented letters may be substituted
# in addition to other edits
editdist.all.festschrift.hfst: editdist.festschrift.hfst \
						   strings.festschrift.hfst \
						   accents.festschrift.hfst
	$(AM_V_XFST)printf "\
		read regex \
		[ @\"accents.festschrift.hfst\" .o. @\"strings.festschrift.hfst\" .o. @\"editdist.festschrift.hfst\"]; \
		save stack $@\n\
		quit\n" | $(XFST_TOOL)

words.festschrift.hfst: words.default.hfst
	$(AM_V_CP)cp -f $< $@

final_strings.all.festschrift.hfst: final_strings.txt.default.hfst
	$(AM_V_CP)cp -f $< $@

####### *.zhfst file: #######
# Finally build the zhfst file, and make a copy in a subdir named '3', so that
# we can test it without installing it (the '3' dir is a voikko requirement):
se-x-festschrift.zhfst: $(srcdir)/index.xml \
					 errmodel.festschrift.hfst \
					 $(GT_SPELLER_ACCEPTOR)
	$(AM_V_at)rm -f $@
	$(AM_V_at)$(MKDIR_P) build/$@
	$(AM_V_at)rm -f build/$@/*
	$(AM_V_at)cp $(srcdir)/index.xml build/$@/index.xml
	$(AM_V_at)cp $(GT_SPELLER_ACCEPTOR) build/$@/$(GT_SPELLER_ACCEPTOR)
	$(AM_V_at)cp errmodel.festschrift.hfst build/$@/$(GT_ERRMODELS)
	$(AM_V_ZIP)cd build/$@/ && $(ZIP) $(ZIPFLAGS) ../../$@ *

####### *-desktop.zhfst file: #######
# To make life easier for CI (and possibly the build flie maintainters later),
# create a *-desktop.zhfst file by hard-linking to *.zhfst:
se-x-festschrift-desktop.zhfst: se-x-festschrift.zhfst
	$(AM_V_GEN)cp -f $< $@

#### END: Local build rules: *.regex ####


# vim: set ft=automake:
