# Distributed under the terms of the GNU General Public License version 2 
# or any later version.

# ==================================================================== #
#    N O R T H E R N  S Á M I  D E P E N D E N C Y   G R A M M A R     #               
# ==================================================================== #
# ==================================================================== #



# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>" ;

SETS

LIST N = N ;
LIST V = V ;
LIST A = A ;
LIST Adv = Adv ;
LIST CC = CC ;
LIST CS = CS ;
LIST Inf = Inf ;
LIST Sup = Sup ;
LIST Neg = Neg ;
LIST Num = Num ;
LIST Po = Po ;
LIST Pr = Pr ;

LIST Pcle = Pcle ;
LIST Prop = Prop ;

LIST Pron = Pron ;
LIST IV = IV ;
LIST TV = TV ;
LIST COMMA = "," ;
LIST Ind = Ind ;
LIST Pot = Pot ;
LIST Imprt = Imprt ;
LIST ImprtII = ImprtII ;
LIST Cond = Cond ;
LIST ConNeg = ConNeg ;
LIST Interj = Interj ;
LIST Num = Num ;
LIST ABBR = ABBR ;
LIST ACR = ACR ;
LIST Prs = Prs ;
LIST Prt = Prt ;
LIST Cmpnd = Cmpnd ;
LIST PrfPrc = PrfPrc ;
LIST PrsPrc = PrsPrc ;
LIST Actor = Actor ;
LIST Actio = Actio ;
LIST Ger = Ger ;
LIST Indef = Indef ;
LIST Ill = Ill ;
LIST Com = Com ;
LIST Gen = Gen ;
LIST Ess = Ess ;

LIST IM = IM ; # For fao!!

# POS sub-categories
# ------------------

LIST Pers = Pers ;
LIST Dem = Dem ;
LIST Interr = Interr ;

LIST Indef = Indef ;

LIST Recipr = Recipr ;
LIST Refl = Refl ;
LIST Rel = Rel ;
 
LIST Interj = Interj ;
LIST Adp = Adp ;
LIST <ctjHead> = <ctjHead> ; 




# kal POS

LIST Abs = Abs ;
LIST Rel = Rel ;
LIST Trm = Trm ;
LIST Abl = Abl ;
LIST Lok = Lok ;
LIST Aeq = Aeq ;
LIST Ins = Ins ;
LIST Via = Via ;

LIST Opt = Opt ;
LIST Cau = Cau ;
LIST Con = Con ;
LIST Par = Par ;

LIST Ite = Ite  ;
LIST Vok = Vok ; # vokativ-lignende endelser på pronominer og participium

LIST 1Sg = 1Sg ;
LIST 2Sg = 2Sg ;
LIST 3Sg = 3Sg ;
LIST 4Sg = 4Sg ;
LIST 1Pl = 1Pl ;
LIST 2Pl = 2Pl ;
LIST 3Pl = 3Pl ;
LIST 4Pl = 4Pl ;

LIST 34IV = 3Sg 3Pl 4Sg 4Pl ;
LIST 34Sg = 3Sg 4Sg ;
LIST 34Pl = 3Pl 4Pl ;

LIST 1SgPoss = 1SgPoss ; #Ny tag 22.1.2008
LIST 2SgPoss = 2SgPoss ; #Ny do.
LIST 3SgPoss = 3SgPoss ; #Ny do.
LIST 4SgPoss = 4SgPoss ; #Ny do.
LIST 1PlPoss = 1PlPoss ; #Ny do.
LIST 2PlPoss = 2PlPoss ; #Ny do.
LIST 3PlPoss = 3PlPoss ; #Ny do.
LIST 4PlPoss = 4PlPoss ; #Ny do.

LIST 1SgO = 1SgO ;
LIST 2SgO = 2SgO ;
LIST 3SgO = 3SgO ;
LIST 4SgO = 4SgO ;
LIST 1PlO = 1PlO ;
LIST 2PlO = 2PlO ;
LIST 3PlO = 3PlO ;
LIST 4PlO = 4PlO ;

LIST nn = nn ;
LIST vv = vv ;
LIST nv = nv ;
LIST vn = vn ;


SET POSSESSUM3 = (N 3SgPoss) | (N 3PlPoss) | (N* 3SgPoss) | (N* 3PlPoss) | (Num 3SgPoss) | (Num 3PlPoss) ;
SET POSSESSUM4 = (N 4SgPoss) | (N 4PlPoss) | (N* 4SgPoss) | (N* 4PlPoss) ;
SET POSSESSUM12 = (N 1SgPoss) | (N 2SgPoss) | (N* 1SgPoss) | (N* 2SgPoss)| (N 1PlPoss) | (N 2PlPoss) | (N* 1PlPoss) | (N* 2PlPoss) ;

SET POSSESSUM = POSSESSUM12 OR POSSESSUM3 OR POSSESSUM4 ; 



# Other tags
# ----------

LIST BOS = (>>>) (<s>);
LIST EOS = (<<<) (</s>);

    
LIST WORD = N A Adv V Pron CS CC Po Pr Interj Pcle Num ABBR ACR  \? ;


# Verb sets
#LIST REALCOPULAS = "dáidit" "leahkit" "leat" "soaitit" "veadjit" ;

# The set COPULAS is for predicative constructions
LIST COPULAS = "dáidit" "gártat" "leahkit" "leat" "orrut" "soaitit" "šaddat" "veadjit" ;
 #  "bissut" ?
 # 'Dáidit' can appear without 'leat'.

#SET V-NOT-COP = V - COPULAS ;

LIST MOD-ASP = ("bállet" V) ("berret" V) ("dáidit" V) ("fertet" V) ("galgat" V) ("gillet" V) ("lávet"  V) ("sáhttit" V) ("seahtit" V) ("soaitit" V) ("viggat" V) ("tjoeveridh" V) ;

 # Verbs that never have arguments of their own - so we leave out "áigut", for ex.

LIST AUX-OR-MAIN = "áigut" "álgit" "beassat" "galgat" "hálidit" "háliidit" "máhttit" "nagodit" "ollit" "orrut" "sihtat" "veadjit";

 # These verbs can take arguments, so they do not belong in the AUX group, 
 # but they are nevertheless mapped to (@+FAUXV). 
 # Added "álgit" to the group (Lene) - Made rules for "boahtit" which  sometimes can be AUX
 # Magga (1982: 120): áigut, dáidit, deaivat, fertet, galgat, lávet, máhttit, oažžut, sáhttit, soaitit, veadjit - in some of the meanings 
 # Halvhjelpeverb: álgit, berret, dohkket, gártat, heivet, liigut, šaddat - in some of the meanings 
 
SET AUX = COPULAS OR Neg OR MOD-ASP OR AUX-OR-MAIN ;
 

SET V-NOT-AUX = V - AUX ;
 # The set of verbs that cannot be auxiliaries. 
			  # Does not include AUX-OR-MAIN.
#SET VFIN-NOT-AUX = VFIN - AUX ;

#SET V-MAIN = V - COPULAS - Neg - MOD-ASP OR ("orrut") ;




#SET V-IND-FIN = Prs OR Prt ;
 # Problem: "In boahtán" is an invisible indicative

SET V-MOOD = Ind OR Pot OR Imprt OR ImprtII OR Cond OR (Neg Sup) ;

#LIST GC = ("gč") ;

#SET VFIN = GC OR V-MOOD - ConNeg ;

#SET VFIN-POS = V-MOOD - ConNeg - Neg ;

#SET VFIN-NOT-IMP = VFIN - Imprt ;

#SET VFIN-NOT-NEG = VFIN - Neg ;
  # this might be to strict, besides, "iige" can be written "ii ge"

SET NOT-PRFPRC = WORD - PrfPrc ;


# Some subsets of the VFIN sets
# - - - - - - - - - - - - - - -
LIST V-SG1 = (V Ind Prs Sg1)  (V Ind Prt Sg1) (V Cond Prs Sg1) 
             (V Cond Prt Sg1) (V Pot Prs Sg1) (V Neg Ind Sg1);
 
LIST V-SG2 = (V Ind Prs Sg2)  (V Ind Prt Sg2) (V Cond Prs Sg2) 
             (V Cond Prt Sg2) (V Pot Prs Sg2) (V Neg Ind Sg2);
 
LIST V-SG3 = (V Ind Prs Sg3)  (V Ind Prt Sg3) (V Cond Prs Sg3) 
             (V Cond Prt Sg3) (V Pot Prs Sg3) (V Neg Ind Sg3);
 
LIST V-DU1 = (V Ind Prs Du1)  (V Ind Prt Du1) (V Cond Prs Du1) 
     	     (V Cond Prt Du1) (V Pot Prs Du1) (V Neg Ind Du1);
 
LIST V-DU2 = (V Ind Prs Du2)  (V Ind Prt Du2) (V Cond Prs Du2) 
	         (V Cond Prt Du2) (V Pot Prs Du2) (V Neg Ind Du2);
 
LIST V-DU3 = (V Ind Prs Du3)  (V Ind Prt Du3) (V Cond Prs Du3) 
	         (V Cond Prt Du3) (V Pot Prs Du3) (V Neg Ind Du3);
 
LIST V-PL1 = (V Ind Prs Pl1)  (V Ind Prt Pl1) (V Cond Prs Pl1) 
             (V Cond Prt Pl1) (V Pot Prs Pl1) (V Neg Ind Pl1);
 
LIST V-PL2 = (V Ind Prs Pl2)  (V Ind Prt Pl2) (V Cond Prs Pl2) 
             (V Cond Prt Pl2) (V Pot Prs Pl2) (V Neg Ind Pl2);
 
LIST V-PL3 = (V Ind Prs Pl3)  (V Ind Prt Pl3) (V Cond Prs Pl3) 
             (V Cond Prt Pl3) (V Pot Prs Pl3) (V Neg Ind Pl3);
 

 # Note that imperative verbs are not included in these sets!

SET V-SG = V-SG1 OR V-SG2 OR V-SG3 ;
SET V-DU = V-DU1 OR V-DU2 OR V-DU3 ;
SET V-PL = V-PL1 OR V-PL2 OR V-PL3 ;

SET V-DU-PL = V-DU1 OR V-DU2 OR V-DU3 OR V-PL1 OR V-PL2 OR V-PL3 ;

#SET V-NOT-SG1 = VFIN-NOT-IMP - V-SG1 ;
#SET V-NOT-SG2 = VFIN-NOT-IMP - V-SG2 ;
#SET V-NOT-SG3 = VFIN-NOT-IMP - V-SG3 ;
#SET V-NOT-DU1 = VFIN-NOT-IMP - V-DU1 ;
#SET V-NOT-DU2 = VFIN-NOT-IMP - V-DU2 ;
#SET V-NOT-DU3 = VFIN-NOT-IMP - V-DU3 ;
#SET V-NOT-PL1 = VFIN-NOT-IMP - V-PL1 ;
#SET V-NOT-PL2 = VFIN-NOT-IMP - V-PL2 ;
#SET V-NOT-PL3 = VFIN-NOT-IMP - V-PL3 ;


SET V-1-2 = V-SG1 OR V-SG2 OR V-DU1 OR V-DU2 OR V-PL1 OR V-PL2 ;
SET V-3  = V-SG3 OR V-DU3 OR V-PL3 ;
 # Note that imperative verbs are not included in these sets!

LIST MO-MANge = ("goas" Adv) ("gokko" Adv) ("gos" Adv) ("gosa" Adv) ("govt" Adv) ("guktie" Adv) ("gåktu" Adv) ("gåktus" Adv) ("gånnå" Adv) ("gåsstå" Adv) ("gåsstås" Adv) ("manen" Adv) ("makkár" Adv) ("man" Adv) ("manne" Adv) ("mo" Adv) ("mot" Adv) ("mov" Adv) ("movt" Adv) ("nugo" @CVP) (V Qst);
 
SET MO = MO-MANge - ("man" Foc/ge) ; 

LIST RELHUM = ("guhti" Rel) ("guhte" Rel) ("gii" Rel);

	
SET S-BOUNDARY2 = (Pron Interr) OR (Pron Rel) OR ("muhto" CC) OR MO OR ("\;") OR (":") OR ("-") OR ("–") OR (@CVP) ;

SET NOT-ADJ            = WORD - A ;
SET NOT-ADV            = WORD - Adv;
SET NOT-ADV-N          = WORD - Adv - N;
SET NOT-ADV-PCLE       = WORD - Adv - Pcle ;
SET NOT-ADV-INDEF      = WORD - Adv - Indef ;
SET NOT-ADV-PCLE-ILL   = WORD - Adv - Pcle - Ill ;
SET NOT-ADV-PCLE-Refl  = WORD - Adv - Pcle - Refl ;
SET NOT-ADV-PCLE-INDEF = WORD - Adv - Pcle - Indef ;
SET NOT-ADV-PCLE-NEG   = WORD - Adv - Pcle - Neg ;


# Syntactic tags and sets
# =======================

# Syntactic tag definitions 

LIST @+FAUXV = @+FAUXV ; 	         # finite auxiliary
LIST @+FMAINV = @+FMAINV ; 	         # finite main verb
LIST @-FADVL> = @-FADVL> ; 	         # object of infinite verb outside of the verbal
LIST @-F<ADVL = @-F<ADVL ; 	         # object of infinite verb outside of the verbal
LIST @-FAUXV = @-FAUXV ; 	         # infinite auxiliary verb
LIST @-FMAINV = @-FMAINV ; 	         # infinite main verb
LIST @-FOBJ = @-FOBJ ; 		         # object of infinite verb outside of the verbal
LIST @-FSUBJ = @-FSUBJ ; 	         # subject of infinite verb outside of the verbal
LIST @-FSUBJ> = @-FSUBJ> ;
LIST @<-FSUBJ = @<-FSUBJ ;
LIST @COMP-CS< = @COMP-CS< ;
LIST @CMPND = @CMPND ;
LIST @ADVL>CS = @ADVL>CS ;
LIST @>A = @>A ; 			 # modifier of adj
LIST @>ADVL = @>ADVL ; 		         # modifier of advl
LIST @ADVL< = @ADVL< ; 		         # modifier of advl
LIST @>N = @>N ; 			 # modifier of N
LIST @>CC = @>CC ; 			 # modifier of CC
LIST @>Num = @>Num ; 		         # attr of numeral
LIST @>P = @>P ; 			 # complement of P
LIST @A< = @A< ; 			 # complement of A
LIST ADVL = @<ADVL @ADVL> @ADVL @-FADVL> @-F<ADVL @APP-ADVL< ; 		         # adverbial
LIST @<ADVL = @<ADVL ;
LIST @ADVL> = @ADVL> ;
LIST @APP>Pron = @APP>Pron ;             # apposition of pron
LIST @APP-ADVL< = @APP-ADVL< ;           # apposition of advl 
LIST @APP-N< = @APP-N< ; 	         # apposition of N
LIST @APP-Num< = @APP-Num< ;             # apposition of Num
LIST @APP-Pron< = @APP-Pron< ;           # apposition of Pron
LIST @CNP = @CNP ; 			 # conjunction between NPs
LIST @CVP = @CVP ; 			 # conjunction between VPs
LIST @FS-ACC>> = @FS-ACC>> ;             # finite subclause, object of speechact verb
LIST @FS-ADVL = @FS-ADVL ; 	         # finite subclause ...
LIST @FS-N< = @FS-N< ;               	 # relative clause to N
LIST @FS-OBJ = @FS-OBJ ; 	         # finite subclause functioning as object
LIST @FS-STA = @FS-STA ; 	         # finite sentence, statement
LIST @HAB = @HAB ; 			 # habitive (aka advl of possessiv constr)
LIST @HNOUN = @HNOUN ;
LIST @IMV = @IMV ;             # infinite main verb
LIST @ICL-ADVL = @ICL-ADVL ;             # non-finite subclause ...
LIST @ICL-AUX< = @ICL-AUX< ;             # "right" argument of auxiliary (?)
LIST @ICL-OBJ = @ICL-OBJ ; 	         # non-finite subclause ...
LIST @ICL-STA = @ICL-STA ; 	         # non-finite subclause ...
LIST @N< = @N< ; 			 # modifier of N
LIST @Num< = @Num< ; 		         # modifier of Num
LIST @<OBJ = @<OBJ ; 			 # object
LIST @OBJ> = @OBJ> ; 			 # object
LIST @P< = @P< ; 			 # complement of P
LIST @PCLE = @PCLE ; 		         # particle
LIST @>Pron = @>Pron ;                   # Adverb to pron
LIST @Pron< = @Pron< ;
LIST @SUBJ = @SUBJ ; 		         # subject
LIST @<SUBJ = @<SUBJ ; 		         # subject
LIST @SUBJ> = @SUBJ> ; 		         # subject
#LIST @V = @V ; 
LIST @-FOBJ> = @-FOBJ> ;
LIST @-F<OBJ = @-F<OBJ ;
LIST @<OPRED =  @<OPRED ;
LIST @<SPRED =  @<SPRED ;
LIST @OPRED> =  @OPRED> ;
LIST @SPRED> =  @SPRED> ;
LIST @SPRED =  @SPRED ;
LIST @<PPRED = @<PPRED ;
LIST @FS-IMV = @FS-IMV ;
LIST @OBJ>SPRED = @OBJ>SPRED ;
LIST @SUBJ<ADVL = @SUBJ<ADVL ;
LIST @ADVL>SUBJ = @ADVL>SUBJ ;
LIST @ADVL<OBJ = @ADVL<OBJ ;
LIST @FS-N<IAUX = @FS-N<IAUX ;
LIST @SUBJ<OBJ = @SUBJ<OBJ ;
LIST @SPRED<OBJ = @SPRED<OBJ ;
LIST SPRED = @SPRED> @<SPRED @SPRED ;
LIST OPRED = @OPRED> @<OPRED @OPRED ;
LIST SUBJ = @<SUBJ @SUBJ> @SUBJ @-FSUBJ> @<-FSUBJ;
LIST OBJ = @<OBJ @OBJ> @OBJ @SPRED<OBJ @SUBJ<OBJ @ADVL<OBJ @-FOBJ> @-F<OBJ ;
SET @SUBOBJSPRED = @SUBJ> OR @<SUBJ OR @SUBJ OR SPRED OR @OBJ> OR @<OBJ OR OPRED OR @-F<OBJ OR @-FOBJ>  ;
LIST @VOC = @VOC ;
LIST @INTERJ = @INTERJ ;

LIST @IM = @IM ; # For fao!
LIST @<IOBJ = @<IOBJ ; # For fao!
LIST @IOBJ> = @IOBJ> ; # For fao!
LIST @rc-VAUX = @rc-VAUX ;  # For fao!


# Syntactic set definitions 
# =========================
LIST @IAUX = @IAUX ;
LIST @FS-IAUX = @FS-IAUX ;
LIST @FS-N<IMV = @FS-N<IMV ;
LIST <mv> = <mv> ;
LIST <aux> = <aux> ;
LIST @V = @FMV @IMV @FAUX @IAUX @FS-STA @FS-ADVL @FS-OBJ @FS-IMV @FS-N<IMV @FS-N< @FS-IAUX @FS-N<IAUX ;
LIST @MCLV = @FMV @IMV @FAUX @IAUX ;
LIST @SCLV = @FS-STA @FS-IMV @FS-N<IMV @FS-N< @FS-IAUX @FS-N<IAUX @FS-ADVL @FS-OBJ;
LIST @FV = @FMV @FAUX ;
LIST @AUX = @IAUX @FAUX ;
LIST @MV = @IMV @FMV ;
LIST @FMV = @FMV ;
LIST @FAUX = @FAUX ;
LIST @FMVutt = @FMVutt ;
LIST KONJ = CS CC ;

LIST @-FARG = @-FOBJ> @-FSUBJ @-F<OBJ @-FADVL> @-F<ADVL @-FADVL ;
SET @ARG = SUBJ OR OBJ OR SPRED OR OPRED OR ADVL OR @ICL-OBJ OR @<PPRED OR @ADVL>SUBJ ;
SET @-FARG/ADVL = @-FARG OR @-FADVL> OR @-F<ADVL ;
SET @ARG/ADVL = @ARG OR ADVL - (ADVL + CC) ;
SET @CLAUSE = @ARG/ADVL OR @-FARG/ADVL OR @V ;
LIST @NOARROW = ADVL SUBJ OBJ ;






#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§                             §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§                             §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§     dep grammar starts      §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§                             §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§                             §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  


SECTION


# Correction rules
# ================


# fao-rules
SUBSTITUTE:sum_id=Rel (CS) (<cs> Rel) TARGET ("sum" CS) OR ("ið" CS) ;
SETPARENT:sum_id-verb (<cs> Rel) TO (*1 @V) ;

LIST GOSTEGE = "gostege" "ge" "maidege" "mihkkege" "mige" ;
LIST AHTE = ("ahte" CS) ("at" CS) ("makkár" Pron) ;
LIST DELLIE = ("de" CC) ("dellie" CC) ;
LIST MUHTO = ("muhto" CC) ("mohte" CC) ("men" CC) ;

SUBSTITUTE:SubFmainv=V (@+FMAINV) (@FMV) TARGET V ;
SUBSTITUTE:SubNfmainv=V (@-FMAINV) (@IMV) TARGET V ;
SUBSTITUTE:SubFaux=V (@+FAUXV) (@FAUX) TARGET V ;
SUBSTITUTE:SubNfaux=V (@-FAUXV) (@IAUX) TARGET V ;

SET VFIN = @FMV OR @FMVutt OR @FAUX OR @FS-STA OR @FS-N< OR @FS-ADVL OR @FS-OBJ ; 
SET NONVFIN = V - VFIN ;


# <mv> and <aux>
# --------------
SUBSTITUTE:SubV=mv (V) (<mv> V) TARGET @MV ;
SUBSTITUTE:SubV=aux (V) (<aux> V) TARGET @AUX ;

# infinite clauses:
#SUBSTITUTE:SubV=mvICL (V) (<mv> V) TARGET NONVFIN (0 @<OBJ LINK NEGATE *1 @IMV BARRIER S-BOUNDARY2 OR V) ;
#SUBSTITUTE:SubV=auxICL (V) (<aux> V) TARGET NONVFIN (0 AUX LINK 0 @<OBJ LINK *1 @IMV BARRIER S-BOUNDARY2 OR V) ;

# the finite verb
# ------------------

SUBSTITUTE (@FAUX) (@FS-STA) TARGET V (0 Neg LINK NOT -1 BOS OR S-BOUNDARY2 LINK 2 GOSTEGE) ;
SUBSTITUTE (@FAUX) (@FS-STA) TARGET V (*-1 Neg BARRIER VFIN)(0 (Neg Foc/ge)) ;
    ## Muhtun geasi nieida jávkkai, ja olbmot ohce su, muhto eai gávdnan su eai gostege, eaige diehtán gosa lei šaddan.

# utterances - the verb get a mark so it will be handled differently from other verbs
SUBSTITUTE:utt (@FMV)(@FMVutt) TARGET (<uttv>) (-1 COMMA LINK 1 VFIN LINK *1 @<SUBJ BARRIER @V) ;
SUBSTITUTE:utt (@FMV)(@FMVutt) TARGET (<uttv>) (0 VFIN LINK -1 @SUBJ> LINK *-1 COMMA BARRIER @V) ;
	## Mii fertet maiddái geahčadit makkár lassi guoimmuhemiid galgat fállat vai bohtet vel eanet olbmot boahtte jagi, loahpaha duhtavaš beaivválaš jođiheaddji Eriksen.  

# in object-subclauses:
SUBSTITUTE:SubV=FS-OBJmv (@FMV)(@FS-OBJ) TARGET V (*-1 AHTE BARRIER @V OR @CVP OR CS OR Rel LINK NOT *-1 Com BARRIER @ARG) ;
SUBSTITUTE:SubV=FS-OBJmv (@FMV)(@FS-OBJ) TARGET V (*-1 CC OR COMMA BARRIER @V OR @CVP OR CS OR Rel OR @SUBJ> LINK NOT 0 DELLIE LINK *-1 (@FS-OBJ) BARRIER @V)(NEGATE *1 (@<SUBJ)) ;
SUBSTITUTE:SubVmain=FS-OBJaux (@FAUX) (@FS-OBJ) TARGET V (*-1 AHTE BARRIER @V OR @CVP OR CS OR Rel LINK NOT *-1 Com BARRIER @ARG) ;
SUBSTITUTE:SubVmain=FS-OBJaux (@FAUX) (@FS-OBJ) TARGET V (*-1 CC BARRIER @V OR @CVP OR CS OR Rel OR @SUBJ> LINK NOT 0 DELLIE LINK *-1 (@FS-OBJ) BARRIER VFIN) ;
SUBSTITUTE:SubV=FS-OBJmv (@FMV)(@FS-OBJ) TARGET V (*-1 Indef OR A BARRIER VFIN OR @CVP OR CS OR Rel LINK -1 ("man") LINK NOT *-1 Com BARRIER @ARG) ;
SUBSTITUTE:SubVmain=FS-OBJaux (@FAUX) (@FS-OBJ) TARGET V (**-1 Indef OR A BARRIER VFIN OR @CVP OR CS OR Rel LINK -1 ("man") LINK NOT *-1 Com BARRIER @ARG) ;



# in advl-subclauses:
SUBSTITUTE:SubV=FS-ADVLmv (@FMV)(@FS-ADVL) TARGET V (*-1 MO OR CS BARRIER @V OR Rel OR @CVP OR @COMP-CS< LINK NOT 0 AHTE) ;
SUBSTITUTE:SubV=FS-ADVLmv (@FMV)(@FS-ADVL) TARGET V (*-1 AHTE BARRIER @V OR Rel OR @CVP LINK *-1 IV BARRIER @V) ;
SUBSTITUTE:SubV=FS-ADVLmv (@FMV)(@FS-ADVL) TARGET V (*-1 CC OR COMMA LINK NOT 0 DELLIE BARRIER @V OR Rel OR @CVP LINK *-1 (@FS-ADVL) BARRIER @V OR DELLIE)(NEGATE *1 (@<SUBJ)) ;
SUBSTITUTE:SubVmain=FS-ADVLaux (@FAUX)(@FS-ADVL) TARGET V (*-1 MO OR CS BARRIER @V OR Rel OR @CVP LINK NOT 0 AHTE) ;
SUBSTITUTE:SubVmain=FS-ADVLaux (@FAUX) (@FS-ADVL) TARGET V (*-1 AHTE BARRIER @V OR Rel OR @CVP LINK *-1 IV BARRIER @V);
SUBSTITUTE:SubVmain=FS-ADVLaux (@FAUX) (@FS-ADVL) TARGET V (*-1 CC BARRIER @V OR Rel OR @CVP LINK NOT 0 DELLIE LINK *-1 (@FS-ADVL) BARRIER VFIN OR COMMA) ;


# in subclauses:
SUBSTITUTE:SubV=FS-STAmv (@FMV)(@FS-STA) TARGET V (*-1 CS BARRIER VFIN OR Rel OR DELLIE OR @COMP-CS<) ;
SUBSTITUTE:SubV=FS-STAmv (@FMV)(@FS-STA) TARGET V ((*-1 CC OR COMMA BARRIER @SUBJ> LINK NOT 0 DELLIE OR MUHTO BARRIER @V LINK *-1 (@FS-STA) OR (@FS-IMV) BARRIER @V))(NEGATE *1 (@<SUBJ)) ;
SUBSTITUTE:SubV=FS-IMVcs (@IMV) (@FS-IMV) TARGET V (*-1 (<aux>) BARRIER @MV LINK NOT 0 (@FAUX) LINK *-1 CS BARRIER @MCLV) ;
SUBSTITUTE:SubV=FS-IMVmo (@IMV) (@FS-IMV) TARGET V (*-1 (<aux>) BARRIER @MV LINK *-1 MO OR ("makkár" Pron) BARRIER @MV LINK NEGATE *1 ("?")) ;
SUBSTITUTE:SubVmain=FS-STAaux (@FAUX) (@FS-STA) TARGET V (*-1 CS BARRIER VFIN OR Rel) ;
SUBSTITUTE:SubVmain=FS-STAaux (@FAUX) (@FS-STA) TARGET V (*-1 CC BARRIER @V OR Rel LINK NOT 0 DELLIE LINK *-1 (@FS-STA) OR (@FS-IMV) BARRIER VFIN) ;
SUBSTITUTE:SubV=FS-IAUXcs (@IAUX) (@FS-IAUX) TARGET V (*-1 (<aux>) BARRIER @MV LINK *-1 CS BARRIER @MV) ;
SUBSTITUTE:SubV=FS-IAUXmo (@IAUX) (@FS-IAUX) TARGET V (*-1 (<aux>) BARRIER @MV LINK *-1 MO BARRIER VFIN LINK NEGATE *1 ("?")) ;
SUBSTITUTE:SubV=FS-IMVcs (@IAUX) (@FS-IAUX) TARGET V (*-1 (<aux>) BARRIER @MV LINK 0 (@FS-STA)) ;
SUBSTITUTE:SubV=FS-IMVcs (@IMV) (@FS-IMV) TARGET V (*-1 (<aux>) BARRIER @MV LINK 0 (@FS-IAUX) OR (@FS-STA)) ;


# in relative clauses:
SUBSTITUTE:SubV=FS-Nmv (@FMV) (@FS-N<) TARGET V (*-1 Rel BARRIER VFIN) ;
#SUBSTITUTE:SubV=FS-Nmv (@rc-VAUX) (@FS-N<) TARGET V (*-1 ("sum" CS @CVP)  BARRIER VFIN) ; # For fao!
SUBSTITUTE:SubV=FSN-IMV (@IMV) (@FS-N<IMV) TARGET V (*-1 (<aux>) BARRIER @MV LINK *-1 Rel BARRIER COMMA OR CS OR @V) ;
SUBSTITUTE:SubV=FSN-IMV (@IMV) (@FS-N<IMV) TARGET V (0 PrfPrc LINK *-1 Rel BARRIER @MV OR COMMA OR CS OR @V) ;
SUBSTITUTE:SubVmain=FS-Naux (@FAUX) (@FS-N<) TARGET V (*-1 Rel BARRIER VFIN) ;
SUBSTITUTE:SubV=FSN-IAUX (@IAUX) (@FS-N<IAUX) TARGET V (*-1 (<aux>) BARRIER @MV LINK *-1 Rel BARRIER @MV) ;

SUBSTITUTE:SubV=FS-ADVLmv (@FMV)(@FS-N<) TARGET V (-1 CC LINK -1 @FS-N<)(NEGATE *1 (@<SUBJ) BARRIER @V) ;

#SUBSTITUTE:SubV=FS-ADVLmv (@FMV)(@FS-N<) TARGET V (*-1 CC OR COMMA LINK NOT 0 DELLIE BARRIER @V OR CS OR @CVP LINK *-1 VFIN BARRIER @V OR DELLIE)(NEGATE *1 (@<SUBJ) BARRIER @V) ;

#SUBSTITUTE (@FAUX) (@FS-STA) TARGET (V Neg) (*-1 @SCLV BARRIER CC OR @V OR @SUBJ> LINK *-1 CS BARRIER @V) ;

SUBSTITUTE:SubV=FS-STAmv (@FMV)(@FS-STA) TARGET V ((*-1 CS BARRIER @V LINK *-1 @V) OR (*-1 MO BARRIER @V LINK NEGATE *1 ("?") LINK *-1 @V)) ;
SUBSTITUTE:SubV=FS-STAmv (@FMV)(@FS-STA) TARGET V (*-1 CC OR COMMA BARRIER @SUBJ> OR @V LINK *-1 VFIN BARRIER @V OR Rel OR COMMA LINK *-1 (Rel @SUBJ>) LINK *-1 @MV) ;

# infinite clauses:
SUBSTITUTE:SubV=iclaux (@<OBJ) (@ICL-OBJ) TARGET NONVFIN (*-1 @-FSUBJ> BARRIER @V) ;


# Mapping rules
# =============


SECTION

### fao
SETPARENT:faoIM @IM TO (*1 Inf) ; 		   # For fao!
SETPARENT:faoLIOBJ @<IOBJ TO (*-1 <mv>) ;  # For fao!
SETPARENT:faoRIOBJ @IOBJ> TO (*1 <mv>) ;   # For fao!

#SETPARENT:faoRCVAUX @rc-VAUX TO (*-1 ("sum" CS @VCP) LINK *-1 N OR Pron); # For fao!
#SETPARENT:faoRCVAUX @FS-STA TO (*-1 ("ið" CS @VCP) LINK *-1 N OR Pron); # For fao!


### kal

SUBSTITUTE (@PRED) (@FMV);
SETPARENT (@POSS>) TO (1 POSSESSUM);
SETPARENT (@SUBJ>) TO (*1 (@PRED));




### cmpnd

SETPARENT:cmpnd @CMPND TO (1 CC LINK 1 WORD) ;

### habitive
SETPARENT:SetHab @HAB TO (*1 @FMV LINK 0 V-3);
SETPARENT:SetHab @HAB TO (0* V-3 BARRIER S-BOUNDARY2 OR V);
SETPARENT:SetHab @HAB TO (*-1 Neg BARRIER S-BOUNDARY2 OR V);


### postposition / preposition

SETPARENT:ComplToPo @>P TO (*1 Po OR Pr);
SETPARENT:ComplToPr @P< TO (*-1 Pr);

### np

SETPARENT:SetModToN @>N TO (*1 N) ;
SETPARENT:SetCompToN @N< TO (*-1 @SUBOBJSPRED) ;
SETPARENT:SetReflToN (Refl Nom @N<) TO (*-1 N) ;
SETPARENT:SetAppToRightPron @APP>Pron TO (*1 COMMA LINK 1 Pron BARRIER @CLAUSE) ;
SETPARENT:SetAppToLeftPron @APP-Pron< TO (*-1 COMMA LINK -1 Pron BARRIER @CLAUSE) ;
SETPARENT:CoordSetModToN @>N TO (1 CC LINK *1 @>N LINK *1 @CLAUSE) ;
SETPARENT @>N TO (1 COMMA LINK *1 COMMA BARRIER @CLAUSE LINK *1 N) ;

SETPARENT:SetAppToN @APP-N< TO (*-1 @CLAUSE + N) ;
SETPARENT:SetAppToN @APP-N< TO (*-1 COMMA LINK -1 N) ;

### adjp

SETPARENT:SetAttrToRightA @>A TO (*1 A) ;
SETPARENT:SetAttrToLeftA @A< TO (*-1 A) ;

SETPARENT:SetAttrToLeftAdvl @ADVL< OR @APP-ADVL< TO (*-1 ADVL BARRIER @CLAUSE) ;
SETPARENT:SetAdvlToAdvl @>ADVL TO (1 @ADVL>CS) ;
SETPARENT:SetAttrToRightAdvl @>ADVL TO (*1 ADVL BARRIER @CLAUSE) ;

### nump

SETPARENT:SetAttrToRightNum @>Num TO (*1 Num BARRIER @CLAUSE) ;
SETPARENT:SetAttrToLeftNum @Num< OR @APP-Num< TO (*-1 Num BARRIER @CLAUSE) ;

### vp

#SETPARENT:SetFSSTAtoMV @FS-STA TO (*-1 (@FAUX) OR @FMV BARRIER CC OR @FS-STA) ; This one is moved.

# If there is no N or Pron:


SETPARENT:SetFS-NtoMV @FS-N< TO (*-1 @FV OR @FS-STA BARRIER CS OR MO) ;
SETPARENT:SetFS-NtoN @FS-N< TO (*-1 Rel LINK **-1 N OR Pron OR A OR Indef BARRIER @V LINK NOT 0 @HNOUN OR @APP-N< OR (Attr)) ;
SETPARENT:SetFS-NtoHum @FS-N< TO (*-1 RELHUM BARRIER @V OR Rel LINK **-1 N OR Pron OR A BARRIER @V LINK NOT 0 @HNOUN OR @APP-N< OR (Attr) OR (Plc)) ;

SETPARENT:SetMVtoAUX NONVFIN + <mv> TO (*1 (<aux>) BARRIER AHTE OR MO OR Rel OR @CVP) ;
SETPARENT:SetMVtoV NONVFIN + <mv> TO (*-1 V) ;
SETPARENT:SetMVtoAUX NONVFIN + <mv> TO (*-1 (<aux>)) ;
SETPARENT:SetAUXtoAUX NONVFIN + <aux> TO (*-1 (<aux>)) ;

SETPARENT:SetFS-NIMVtoN @FS-N<IMV TO (NOT 0 ConNeg LINK *-1 Rel BARRIER @V LINK **-1 N OR Pron OR A OR Indef BARRIER @V LINK NOT 0 @HNOUN OR @APP-N< OR (Attr)) ;


# ellipse - no VFIN:
SETPARENT:SetFS-NtoMV @FS-N< TO (*-1 CS OR Rel OR MO BARRIER VFIN LINK *-1 NONVFIN BARRIER S-BOUNDARY2 OR VFIN LINK *-1 S-BOUNDARY2 BARRIER VFIN LINK *1 NONVFIN) ;
    ## Son muitala ahte olmmoš galggašii álo bidjat muitui go niegada earenoamáš čielga niegu, ja de maŋit áiggiid oaidnit maid dat niehku lea viggan muitalit.

SETPARENT:SetPcleToWord @PCLE TO (1 WORD);
SETPARENT:SetPcleToWord @PCLE TO (-1 WORD);
SETPARENT:SetPcleToVfin ("amma" @PCLE) OR ("na" @PCLE) TO (*1 VFIN);
SETPARENT:SetModToCC @>CC TO (*1 CC) ;

### ellipse
SETPARENT:SetSubjtoLeftVfin @<SUBJ TO (*-1 @CVP OR COMMA BARRIER @V LINK *-1 VFIN) ;
    ## Ovdal buorida son dálkkiidis go neavrres olmmoš dábiidis.
	## Veahá áiggi maŋŋá Ánne lea juo oađđimin duljiid alde Muhtinlágan Stálu goađis gos nu meahcis, rátnu vel alde.
SETPARENT:SetSubjtoRightVfin @SUBJ> TO (*1 @CVP BARRIER @V LINK *1 VFIN) ;
    ## Mađe losit siivu, dađe njoazebut manná mátki.

    
### local advls

SETPARENT:ToLeftPron @>Pron TO (*1 Pron);
SETPARENT:ToRightPron @Pron< TO (*-1 Pron);

SETPARENT @OBJ>SPRED TO (*1 SPRED) ;
SETPARENT @SUBJ<ADVL OR @SUBJ<OBJ TO (*-1 SUBJ) ;
SETPARENT @ADVL<OBJ TO (*-1 ADVL) ;
SETPARENT @SPRED<OBJ TO (*-1 SPRED) ;
SETPARENT @ADVL>SUBJ TO (*1 SUBJ) ;
### clause level


SETPARENT:SetObjToLeftMv @<OBJ TO (*-1 (<mv>) OR (Neg Foc/ge) BARRIER S-BOUNDARY2 OR @-FSUBJ OR @<OBJ) ;
SETPARENT:SetObjToRightMv @OBJ> TO (*1 (<mv>) BARRIER S-BOUNDARY2 OR @-FSUBJ) ;
SETPARENT:Set-FObjToLeftMv @-F<OBJ TO (*-1 NONVFIN BARRIER S-BOUNDARY2 OR @-FSUBJ OR OBJ) ;
SETPARENT:Set-FObjToRightMv @-FOBJ> TO (*1 NONVFIN BARRIER S-BOUNDARY2 OR @-FSUBJ) ;
SETPARENT:SetAdvlToSubj @<ADVL TO (*-1 SUBJ) ;
SETPARENT:SetAdvlToLeftMv @<ADVL TO (*-1 (<mv>) BARRIER S-BOUNDARY2 OR @-FSUBJ) ;
SETPARENT:SetAdvlToLeftNeg @<ADVL TO (*-1 Neg BARRIER S-BOUNDARY2 OR @-FSUBJ OR (<mv>)) ;
SETPARENT:SetAdvlToRightMv @ADVL> TO (*1 (<mv>) BARRIER @-FSUBJ) ;
SETPARENT:SetAdvlToCompCS @<ADVL TO (*-1 @COMP-CS< BARRIER S-BOUNDARY2 OR @V) ;
SETPARENT:SetAdvlToSubj @<ADVL TO (*-1 CC OR COMMA BARRIER @V LINK 1 @<SUBJ) ;
SETPARENT:SetGostege GOSTEGE TO (*-1 Neg BARRIER @V) ;

SETPARENT: @-F<ADVL TO (*-1 Inf OR Sup OR (Actio Ess) OR Ger BARRIER S-BOUNDARY2 LINK NOT 0 @MV) ;
SETPARENT: @-FADVL> TO (*1 Inf OR Sup OR (Actio Ess) OR Ger BARRIER S-BOUNDARY2 LINK NOT 0 @MV) ;

SETPARENT:SetSubjToRightVfin @SUBJ> TO (*1 VFIN BARRIER S-BOUNDARY2) ;
SETPARENT:SetSubjToLeftVfin @<SUBJ TO (*-1 VFIN BARRIER S-BOUNDARY2) ; 
SETPARENT:SetRelSubjToRight @SUBJ> + Rel TO (*1 @FS-N< BARRIER S-BOUNDARY2) ;

SETPARENT @<SPRED TO (*-1 @SUBJ> BARRIER @V);
    ## Sápmelaččaid historjá álbmogin lea duháhiid jagiid boaris, muhto dálá ássanguovlluin sápmelaččat eai leat ássan nu guhká.
SETPARENT @SPRED> TO (*1 @SUBJ> LINK NOT 0 Rel);
SETPARENT @<SPRED TO (*-1 (<mv>) OR @HNOUN);
SETPARENT @SPRED> TO (*1 (<mv>) OR @HNOUN BARRIER Rel OR S-BOUNDARY2);

SETPARENT @<OPRED TO (*-1 V BARRIER S-BOUNDARY2 LINK NOT 0 IV);
SETPARENT @OPRED> TO (*1 V BARRIER S-BOUNDARY2 LINK NOT 0 IV);

SETPARENT @<OPRED TO (*-1 OBJ BARRIER S-BOUNDARY2);
SETPARENT @OPRED> TO (*1 OBJ BARRIER S-BOUNDARY2);
SETPARENT @<PPRED TO (*-1 SPRED OR OPRED) ;

## @COMP-CS<
SETPARENT:CNPToMvwhenComp-cs @CNP TO (*1 @COMP-CS< BARRIER @CLAUSE LINK *-1 @CNP LINK *-1 <mv>) ;
SETPARENT:Comp-cs @COMP-CS< TO (*-1 CS) ;
SETPARENT @ADVL>CS TO (1 CS) ;



### the finite verb to the subject when there is a relative clause in between
SETPARENT:SetSubjVfinAfterRelCl @SUBJ> TO (*1 Rel BARRIER VFIN OR S-BOUNDARY2 LINK *1 @FAUX OR @FMV) ;
	## Genadutkit geaid eamiálbmogat miehtá máilmmi leat vuosttaldan garrasit, leat dál jođus Sápmái, ja sii ohcet sámi dievdduid genadutkamii. 


### subjunction and coordination

SETPARENT:SetCCellipse KONJ + @CVP TO (*1 @<SUBJ BARRIER VFIN) ;
SETPARENT:SetCCellipse KONJ + @CVP TO (*1 KONJ + @CVP BARRIER @V LINK *-1 @SUBJ> BARRIER @CVP) ;
SETPARENT:SetCCToCC (CC @CVP) TO (1 CS) ;
SETPARENT:SetKonjToFMV KONJ + @CVP TO (*1 @FMV) ;
SETPARENT:SetKonjToV KONJ + @CVP TO (*1 VFIN OR NONVFIN BARRIER S-BOUNDARY2) ;

### coordination

SETPARENT:SetCNPToWord @CNP TO (*-1 WORD) ;
SETPARENT:SetCNPToWord @CVP + CC TO (*-1 WORD) ;
SETPARENT:SetCNPToWord @CVP + CC TO (-1 BOS LINK 3 CS LINK -1 WORD) ;


LIST COORD = @SUBJ> @<SUBJ @<OBJ @OBJ> @<SPRED @SPRED> @<OPRED @OPRED> @APP-N< @ADVL<OBJ @SUBJ<ADVL @OBJ>SPRED @COMP-CS< @SPRED @>P @ADVL> @<ADVL ;
LIST VERBCOORD = @FMV @FAUX @IAUX @FAUX @FS-IMV @FS-STA @FS-ADVL @FS-OBJ @FS-N< @IMV @FS-N<IMV ;

SUBSTITUTE:ctjHead (@>N) (<ctjHead> @>N) TARGET @>N (NEGATE *-1 @CNP OR COMMA BARRIER @V LINK -1 @>N)(1 COMMA OR @CNP LINK *1 @>N BARRIER @ARG OR @V LINK NEGATE *1 COMMA BARRIER @CLAUSE LINK 1 @CLAUSE) ;

SUBSTITUTE:ctjHead (@SUBJ>) (<ctjHead> @SUBJ>) TARGET @SUBJ> (NEGATE *-1 @CNP OR COMMA BARRIER @V LINK -1 @SUBJ>)(1 COMMA OR @CNP LINK *1 @SUBJ> BARRIER @ARG OR @V OR S-BOUNDARY2 LINK NOT 0 Rel) ;
SUBSTITUTE:ctjHead (@<SUBJ) (<ctjHead> @<SUBJ) TARGET @<SUBJ (NEGATE *-1 @CNP OR COMMA BARRIER @V OR @ARG LINK -1 @<SUBJ)(1 COMMA OR @CNP LINK *1 @<SUBJ BARRIER @ARG OR @V OR S-BOUNDARY2) ;
SUBSTITUTE:ctjHead (@<OBJ) (<ctjHead> @<OBJ) TARGET @<OBJ (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR (<mv>) LINK -1 @<OBJ)(1 COMMA OR @CNP LINK *1 @<OBJ BARRIER @V OR @ARG OR S-BOUNDARY2) ;
SUBSTITUTE:ctjHead (@<OBJ) (<ctjHead> @<OBJ) TARGET @<OBJ (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR (<mv>) OR S-BOUNDARY2 LINK *-1 @<OBJ BARRIER @V OR @ARG)(0 Num LINK *1 (N Gen) BARRIER NOT-ADJ LINK 1 COMMA OR @CNP LINK *1 @<OBJ BARRIER @V OR @ARG) ;
SUBSTITUTE:ctjHead (@OBJ>) (<ctjHead> @OBJ>) TARGET @OBJ> (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR (<mv>) OR S-BOUNDARY2 LINK -1 @OBJ>)(1 COMMA OR @CNP LINK *1 @OBJ> BARRIER @ARG OR @V) ;
SUBSTITUTE:ctjHead (@APP-N<) (<ctjHead> @APP-N<) TARGET @APP-N< (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @APP-N<)(1 COMMA OR @CNP LINK *1 @APP-N< BARRIER @ARG) ;
SUBSTITUTE:ctjHead (@<SPRED) (<ctjHead> @<SPRED) TARGET @<SPRED (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @<SPRED)(1 COMMA OR @CNP LINK *1 @<SPRED BARRIER @ARG OR S-BOUNDARY2) ;
SUBSTITUTE:ctjHead (@SPRED>) (<ctjHead> @SPRED>) TARGET @SPRED> (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @SPRED>)(1 COMMA OR @CNP LINK *1 @SPRED> BARRIER @ARG) ;
SUBSTITUTE:ctjHead (@<ADVL) (<ctjHead> @<ADVL) TARGET @<ADVL (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @<ADVL)(1 @CNP LINK *1 @<ADVL BARRIER @ARG OR @V OR S-BOUNDARY2 OR CC) ;
SUBSTITUTE:ctjHead (@ADVL>) (<ctjHead> @ADVL>) TARGET @ADVL> (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @ADVL>)(1 @CNP LINK *1 @ADVL> BARRIER  @ARG OR @V OR S-BOUNDARY2 OR CC) ;
SUBSTITUTE:ctjHead (@SPRED) (<ctjHead> @SPRED) TARGET @SPRED (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @SPRED)(1 COMMA OR @CNP LINK *1 @SPRED BARRIER @ARG) ;
SUBSTITUTE:ctjHead (@<OPRED) (<ctjHead> @<OPRED) TARGET @<OPRED (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @<OPRED)(1 COMMA OR @CNP LINK *1 @<OPRED BARRIER @ARG) ;
SUBSTITUTE:ctjHead (@OPRED>) (<ctjHead> @OPRED>) TARGET @OPRED> (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @OPRED>)(1 COMMA OR @CNP LINK *1 @OPRED> BARRIER @ARG) ;
SUBSTITUTE:ctjHead (@COMP-CS<) (<ctjHead> @COMP-CS<) TARGET @COMP-CS< (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @COMP-CS<)(1 COMMA OR KONJ + @CNP LINK *1 @COMP-CS< BARRIER @ARG OR CS) ;
SUBSTITUTE:ctjHead (@>P) (<ctjHead> @>P) TARGET @>P (NEGATE *-1 @CNP OR COMMA BARRIER @ARG OR S-BOUNDARY2 LINK -1 @>P)(1 COMMA OR @CNP LINK *1 @>P BARRIER @ARG) ;



SUBSTITUTE:ctjHead (V) (<ctjHead> V) TARGET VFIN (NEGATE *-1 CC OR COMMA BARRIER CS OR MO LINK *-1 VFIN BARRIER CS OR MO)(0 @MCLV)(NEGATE 0 Neg LINK 1 ("ge"))(*1 COMMA OR CC BARRIER Rel OR CS LINK **1 VFIN LINK 0 @MCLV) ;
    ## Muhtun geasi nieida jávkkai, ja olbmot ohce su, muhto eai gávdnan su eai gostege, eaige diehtán gosa lei šaddan.
SUBSTITUTE:ctjHead (V) (<ctjHead> V) TARGET VFIN (NEGATE *-1 CC OR COMMA BARRIER CS OR MO LINK *-1 VFIN BARRIER CS OR MO)(0 @MCLV)(NEGATE 0 Neg LINK 1 ("ge"))(*1 Rel BARRIER @V LINK *1 COMMA OR @CVP BARRIER Rel OR CS LINK *1 @SUBJ> BARRIER @V LINK **1 VFIN LINK 0 @MCLV) ;


SUBSTITUTE:ctjHead (V) (<ctjHead> V) TARGET VFIN (NEGATE *-1 CC OR COMMA BARRIER CS OR MO OR Rel LINK *-1 VFIN BARRIER CS OR MO)(0 @SCLV)(NEGATE *-1 CS BARRIER @V OR MO LINK *1 @SCLV LINK *1 MO BARRIER @V) (NEGATE 0 Neg LINK 1 ("ge"))(*1 COMMA OR CC LINK *1 VFIN BARRIER MO OR CS OR Rel LINK 0 @SCLV) ;
    ## Go bassat lihtiid dahje málestit siiddas, de sáhttit seammás guldalit radio.

## for sma 
#SUBSTITUTE:ctjHead (V) (<ctjHead> V) TARGET VFIN (NEGATE *-1 CC OR COMMA BARRIER CS OR MO LINK *-1 VFIN BARRIER CS OR MO)(0 @SCLV)(NEGATE *-1 CS BARRIER @V OR MO LINK *1 @SCLV LINK *1 MO BARRIER @V) (NEGATE 0 Neg LINK 1 ("ge"))(*1 COMMA OR CC LINK *1 VFIN BARRIER Rel LINK 0 @SCLV) ;


LIST MADE = "mađe" "mađi" ;
LIST DADE = "dađe" "dađi" ; 


# two subordinates:
SUBSTITUTE:ctjHead (V) (<ctjHead> V) TARGET VFIN (NEGATE *-1 CC OR COMMA BARRIER @V LINK *-1 VFIN BARRIER CS OR MO OR Rel)(0 @SCLV)(NEGATE 0 Neg LINK 1 ("ge"))(*-1 MO OR CS OR Rel BARRIER @V LINK NOT 0 AHTE LINK *1 VFIN LINK *1 COMMA OR CC BARRIER VFIN LINK *1 VFIN BARRIER @SUBJ> OR @V LINK 0 @SCLV) ;
#SUBSTITUTE:ctjHead (V) (<ctjHead> V) TARGET VFIN (NEGATE *-1 CC OR COMMA BARRIER CS OR MO LINK *-1 VFIN BARRIER CS OR MO)(0 @SCLV)(NEGATE 0 Neg LINK 1 ("ge"))(*-1 MO OR CS BARRIER @V LINK NOT 0 AHTE LINK *1 VFIN LINK *1 COMMA OR CC BARRIER VFIN LINK *1 MO OR CS BARRIER @V LINK *1 VFIN BARRIER S-BOUNDARY2 LINK 0 @SCLV) ;
    ## Dállu lea divrras midjiide danne go dat vuosiha govt mearrasámit elle ovdal ja makkár viesut sis ledje.
SUBSTITUTE:ctjHead (V) (<ctjHead> V) TARGET VFIN (NEGATE *-1 CC OR COMMA BARRIER CS OR MO LINK *-1 VFIN BARRIER CS OR MO)(0 @SCLV)(NEGATE 0 Neg LINK 1 ("ge"))(*-1 MADE OR DADE BARRIER @V LINK *1 VFIN LINK *1 DADE BARRIER VFIN LINK *1 VFIN LINK 0 @SCLV) ;    
    ## Mađe stuorit RAM-muitu du dihtoris lea, dađe eanet dihtorprográmmaid sáhtát geavahit oktanaga.

SUBSTITUTE:ctjHead (V) (<ctjHead> V) TARGET $$VERBCOORD (NOT 0 VFIN)(NEGATE *-1 CC OR COMMA BARRIER CS LINK *-1 $$VERBCOORD)(*1 COMMA OR CC BARRIER $$VERBCOORD LINK *1 $$VERBCOORD BARRIER CS OR @V) ;

SETPARENT:GenCoord @>N TO (*-1 COMMA OR CC BARRIER @CLAUSE LINK *-1 @>N + <ctjHead> BARRIER @CLAUSE);
SETPARENT:NotGenCoord @>N TO (1 (N @>N));
    ## Dát lea Dávveda bártni ja Abrahama bártni sohka. 

SETPARENT:SetFSSTAtoMV @FS-STA TO (*-1 @FAUX OR @FMV BARRIER CC OR @FS-STA) ;
SETPARENT:SetFSSTAtoRelOrAdvl @FS-STA TO (*-1 @FS-N< OR @FS-ADVL BARRIER VFIN OR @SUBJ>) ;
SETPARENT @FS-STA TO (*-1 MO BARRIER @FS-STA OR CS LINK *-1 VFIN) ;
SETPARENT @FS-STA TO (*-1 @FS-STA BARRIER @MCLV OR Rel) ;
SETPARENT @FS-STA TO (*-1 @FS-IMV BARRIER VFIN OR @CVP) ;
SETPARENT @FS-STA TO (*-1 @FS-N< BARRIER @MV) ;
SETPARENT @FS-STA + Neg TO (1 ("ge") LINK *-1 GOSTEGE BARRIER CS OR CC LINK -1 Neg LINK *-1 Neg BARRIER VFIN) ;
SETPARENT @FS-STA + (Neg Foc/ge) TO (*-1 GOSTEGE BARRIER CS OR CC LINK -1 Neg LINK *-1 Neg BARRIER VFIN) ;


SETPARENT:RelVtoVfin @FS-STA (NONE p (*)) TO (*1 @FV) ; 
SETPARENT:RelVtoVfin @FS-STA (NONE p (*)) TO (*-1 @FV) ; 
SETPARENT:RelVtoVfin @FS-STA TO (*-1 @ADVL>SUBJ BARRIER VFIN LINK *1 SUBJ) ; 


######### nonfinite clauses
SETPARENT:InfinSubj @-FSUBJ> TO (*1 NONVFIN);
SETPARENT:InfinObj @ICL-OBJ TO (*-1 (<mv>));

###############
SETPARENT @FMVutt (NONE p (*)) TO (@0 (*));

SETPARENT:OBJsentenceToSentence @FS-OBJ TO (*-1 <mv> LINK NOT 0 IV);
SETPARENT:ADVLsentenceToSentence @FS-ADVL TO (*-1 MO OR CS LINK NOT 0 DELLIE LINK *-1 <mv> BARRIER @SUBJ> OR @V) ;
SETPARENT:ADVLsentenceToSentence @FS-ADVL (NONE p (*)) TO (*-1 @FMV OR @IMV);
SETPARENT:ADVLsentenceToSentence @FS-ADVL (NONE p (*)) TO (*1 @FMV OR @IMV);

SETPARENT:Coord $$COORD TO (*-1 COMMA OR @CNP BARRIER @V OR S-BOUNDARY2 LINK *-1 $$COORD + <ctjHead>);
SETPARENT:VCoord $$VERBCOORD TO (*-1 COMMA OR CC LINK *-1 $$VERBCOORD + <ctjHead>);


SETPARENT @HNOUN TO (*-1 N BARRIER @V);
SETPARENT @HNOUN TO (1 (":") LINK *1 @V OR (@SUBJ) BARRIER S-BOUNDARY2);
SETPARENT @HNOUN TO (-1 (":") LINK *-1 @V OR (@SUBJ) BARRIER S-BOUNDARY2);

SETPARENT WORD (NONE p (*)) TO (1 S-BOUNDARY2 LINK -2 S-BOUNDARY2 LINK @0 (*));

SETPARENT:sentenceToSentence @FV (NONE p (*)) TO (*-1 @FV + <ctjHead>);
SETPARENT:MVsentenceToMVSentence @FMV (NONE p (*)) TO (*-1 @FMV OR @FAUX);
SETPARENT:MVsentenceToMVSentence @FAUX (NONE p (*)) TO (*-1 @FMV OR @FAUX);
SETPARENT @HNOUN (NONE p (*)) TO (@0 (*));
SETPARENT SUBJ OR SPRED (NONE p (*)) TO (@0 (*));
SETPARENT:sentenceToUttv @FV (NONE p (*)) TO (*1 @FMVutt);
SETPARENT:MVsentenceToMVSentence @FMV (NONE p (*)) TO (@0 (*));
SETPARENT:MVsentenceToMVSentence @FAUX (NONE p (*)) TO (@0 (*));
SETPARENT:sentenceToSentence VFIN (NONE p (*)) TO (*-1 VFIN);

# very elliptic mainclause
SETPARENT:noarrow VFIN (NONE p (*)) TO (*-1 CS LINK *-1 @NOARROW BARRIER @V);

SETPARENT @V (NONE p (*)) TO (@0 (*));

## div
SETPARENT @VOC TO (*-1 VFIN);
SETPARENT @VOC TO (*1 VFIN);
SETPARENT @VOC TO (-1 CC LINK -1 @VOC);
SETPARENT @INTERJ TO (*1 @MV);
SETPARENT @INTERJ TO (-1 CC LINK -1 @INTERJ);
SETPARENT @SPRED TO (*1 VFIN) ;
SETPARENT @SPRED TO (*-1 VFIN) ;
SETPARENT @SUBJ TO (*1 VFIN) ;
SETPARENT @SUBJ TO (*-1 VFIN) ;
SETPARENT @SUBJ (NONE p (*)) TO (@0 (*));


    #=====#
      END #
    #=====#
