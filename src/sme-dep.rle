#Distributed under the terms of the GNU General Public License version 2 
# or any later version.

# ==================================================================== #
#    N O R T H E R N  S Á M I  D E P E N D E N C Y   G R A M M A R     #               
# ==================================================================== #
# ==================================================================== #



# ========== #
# Delimiters #
# ========== #

DELIMITERS = "<.>" "<!>" "<?>" "<...>" "<¶>" ;

SETS

LIST N = N ;
LIST V = V ;
LIST A = A ;
LIST Adv = Adv ;
LIST CC = CC ;
LIST CS = CS ;
LIST Inf = Inf ;
LIST Neg = Neg ;
LIST Num = Num ;
LIST Po = Po ;
LIST Pr = Pr ;

LIST Pcle = Pcle ;
LIST Prop = Prop ;

LIST Pron = Pron ;
LIST Sup = Sup ;
LIST IV = IV ;
LIST TV = TV ;
LIST COMMA = "," ;
LIST Ind = Ind ;
LIST Pot = Pot ;
LIST Imprt = Imprt ;
LIST ImprtII = Imprt II ;
LIST Cond = Cond ;
LIST ConNeg = ConNeg ;
LIST Interj = Interj ;
LIST Pcle = Pcle ;
LIST Num = Num ;
LIST ABBR = ABBR ;
LIST ACR = ACR ;
LIST Prs = Prs ;
LIST Prt = Prt ;
LIST Cmpnd = Cmpnd ;
LIST PrfPrc = PrfPrc ;
LIST PrsPrc = PrsPrc ;
LIST Actor = Actor ;
LIST Actio = Actio ;
LIST Ger = Ger ;
LIST Indef = Indef ;
LIST Ill = Ill ;
LIST Com = Com ;
LIST Gen = Gen ;
LIST Ess = Ess ;


# POS sub-categories
# ------------------

LIST Pers = Pers ;
LIST Dem = Dem ;
LIST Interr = Interr ;

LIST Indef = Indef ;

LIST Recipr = Recipr ;
LIST Refl = Refl ;
LIST Rel = Rel ;
 
LIST Interj = Interj ;
LIST Adp = Adp ;
 

# Other tags
# ----------

    
LIST WORD = N A Adv V Pron CS CC Po Pr Interj Pcle Num ABBR ACR  \? ;


# Verb sets
LIST REALCOPULAS = "dáidit" "leahkit" "leat" "soaitit" "veadjit" ;

# The set COPULAS is for predicative constructions
LIST COPULAS = "dáidit" "gártat" "leahkit" "leat" "orrut" "soaitit" "šaddat" "veadjit" ;
 #  "bissut" ?
 # 'Dáidit' can appear without 'leat'.

SET V-NOT-COP = V - COPULAS ;

LIST MOD-ASP = "bállet" "berret" "dáidit" "fertet" "galgat" "gillet" "lávet"  "sáhttit" "seahtit" "soaitit" "viggat" ;

 # Verbs that never have arguments of their own - so we leave out "áigut", for ex.

LIST AUX-OR-MAIN = "áigut" "álgit" "beassat" "galgat" "hálidit" "háliidit" "máhttit" "nagodit" "ollit" "orrut" "sihtat" "veadjit";

 # These verbs can take arguments, so they do not belong in the AUX group, 
 # but they are nevertheless mapped to (@+FAUXV). 
 # Added "álgit" to the group (Lene) - Made rules for "boahtit" which  sometimes can be AUX
 # Magga (1982: 120): áigut, dáidit, deaivat, fertet, galgat, lávet, máhttit, oažžut, sáhttit, soaitit, veadjit - in some of the meanings 
 # Halvhjelpeverb: álgit, berret, dohkket, gártat, heivet, liigut, šaddat - in some of the meanings 
 
SET AUX = COPULAS OR Neg OR MOD-ASP OR AUX-OR-MAIN ;
 

SET V-NOT-AUX = V - AUX ;
 # The set of verbs that cannot be auxiliaries. 
			  # Does not include AUX-OR-MAIN.
#SET VFIN-NOT-AUX = VFIN - AUX ;

SET V-MAIN = V - COPULAS - Neg - MOD-ASP OR ("orrut") ;




SET V-IND-FIN = Prs OR Prt ;
 # Problem: "In boahtán" is an invisible indicative

SET V-MOOD = Ind OR Pot OR Imprt OR ImprtII OR Cond OR Sup ;

LIST GC = ("gč") ;

SET VFIN = GC OR V-MOOD - ConNeg ;

SET VFIN-POS = V-MOOD - ConNeg - Neg ;

SET VFIN-NOT-IMP = VFIN - Imprt ;

SET VFIN-NOT-NEG = VFIN - Neg ;
  # this might be to strict, besides, "iige" can be written "ii ge"

SET NOT-PRFPRC = WORD - PrfPrc ;


# Some subsets of the VFIN sets
# - - - - - - - - - - - - - - -
LIST V-SG1 = (V Ind Prs Sg1)  (V Ind Prt Sg1) (V Cond Prs Sg1) 
             (V Cond Prt Sg1) (V Pot Prs Sg1) (V Neg Ind Sg1);
 
LIST V-SG2 = (V Ind Prs Sg2)  (V Ind Prt Sg2) (V Cond Prs Sg2) 
             (V Cond Prt Sg2) (V Pot Prs Sg2) (V Neg Ind Sg2);
 
LIST V-SG3 = (V Ind Prs Sg3)  (V Ind Prt Sg3) (V Cond Prs Sg3) 
             (V Cond Prt Sg3) (V Pot Prs Sg3) (V Neg Ind Sg3);
 
LIST V-DU1 = (V Ind Prs Du1)  (V Ind Prt Du1) (V Cond Prs Du1) 
     	     (V Cond Prt Du1) (V Pot Prs Du1) (V Neg Ind Du1);
 
LIST V-DU2 = (V Ind Prs Du2)  (V Ind Prt Du2) (V Cond Prs Du2) 
	         (V Cond Prt Du2) (V Pot Prs Du2) (V Neg Ind Du2);
 
LIST V-DU3 = (V Ind Prs Du3)  (V Ind Prt Du3) (V Cond Prs Du3) 
	         (V Cond Prt Du3) (V Pot Prs Du3) (V Neg Ind Du3);
 
LIST V-PL1 = (V Ind Prs Pl1)  (V Ind Prt Pl1) (V Cond Prs Pl1) 
             (V Cond Prt Pl1) (V Pot Prs Pl1) (V Neg Ind Pl1);
 
LIST V-PL2 = (V Ind Prs Pl2)  (V Ind Prt Pl2) (V Cond Prs Pl2) 
             (V Cond Prt Pl2) (V Pot Prs Pl2) (V Neg Ind Pl2);
 
LIST V-PL3 = (V Ind Prs Pl3)  (V Ind Prt Pl3) (V Cond Prs Pl3) 
             (V Cond Prt Pl3) (V Pot Prs Pl3) (V Neg Ind Pl3);
 

 # Note that imperative verbs are not included in these sets!

SET V-SG = V-SG1 OR V-SG2 OR V-SG3 ;
SET V-DU = V-DU1 OR V-DU2 OR V-DU3 ;
SET V-PL = V-PL1 OR V-PL2 OR V-PL3 ;

SET V-DU-PL = V-DU1 OR V-DU2 OR V-DU3 OR V-PL1 OR V-PL2 OR V-PL3 ;

SET V-NOT-SG1 = VFIN-NOT-IMP - V-SG1 ;
SET V-NOT-SG2 = VFIN-NOT-IMP - V-SG2 ;
SET V-NOT-SG3 = VFIN-NOT-IMP - V-SG3 ;
SET V-NOT-DU1 = VFIN-NOT-IMP - V-DU1 ;
SET V-NOT-DU2 = VFIN-NOT-IMP - V-DU2 ;
SET V-NOT-DU3 = VFIN-NOT-IMP - V-DU3 ;
SET V-NOT-PL1 = VFIN-NOT-IMP - V-PL1 ;
SET V-NOT-PL2 = VFIN-NOT-IMP - V-PL2 ;
SET V-NOT-PL3 = VFIN-NOT-IMP - V-PL3 ;


SET V-1-2 = V-SG1 OR V-SG2 OR V-DU1 OR V-DU2 OR V-PL1 OR V-PL2 ;
SET V-3  = V-SG3 OR V-DU3 OR V-PL3 ;
 # Note that imperative verbs are not included in these sets!

SET NONVFIN = V - VFIN ;
LIST MO-MANge = "goas" "gokko" "gos" "gosa" "govt" "makkár" "man" "manne" "mo" "mot" "mov" "movt" ("nugo" @CVP) (V Qst);
 
SET MO = MO-MANge - ("man" Foc/ge) ; 

	
SET S-BOUNDARY2 = (Pron Interr) OR (Pron Rel) OR ("muhto") OR MO OR ("\;") OR (":") OR ("-") OR ("–") OR (@CVP) ;

SET NOT-ADV            = WORD - Adv;
SET NOT-ADV-N          = WORD - Adv - N;
SET NOT-ADV-PCLE       = WORD - Adv - Pcle ;
SET NOT-ADV-INDEF      = WORD - Adv - Indef ;
SET NOT-ADV-PCLE-ILL   = WORD - Adv - Pcle - Ill ;
SET NOT-ADV-PCLE-Refl  = WORD - Adv - Pcle - Refl ;
SET NOT-ADV-PCLE-INDEF = WORD - Adv - Pcle - Indef ;
SET NOT-ADV-PCLE-NEG   = WORD - Adv - Pcle - Neg ;


# Syntactic tags and sets
# =======================

# Syntactic tag definitions 

LIST @+FAUXV = @+FAUXV ; 	         # finite auxiliary
LIST @+FMAINV = @+FMAINV ; 	         # finite main verb
LIST @-FADVL = @-FADVL ; 	         # object of infinite verb outside of the verbal
LIST @-FAUXV = @-FAUXV ; 	         # infinite auxiliary verb
LIST @-FMAINV = @-FMAINV ; 	         # infinite main verb
LIST @-FOBJ = @-FOBJ ; 		         # object of infinite verb outside of the verbal
LIST @-FSUBJ = @-FSUBJ ; 	         # subject of infinite verb outside of the verbal
LIST @-FSUBJ> = @-FSUBJ> ;
LIST @<-FSUBJ = @<-FSUBJ ;
LIST @>A = @>A ; 			 # modifier of adj
LIST @>ADVL = @>ADVL ; 		         # modifier of advl
LIST @ADVL< = @ADVL< ; 		         # modifier of advl
LIST @>N = @>N ; 			 # modifier of N
LIST @>Num = @>Num ; 		         # attr of numeral
LIST @>P = @>P ; 			 # complement of P
LIST @A< = @A< ; 			 # complement of A
LIST @ADVL = @<ADVL @ADVL> @ADVL @-FADVL ; 		         # adverbial
LIST @<ADVL = @<ADVL ;
LIST @ADVL> = @ADVL> ;
LIST @APP>Pron = @APP>Pron ;             # apposition of pron
LIST @APP-ADVL< = @APP-ADVL< ;           # apposition of advl 
LIST @APP-N< = @APP-N< ; 	         # apposition of N
LIST @APP-Num< = @APP-Num< ;             # apposition of Num
LIST @APP-Pron< = @APP-Pron< ;           # apposition of Pron
LIST @CNP = @CNP ; 			 # conjunction between NPs
LIST @COMPL-CS< = @COMPL-CS< ;           # complement of CS 
LIST @CVP = @CVP ; 			 # conjunction between VPs
LIST @FS-ACC>> = @FS-ACC>> ;             # finite subclause, object of speechact verb
LIST @FS-ADVL = @FS-ADVL ; 	         # finite subclause ...
LIST @FS-N< = @FS-N< ;               	 # relative clause to N
LIST @FS-OBJ = @FS-OBJ ; 	         # finite subclause functioning as object
LIST @FS-STA = @FS-STA ; 	         # finite sentence, statement
LIST @HAB = @HAB ; 			 # habitive (aka advl of possessiv constr)
LIST @IMV = @IMV ;             # infinite main verb
LIST @ICL-ADVL = @ICL-ADVL ;             # non-finite subclause ...
LIST @ICL-AUX< = @ICL-AUX< ;             # "right" argument of auxiliary (?)
LIST @ICL-OBJ = @ICL-OBJ ; 	         # non-finite subclause ...
LIST @ICL-STA = @ICL-STA ; 	         # non-finite subclause ...
LIST @N< = @N< ; 			 # modifier of N
LIST @Num< = @Num< ; 		         # modifier of Num
LIST @<OBJ = @<OBJ ; 			 # object
LIST @OBJ> = @OBJ> ; 			 # object
LIST @P< = @P< ; 			 # complement of P
LIST @PCLE = @PCLE ; 		         # particle
LIST @>Pron = @>Pron ;                   # Adverb to pron
LIST @<SUBJ = @<SUBJ ; 		         # subject
LIST @SUBJ> = @SUBJ> ; 		         # subject
#LIST @V = @V ; 				 # verbal
LIST @-F<OBJ = @-F<OBJ ;
LIST @<OPRED =  @<OPRED ;
LIST @<SPRED =  @<SPRED ;
LIST @OPRED> =  @OPRED> ;
LIST @SPRED> =  @SPRED> ;

LIST @SPRED = @SPRED> @<SPRED ;
LIST @OPRED = @OPRED> @<OPRED ;
LIST @SUBJ = @<SUBJ @SUBJ> ;
LIST @OBJ = @<OBJ @>OBJ ;

# Syntactic set definitions 
# =========================

LIST @-FARG = @-FOBJ @-FSUBJ ;
SET @ARG = @SUBJ OR @OBJ OR @SPRED OR @OPRED OR @ADVL ;
#LIST @<ARG = @<SUBJ @<OBJ @<SPRED @<OPRED ;
#LIST @ARG> = @SUBJ> @OBJ> @SPRED> @OPRED> ;
SET @-FARG/ADVL = @-FARG OR @-FADVL ;
SET @ARG/ADVL = @ARG OR @ADVL - (@ADVL + CC) ;
SET @CLAUSE = @ARG/ADVL OR @-FARG/ADVL OR VFIN OR NONVFIN ;

LIST @IAUX = @IAUX ;

LIST @V = @FMV @IMV @FAUX @IAUX ;
LIST @FV = @FMV @FAUX ;
LIST @AUX = @IAUX @FAUX <aux> ;
LIST @MV = @IMV @FMV <mv> ;







#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§                             §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§                             §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§     dep grammar starts      §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§                             §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§                             §§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  
#   §§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§§                  




# Correction rules
# ================

SECTION

SUBSTITUTE:SubFmainv=V (@+FMAINV) (@FMV) TARGET V ;
SUBSTITUTE:SubNfmainv=V (@-FMAINV) (@IMV) TARGET V ;
SUBSTITUTE:SubFaux=V (@+FAUXV) (@FAUX) TARGET V ;
SUBSTITUTE:SubNfaux=V (@-FAUXV) (@IAUX) TARGET V ;


# <mv> and <aux>
# --------------
SUBSTITUTE:SubV=mv (V) (<mv> V) TARGET @MV ;
SUBSTITUTE:SubV=aux (V) (<aux> V) TARGET @AUX ;

# infinite clauses:
SUBSTITUTE:SubV=mvICL (V) (<mv> V) TARGET NONVFIN (0 @<OBJ LINK NEGATE *1 @IMV BARRIER S-BOUNDARY2 OR V) ;
SUBSTITUTE:SubV=auxICL (V) (<aux> V) TARGET NONVFIN (0 AUX LINK 0 @<OBJ LINK *1 @IMV BARRIER S-BOUNDARY2 OR V) ;

# the finite verb
# ------------------
# in relative clauses:
SUBSTITUTE:SubV=FS-N (@FMV) (@FS-N<) TARGET V (*-1 Rel BARRIER VFIN) ;
SUBSTITUTE:SubVmain=FS-N (@FAUX) (@FS-N<) TARGET V (*-1 Rel BARRIER VFIN) ;

# in subclauses:
SUBSTITUTE:SubV=FS-STA (@FMV)(@FS-STA) TARGET V ((*-1 CS BARRIER VFIN LINK NOT 0 ("de")) OR (*-1 MO BARRIER VFIN LINK NEGATE *1 ("?"))) ;
SUBSTITUTE:SubVmain=FS-N (@FAUX) (@FS-STA) TARGET V ((*-1 CS BARRIER VFIN LINK NOT 0 ("de")) OR (*-1 MO BARRIER VFIN LINK NEGATE *1 ("?"))) ;

# infinite clauses:
SUBSTITUTE:SubV=iclaux (@<OBJ) (@ICL-OBJ) TARGET NONVFIN (*-1 @-FSUBJ> BARRIER @V) ;



# Mapping rules
# =============


SECTION

### habitive

SETPARENT:SetHab @HAB TO (0* V-3 BARRIER S-BOUNDARY2 OR V);


### postposition / preposition

SETPARENT:ComplToPo @>P TO (*1 Po + @ADVL BARRIER @CLAUSE);
SETPARENT:ComplToPr @P< TO (*-1 Pr + @ADVL BARRIER @CLAUSE);


### np

SETPARENT:SetModToN @>N TO (*1 N BARRIER @CLAUSE) ;
SETPARENT:SetCompToN @N< OR @APP-N< TO (*-1 N BARRIER @CLAUSE OR @CNP) ;
SETPARENT:SetAppToRightPron @APP>Pron TO (*1 Pron BARRIER @CLAUSE) ;
SETPARENT:SetAppToLeftPron @APP-Pron< TO (*-1 Pron BARRIER @CLAUSE) ;

### adjp

SETPARENT:SetAttrToRightA @>A TO (*1 A BARRIER @CLAUSE) ;
SETPARENT:SetAttrToLeftA @A< TO (*-1 A BARRIER @CLAUSE) ;

SETPARENT:SetAttrToLeftAdvl @ADVL< OR @APP-ADVL< TO (*-1 @ADVL BARRIER @CLAUSE) ;
SETPARENT:SetAttrToRightAdvl @>ADVL TO (*1 @ADVL BARRIER @CLAUSE) ;

### nump

SETPARENT:SetAttrToRightNum @>Num TO (*1 Num BARRIER @CLAUSE) ;
SETPARENT:SetAttrToLeftNum @Num< OR @APP-Num< TO (*-1 Num BARRIER @CLAUSE) ;

### vp

SETPARENT:SetFSSTAtoFV @FS-STA TO (*0 @FV OR @FS-STA) ;
SETPARENT:SetFSSTAtoVFIN @FS-N< TO (*0 VFIN BARRIER CS OR MO) ;
SETPARENT:SetFSSTAtoIMV @IAUX TO (*-1 (<aux>) BARRIER @V) ;
SETPARENT:SetFSSTAtoIAUX (<mv>) TO (*-1 (<aux>) BARRIER @V) ;

SETPARENT:SetPcleToWord @PCLE TO (-1 WORD);

### local advls

SETPARENT:ToPron @>Pron TO (*1 Pron BARRIER @CLAUSE);


### clause level


SETPARENT:SetObjToLeftMv @<OBJ TO (*-1 @MV BARRIER S-BOUNDARY2 OR @-FSUBJ) ;
SETPARENT:SetObjToRightMv @OBJ> TO (*1 @MV BARRIER S-BOUNDARY2 OR @-FSUBJ) ;
SETPARENT:SetAdvlToLeftMv @<ADVL TO (*-1 @MV BARRIER S-BOUNDARY2 OR @-FSUBJ) ;
SETPARENT:SetAdvlToRightMv @ADVL> TO (*1 @MV BARRIER S-BOUNDARY2 OR @-FSUBJ) ;

SETPARENT: @-FADVL TO (*-1 @ARG + Inf BARRIER S-BOUNDARY2) ;

SETPARENT:SetSubjToRightVfin @SUBJ> TO (*1 VFIN BARRIER S-BOUNDARY2) ;
SETPARENT:SetSubjToLeftVfin @<SUBJ TO (*-1 VFIN BARRIER S-BOUNDARY2) ; 
SETPARENT:SetRelSubjToRight @SUBJ> + Rel TO (*1 @FS-N< BARRIER S-BOUNDARY2) ;

SETPARENT @<SPRED TO (*-1 @SUBJ BARRIER S-BOUNDARY2);
SETPARENT @SPRED> TO (*1 @SUBJ BARRIER S-BOUNDARY2);
SETPARENT:SetSubjToLeftVfin @<SPRED TO (*-1 @HAB BARRIER S-BOUNDARY2 LINK 1 VFIN) ; 
SETPARENT:SetSubjToLeftVfin @<SPRED TO (*-1 VFIN BARRIER S-BOUNDARY2 OR @SUBJ) (NOT *-1 @SUBJ> BARRIER S-BOUNDARY2) ; 

SETPARENT @<OPRED TO (*-1 @OBJ BARRIER S-BOUNDARY2);
SETPARENT @OPRED> TO (*1 @OBJ BARRIER S-BOUNDARY2);

### the finite verb in a relative clause gets as parent the correlative(?) to the left
#SETPARENT:SetRelclVfinToKorrelat @FS-N< TO (**-1 N OR Pron LINK 1 Rel);

#SETPARENT:SetRelclVfinToLeft @FS-N< TO (*-1 Rel BARRIER VFIN LINK *-1 VFIN BARRIER S-BOUNDARY2);
#SETPARENT:SetRelclVfinToRight @FS-N< TO (*1 VFIN BARRIER S-BOUNDARY2) ; #(*-1 Rel BARRIER VFIN LINK NOT *-1 VFIN BARRIER S-BOUNDARY2);
#
#LIST RelArg = (Rel @SUBJ>) (Rel @OBJ>) (Rel @ADVL>);
#
#SETPARENT:SetRelToVfin RelArg TO (*1 @FS-N< BARRIER S-BOUNDARY2);
#SETPARENT:SetGenToPo @>P TO (1 Po);


### the finite verb to the subject when there is a relative clause in between
SETPARENT:SetSubjVfinAfterRelCl @SUBJ> TO (*1 Rel LINK *1 VFIN LINK *1 VFIN) ;
	## Genadutkit geaid eamiálbmogat miehtá máilmmi leat vuosttaldan garrasit, leat dál jođus Sápmái, ja sii ohcet sámi dievdduid genadutkamii. 


#SETPARENT:SetnfsubjToRightVnfin @-FSUBJ TO (*1 NONVFIN BARRIER S-BOUNDARY2) ;
#SETPARENT:SetnfsubhToLeftVnfin @-FSUBJ TO (*-1 NONVFIN BARRIER S-BOUNDARY2) ;
#
#SETPARENT:SetnfobjToRightVnfin @-FOBJ TO (*1 NONVFIN BARRIER S-BOUNDARY2) ;
#SETPARENT:SetnfobjToLeftVnfin @-FOBJ TO (*-1 NONVFIN BARRIER S-BOUNDARY2) ;


### subjunction

SETPARENT:SetCcsToCs @COMPL-CS< TO (*-1 CS) ;
SETPARENT:SetCsToV CS + @CVP TO (*1 VFIN OR NONVFIN) ;

### coordination

SETPARENT:SetCnpToArg @CNP TO (*1 @ARG) ;
SETPARENT:SetCcToV CC + @CVP TO (*1 VFIN OR NONVFIN) ;

SETPARENT:SetCcxadvlToWord (@ADVL + CC) TO (*1 WORD LINK 1 CC) ;


SETPARENT:SetSubjToLeftCcSubj @SUBJ TO (*-1 @SUBJ LINK 1 CC);
SETPARENT:SetAppToLeftCcApp @APP-N< TO (*-1 @APP-N< LINK 1 CC);
SETPARENT:SetObjToLeftCcObj @OBJ TO (*-1 @OBJ LINK 1 CC);
SETPARENT:SetXadvlToLeftCcXadvl @ADVL TO (*-1 @ADVL LINK 1 CC);
SETPARENT:SetFmainToLeftCcFmain @+FMAINV TO (-2 @+FMAINV LINK 1 CC);
SETPARENT:SetNfmainToLeftCcNfmain @-FMAINV TO (-2 @-FMAINV LINK 1 CC);

# These are now identical. Should they be turned around?
#SETPARENT @SUBJ TO (*-1 @SUBJ BARRIER NPNH LINK 1 CC);
#SETPARENT @OBJ TO (*-1 @OBJ BARRIER NPNH LINK 1 CC);
#SETPARENT @XADVL TO (*-1 @XADVL BARRIER NPNH LINK 1 CC);
#SETPARENT @+FMAINV TO (-2 @+FMAINV LINK 1 CC);
#SETPARENT @-FMAINV TO (-2 @-FMAINV LINK 1 CC);



### subclauses

#LIST CLB-ADVL = "go" ("goas" N) ("goas" Pron) "ovdal" "dassá_go" "dassážii_go" "dan_rájes_go" "dan_botta_go" "dalle_go" "ovdalgo" "maŋŋilgo" "jus,_jos,_juos,_joas" "nu_ahte" "nuvt_ahte" "dainna_go" "danne_go" "danin_go" "dan_dihte_go" "dan_dihtii_go" "dasgo" ("vai" CS @CVP) "mađe CS" "vaikko" "nugo" "dego" ;
#
######### @CL-ADVL
#
##SUBSTITUTE:SubV=fsadvlForVfinCclb (@V) (@FS-ADVL) TARGET VFIN (c CLB-ADVL) ; #XXX in again?
##SUBSTITUTE:SubV=fsadvlForVfinNeg (@V) (@FS-ADVL) TARGET VFIN (0 (Neg) OR (Sup)) ;
#SUBSTITUTE:SubV=icladvlForNvfinCclb (@V) (@ICL-ADVL) TARGET NONVFIN (c CLB-ADVL) ;
#SUBSTITUTE:SubV=icladvlForNvfinNeg (@V) (@ICL-ADVL) TARGET NONVFIN (0 (Neg) OR (Sup)) ;
#
#SETPARENT:SetAdvlToMvR @FS-ADVL OR @ICL-ADVL TO (*1 @MV) ;
#
#SUBSTITUTE:SubV=FsadvForVfinGo (@V) (@FS-ADVL) TARGET VFIN (*-1 ("go" @CVP));
#SETPARENT:SetAdvlToMvL @FS-ADVL OR @ICL-ADVL TO (*-1 @MV) ;
#
######### @CL-OBJ
#
#SUBSTITUTE:SubV=fsobjForvfinCahte (@V) (@FS-OBJ) TARGET VFIN (c ("ahte")) ;
#SUBSTITUTE:SubV=iclobjForMV (@V) (@ICL-OBJ) TARGET NONVFIN (c ("ahte")) ;
#
#SUBSTITUTE:Advl=@ICL-OBJ (@ADVL) (@ICL-OBJ) TARGET Inf (c (@-FSUBJ));
#	## Máhtte muitalii ádjá boahtit.
#
#SETPARENT @FS-OBJ OR @ICL-OBJ TO (*-1 @MV LINK 0 TV) ;
#
#
#SUBSTITUTE:Advl=@ICL-ADVL (@ADVL) (@ICL-ADVL) TARGET Ger (c (@-FSUBJ));
#SETPARENT:IclAdvlToV @ICL-ADVL TO (*-1 @V) ;

SETPARENT @-F<OBJ TO (*-1 TV);
	## Mun gergen borramis láibbi.

######### @-FSUBJ>
SETPARENT:InfinSubj @-FSUBJ> TO (*1 Actio);

######## @ADVL

#SETPARENT:AdvlToV @<ADVL TO (*-1 @MV BARRIER V OR S-BOUNDARY2);
#SETPARENT:AdvlToR @ADVL> TO (*1 @MV BARRIER S-BOUNDARY2);
#SETPARENT:AdvlToV @-FADVL TO (*-1 @ICL-STA OR @ICL-OBJ BARRIER V OR S-BOUNDARY2);
#	## Máhtte logai sin vuolgit dál juo.
#
#LIST VFIN-ADV = "ain" "juo" "vel" ;
#SETPARENT:vfinAdv VFIN-ADV TO (*-1 VFIN BARRIER S-BOUNDARY2);
#
#LIST WEATHER-SITUATION = "beaivvádat" "bievla" "buolaš" "dálki" "dálke#dilálašvuohta" "fiertu" "goalki" "siivu" "jođádat" "liekkas" "linádat" "oppas" "riđđu" "muohtti" "ilbmi" "balva" "čuoika" "čoaskin" "biegga" "nuorttadat" "davádat" "oarjjádat" "luládat" "orjješ#biegga" "nuorta#biegga" "obba#dálki" "balva#dálki" "balva#ilbmi" "arvi" "savda" "savdaarvi" "liehmu" "láfu#biegga" "baján" "johtti" "gállu" "jiella" "hieibma" "šlahtti" "seaŋáš" "borga" "guoldu" "dobadat" "dulvi" "moarri" "geardni" "cuoŋu" "jealahas" "jalahas" "geasádat" "dálvvádat" "jáldu" "lievhnu" "galmma" "guostta" "čođđolat" "čođđálat" "sealádat" "šearádat" "bálgu" "bálggádat" ;
#
#SETPARENT:weathersit WEATHER-SITUATION + Ess TO (*0 VFIN BARRIER S-BOUNDARY2);
#
#LIST ADV-NOT-ARG = "aiddo" "ain" "aivve" "albma" "aŋkke" "álggos" "beanta" "beare" "dušše" ;
#
#SETPARENT:advNotArg ADV-NOT-ARG + Adv TO (*1 (@>N) OR @ARG BARRIER S-BOUNDARY2);
#
#LIST VERB-ADV = "mielde" ;
#
#SETPARENT:advVerb VERB-ADV + Adv TO (-1 V BARRIER S-BOUNDARY2);
#

######### quotes
#
#LIST V-QUOTE = "basuhit" "cealkit" "cuoigut" "čilget" "čuorvut" "čurvet" "dadjat" "dáikit" "digaštit" "gielistit" "huikit" "huikkádit" "jearrat" "juoigat" "kommenteret" "lávlut" "lohkat" "máidnut" "máinnašit" "muitalit" "oaivvildit" "savkalit" "sárdnidit" "váruhit" "vástidit" ;
#
#SUBSTITUTE:SubV=fsacc (@V) (@FS-ACC>>) TARGET V (*1 V-QUOTE LINK -1 COMMA)(NEGATE *-1 @FS-ACC>>) ;  
#
#SETPARENT:SetFsaccToVquote (@FS-ACC>>) TO (*1 V-QUOTE LINK -1 COMMA) ;
#
#########
#
#SUBSTITUTE:SubV=fssta (@V) (@FS-STA) TARGET VFIN ;
#SUBSTITUTE:SubV=iclsta (@V) (@ICL-STA) TARGET NONVFIN ;


###############

SETPARENT VFIN (NOT p (*)) TO (@0 (*));

 


    #=====#
      END #
    #=====#
