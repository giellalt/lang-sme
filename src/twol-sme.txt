! ========================================================================== !
!                   North Sámi morphophonological rule set                   !
! ========================================================================== !

! twol-sme.txt
! The file contains the rule set for the non-segmental 
! North Sámi morphophonological rules

Alphabet
 a b c d e f g h i j k l m n o p q   ! small
 r s t u v w x y z å ä ö ø æ %-
 á é ó ú í à è ò ù ì ë ü ï â ê ô û î ã ý þ ñ ð ß ª ß ç

 A B C D E F G H I J K L M N O P Q   ! capital
 R S T U V W X Y Z Å Ä Ö Ø Æ
 Á É Ó Ú Í À È Ò Ù Ì Ë Ü Ï Â Ê Ô Û Î Ã Ý þ Ñ Ð

 e1:e i1:i o1:o o3:o u1:u   ! Morphophonemes

 č đ ŋ š ŧ ž          ! Sámi letters. In an UTF-8 version these will
 Č Đ Ŋ Š Ŧ Ž          ! be replaced by the real Sámi letters.

 ':0 %/ ¤:0 '1:' #:0        ! ' for CnsGrad of the lg:lgg and l'l:ll type
                            ! ¤:0 prevents ConsGrad in certain words
                            ! '1 is the real apostroph
                            ! # is used to mark both lexicalised and
                            ! derived compounds
! ':0 %/:0 %^%/:%/ ¤:0 '1:' ! This line will be deleted after the dust has
                            ! been settled.

                                     
 h1:h h2:h g2:g m2:m n2:n   ! the x2 ones are consonants that alternate in
 H1:H H2:H G2:G M2:M N2:N   ! stem-final positions.

 j3:j b3:b d3:d g3:g h3:h k3:k m3:m n3:n p3:p s3:s t3:t z3:z
 J3:J B3:B D3:D G3:G H3:H K3:K M3:M N3:N P3:P S3:S T3:T Z3:Z

                            ! The x3 ones are consonants that never alternate.
                            ! The capital J3 etc. do not work.
   

 X1:0 X2:0 X3:0 X4:0 X5:0 X6:0 X7:0 X8:0 X9:0   ! diacritics
 Q1:0 Q2:0 Q3:0 Q4:0 Q5:0 Q6:0 Q7:0 Q8:0 Q9:0   ! They trigger morphophono-
 Y1:0 Y2:0 Y3:0 Y4:0 Y5:0 Y6:0 Y7:0 Y8:0 Y9:0   ! logical rules
 W1:0 W2:0 
 
 !Aspell tag deletion
 %/A:0 %/B:0 %/C:0 %/D:0 %/E:0 %/F:0 %/G:0 %/H:0 %/I:0 %/J:0 %/K:0 %/L:0 %/M:0 
 %/N:0 %/O:0 %/P:0 %/Q:0 %/R:0 %/S:0 %/T:0 %/U:0 %/V:0 %/W:0 %/X:0 %/Y:0 %/Z:0 
 ;

Sets
  Vow = a á e e1 i i1 o o1 o3 u u1 y æ ø å ä ö A Á E I O U Y Æ Ø Å Ä Ö Å 
        é ó ú í à è ò ù ì ë ü ï â ê ô û î ã ý 
        É Ó Ú Í À È Ò Ù Ì Ë Ü Ï Â Ê Ô Û Î Ã Ý ;
  Cns = b b3 c č d đ d3 f g g2 g3 h h2 h3 j j3 k l m m2 m3 n ŋ n2 n3 
        B B3 C Č D Đ D3 F G G2 G3 H H2 H3 J J3 K L M M2 M3 N Ŋ N2 N3 
        p p3 r s š t ŧ v z ž z3 ' '1 
        P P3 R S Š T Ŧ V Z Ž Z3 ;
  StemCns = b b3 d d3 g g2 g3 h h2 h3 j j3 l m m2 m3 n n2 n3 r s š  
            B B3 D D3 G G2 G3 H H2 H3 J J3 L M M2 M3 N N2 N3 R S Š ;
  WeG = X4 X5 X6 X8 X9 Q4 Q5 Q6 Q7 Q8 W1 ;
  Len = Y1 Y2 Y3 Y4 Y5 Y6 Y7 Y9 ¤ ;
  Dummy = X1 X2 X3 X4 X5 X6 X7 X8 X9 Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9
          Y1 Y2 Y3 Y4 Y5 Y6 Y7 Y8 W1 W2 ¤ ;
  FinalDummy = X2 X4 X7 X8 ;         ! This set is not in use !!
  NonMPDummy = X1 X4 X7 X8 ¤ ;
  NonMPDummy2 = X1 X4 ¤ ; 
  HighVow = i u I U ;
  NonHighVow = a e o A E O ;
  Stop = k p t c č K P T C Č ;
  DelCns = g2 m2 n2 h2 G2 M2 N2 H2 ;
  CntrCns = s j h ž S J H Ž ;
  Hyph = %- ;


!Definitions

! G3  = Vow Cns Cns Cns Vow ;
! G2  = Vow Cns Cns Vow ;
! G1  = Vow Cns Vow ;
! G12 = G1 | G2 ;

Rules

!! Remainder! Change all #: to (Hyph) #:  in order to account for ealáhus- ja ...

! Introduction to the set of testwords (introduced with !€ and !$ that are added)
! -------------------------------------------------------------------------------

! (this documentation will be enlarged and moved to the documentation, and a trimmed version
! will be left here)

! For each rule, there is a set of word pairs to test. The words will be extracted into 
! two files (the !€ words for positive tests, the !$ ones for negative tests, i.e. pairs that
! the parser shall reject.

! Basic usage is: (this paragraph shall be removed, as we want the one in the next paragraph)
! open twolc -utf8. Issue the following commands:
! install-binary bin/twol-sme.bin 
! pair-test-file filename (where "filename" is the name of the file containing the test words)

! Usage (this is what we are aiming at):
! In the testing catalogue, issue one of the commands
! make twol-positive
! make twol-negative
! make twol-test (do both)
! This will extract the test pairs from this file, and print a report for each of the tests.
! The reports will be printed to report files named twol-pos.out and twol-neg.out. The reports
! are finally scanned by another script, which gives a warning if anything unexpected was found.

! We may also use other testfiles than the ones generated from this file (twol-sme.txt file).
! make twol-test TYPE=pos FILE=testfile   (when the file contains positive test pairs)
! make twol-test TYPE=neg FILE=testfile   (when the file contains negative test pairs)
! make twol-test FILE=testfile            (the default is TYPE=pos)
! make twol-test HELP                     (prints out these lines)

! The test cases are of two types:
! - positive tests
! - negative tests
!
! Positive tests are such that they require the pairs to match - if not, the rule (or
! another conflicting rule) is broken. These test pairs should be designed to check that
! the rule allways give the wanted mapping.
!
! Positive tests are marked with a € sign (and as a comment, to not infer with the
! regular rule compilation):
!
!€ áj'gi
!€ ái0gi
!
! Negative tests are pairs that should NOT match. The pairs should be designed such that
! they are likely but illegal pairs, so as to identify possible holes in the rules. Such
! holes will lead to overgeneration, and spurious acceptance of misspelled words, wrong
! analyses, bad generation, etc. Also, errors in the rules can lead to an inefficient
! analyser.
! 
! Negative tests are also very important for regression testing: all bugs found and
! corrected should be added as negative pairs illustrating the bug that was corrected.
! This way, we can always check whether the bugs are still fixed or reintroduced by
! other bug fixes.
!
! Negative tests are marked with a dollar sign:
!
!$ mánnáX5jd
!$ má0ná0jd
!
! You may have more than one test word (pair) on each line, that is, you can have several
! pairs after each other on two lines separated by one or more spaces. This will save
! precious vertical space in the file, and make the rule file easer to read.
!
! The result/output is:
! REJECT
! ACCEPT
! Error
! and will be put into a separate test result file. A final script checks that the test
! result is what it should be, and reports the findings (ok/error(s) found).



! ============================ !
! Here begins the rule section !
! ============================ !

! j rule
! ------

"Postvocalic j Surfacing"
  j:i <=> Vow: ( :0 ) ( Dummy: ) _ [ Cns | ': | ( :0 - Y5: ) (Hyph) #: ] ;

!€ áj'gi
!€ ái0gi
   
!€ mánnáX5jd
!€ má0ná0id

! Added ( :0 ) because of olmmoš !  new version for Troandin-bisma
! All j:i alternation is conflated into one rule. LC is vowel and optional
! (suffixinitial) dummy symbol, RC is consonant, dummy or word boundary,
! The intention is to have the strict operator (<=>), but catch the
! variation with a lot of (=all) contextual alternatives.
! exchanging DummyNotY5 with :0 - Y5: , better luck this time.
! j3:j is the j that does not turn to i in this context. It was added for
! the sake of Budejju and Stálobajjávri, to avoid Budeiju and Stálobaijávri




! Word final consonant alternations
! ---------------------------------


"Word Final Consonant Neutralization"  !smirezit : smires, Troandin-bisma
Cx:Cy <=> Vow: (( CntrCns:) Dummy:+) _ ( :0 - Y5: ) [ Hyph | #: ]  ;
			where Cx in (z ž m h p d g b)
			      Cy in (s š n t t t t t)
			matched ;

!Testcases for the above rule:
!€ smirez#
!€ smires0
   
!€ Troandim#
!€ Troandin0
   
!"Stem Final Consonant Neutralization" !háliidit : háliit
!Cx:Cy <=> Vow: Cns* (Vow*) Vow: ( CntrCns:)  _  #: ; 
!			where Cx in (z ž m h p d g b)
!			      Cy in (s š n t t t t t)
!			matched ;
!
! Old version:
! Cx:Cy <=> Vow: (( CntrCns:) Dummy:+) _ ( :0 - Y5: ) [ Hyph | #: ]  ;
! This one works for all except háliit.
!
! Tentative version:
! Cx:Cy <=> Vow: ( CntrCns:) (Dummy:+) _ ( :0 - Y5: ) [ Hyph | #: ]  ;
! The nested left context was changed because of háliidit - háliit.
! NOTE: there are 454 jd# that come out incorrectly with this version.



"Deletion: Final h s j ž in Contracted Stems"   
  Cx:0 <=> Vow _ [ Y5: | Y6: j: ] ;
			where Cx in (h s j ž) ;
!€ fijdnisY5t
!€ fiidná00t

!$ fijdnisY5t
!$ fiidnás0t

!$ fijdnisY5t
!$ fiidnis0t

"Word Final Cluster Simplification 1"       
  Cy:0 <=> Vow Cx _ (Hyph) #:0  ;
	where Cx in (l r)
	      Cy in (d g) ;
!€ vuordild#
!€ vuordil00

!$ vuordild#
!$ vuordild0

"Word Final Cluster Simplification 2"                 ! attestit : attes
  Cx:0 <=> Vow s _ (Hyph) #:  ;
			where Cx in (t k m) ;
!€ attest#
!€ attes00

!$ attest#
!$ attest0

"Word Final Cluster Simplification 3"                 ! beroštit : beroš
  t:0 <=> Vow š _ (Hyph) #:  ;
!€ berošt#
!€ beroš00

"Word Final Cluster Simplification 4"                 ! bearjadahka : bearjadat
  Cx:0 <=> Vow h: ':0 _ (Hyph) #:  ;
			where Cx in (t k) ;
! Changing bearjadahk to bearjadah'k, adding ':0

!€ bearjadah'k#
!€ bearjadat000

!$ bearjadah'k#     bearjadah'k#     bearjadah'k#     bearjadah'k#     bearjadah'k#   bearjadah'k#
!$ bearjadat0k0     bearjadat'00     bearjadah000     bearjadat'k0     bearjadah0k0   bearjadah'k0


"Word Final Cluster Simplification 5"                 ! bearjadahka : bearjadat
  h:t <=> Vow _ ':0 [t:0 | k:0] (Hyph) #:  ;
! Splitting WFCF 4 into 2 to handle the inserted ':0 symbol.

"Word Final Double Consonant Simplification"          ! muitaluss : muitalus
  Cy:0 <=> Vow Cx: _ (Hyph) #:  ;
			where Cx in (s š d ž)
				Cy in (s š d ž)
			matched ;
!€ muitaluss#
!€ muitalus00


! Consonant gradation rules
! -------------------------


!Now that long double cons. have been analyzed having lexical triple consonants,
!many of the grad. rules of the form ':Cx may be collapsed to a single rule
!without left context: _ Cx Vow: WeG: ; where XXXX matched ; . This has not 
!been done yet (PS 29.11.1993).
! But the long double cons have not been analyzed as triple consonants!

"Gradation: h Loss"                                    ! johka : joga (h:0)
  h:0 <=> _ ': Cy: Vow ( StemCns:) (:StemCns) WeG: ;
			where Cy in (p t k c č) ;
!€ joh'kaX4
!€ jo00ga0
   
!$ joh'kaX4 joh'kaX4 joh'kaX4 joh'kaX4 joh'kaX4 jo0'kaX4 
!$ joh0ga0  jo0'ga0  jo00ka0  joh'ga0  joh0ka0  joh0ga0  
  
   
"Gradation: Prenasal Stops"                            ! sápmi : sámi (p:0)
  Cx:0 <=> _ Cy Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (p t k)
			      Cy in (m n ŋ)
			matched ;
!€ sápmiX4
!€ sá0mi0			

!$ sápmiX4
!$ sápmi0			

"Gradation: tnj"                                       ! latnja : lanja (t:0)
  t:0 <=> _ n j Vow ( StemCns:) (:StemCns) WeG: ;
!€ latnjaX4
!€ la0nja0

"Gradation: dj"                                        ! vuodjit:vuoján
  d:0 <=> Vow: _ ': j Vow ( StemCns:) (:StemCns) WeG: ;
!€ vuod'jiQ4n
!€ vuo00já0n

"Gradation: Double Consonant"                          ! káffe:káfes
  Cx:0 <=> Vow: _ Cy Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (đ f l m n ŋ r s š ŧ v)
			      Cy in (đ f l m n ŋ r s š ŧ v)
			matched ;
!€ káffeX4s
!€ ká0fe0s

"Gradation: šž"
! Cx:Cy <=> Vow: _ X2: Vow ( StemCns:) (:StemCns) ;	! njunnoša:njunnožis
  Cx:Cy  => Vow: _ X2: Vow ( StemCns:) (:StemCns) ;	! njunnoša:njunnožis
		    where Cx in (š)
		          Cy in (ž)
			matched ;
!€ njunnošX2a
!€ njunnož0a




"Gradation: Preaspirated Geminates"                    ! áhkku:áhkus
  Cx:0 <=> h _ Cy Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (k p t c č l r)
			      Cy in (k p t c č l r)
			matched ;
!€ áhkkuX4s
!€ áh0ku0s

"Gradation: Jodded Double Consonants"                       ! viellja:vieljas
  Cx:0 <=> Vow: _ Cy j Vow ( StemCns:) (:StemCns) WeG: ;    ! mannji:manjis
			where Cx in (l d n)                 ! áddjá:ádjás
			      Cy in (l d n)
			matched ; 
!€ vielljaX4
!€ vie0lja0

!€ mannjiX4
!€ ma0nji0

!€ áddjáX4
!€ á0djá0

"Gradation: Cluster Non-nasal Sonorant + Non-sonorant"      ! láj'bi:láibbi
  ':Cx <=> Vow: [ l | r | đ | v | j: ] _ Cz Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (f g d b k p t z ž c č s š)
			      Cz in (f g d b k p t z ž c č s š)
			matched ;
! Added (¤:), evaluate! XXX. (Removed it since it caused CG in some PrsPrc.TO)
!€ láj'biX4
!€ láibbi0

"Gradation: Cluster ŋ + Non-sonorant"                      ! seaŋ'ga:seaŋgga
  ':Cx <=> Vow: ŋ _ Cz Vow ( StemCns:) (:StemCns) WeG: ;   ! boŋ'kit:boŋkkii
			where Cx in ( g k )
			      Cz in ( g k )
			matched ;
!€ seaŋ'gaX4
!€ seaŋgga0
   
!€ boŋ'kiX4j#
!€ boŋkki0i0

"Gradation: Cluster m + Non-sonorant"                       ! lám'pa:lámppas
  ':Cx <=> Vow: m _ Cz Vow ( StemCns:) (:StemCns) WeG: ;    ! rán'ska:ránskkas
			where Cx in (f b p s š t)
			      Cz in (f b p s š t)
			matched ;
! mt : mtt added bec. of ámta:ámttas, although not in grammar. Check norm!
!€ ám'taX4
!€ ámtta0


"Gradation: Cluster n + Non-sonorant"                       ! gán'da:gánddat
  ':Cx <=> Vow: n _ Cz Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (d t z ž c č s š)
			      Cz in (d t z ž c č s š)
			matched ;
!€ gán'daX4
!€ gándda0


"Gradation: Cluster p + t"                                  ! konseap'ta:konseapttat
  ':t <=> Vow: p _ t Vow ( StemCns:) (:StemCns) WeG: ;
! Added because of this word. The pattern is not in the grammar.
!€ konseap'taX4
!€ konseaptta0


"Gradation: Cluster j/v + Liquid"                           ! áj'ru:áirrut
  ':Cx <=> Vow: [ j: | v ] _ Cz Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (l r)
			      Cz in (l r)
			matched ;
!€ áj'ruX4
!€ áirru0


"Gradation: Clusters lv, rj etc."                           ! ol'ju:oljjus
  ':Cx <=> Vow: [ đ | l | r ] _ Cz Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (v j)
			      Cz in (v j)
			matched ;
!€ ol'juX4
!€ oljju0


"Gradation: Clusters tk, tm"                                ! mát'ki:mátkkis
  ':Cx <=> Vow: [ t | ŧ ] _ Cy Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (k m)
			      Cy in (k m)
			matched ;
! ŧ is missing in the grammar. example?
!€ mát'kiX4
!€ mátkki0


"Gradation: Clusters ts, ks"                               ! 
  0:s <=> Vow: [ t | k ] _ s Vow ( StemCns:) (:StemCns) WeG: ;
! I cannot find any such clusters.

"Gradation: Clusters sk, sm etc."                          ! beas'ka:beaskka
  ':Cx <=> Vow: [ s | š ] _ Cz: Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (k p t l m v)
			      Cz in (k p t l m v)
			matched ;
!€ beas'kaX4
!€ beaskka0
   

"Gradation: Cluster vj"                                    ! čoav'ji:čoavjji
  ':j <=> Vow: v _ j Vow ( StemCns:) (:StemCns) WeG: ;
!€ čoav'jiX4
!€ čoavjji0
   

"Gradation: Cluster jv"                                    ! beaj'vi:beaivvit
  ':v <=> Vow: j: _ v Vow ( StemCns:) (:StemCns) WeG: ;
!€ beaj'viX4
!€ beaivvi0
   
"Gradation: ihm, vhl etc."                                 ! dujh'mi:duihmmit
  ':Cx <=> Vow: [ j: | v ] h _ Cy Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (l m n)
			      Cy in (l m n)
			matched ;
!€ dujh'miX4
!€ duihmmi0
   

"Gradation: Clusters lbm, jdn, vdn etc."                   ! čuolbma:čuolmma
  Cx:Cy <=> [ l | j: | v ] _ Cz Vow (Cns) ( StemCns:) (:StemCns) WeG: ;
			where Cx in (b d g )
			      Cy in (m n ŋ)
			      Cz in (m n ŋ)
			matched ;
!€ čuolbmaX4
!€ čuolmma0
   

! "(Cns)" is added. I do not like it. But the rule as it was blocked the 
! "olmmožin" essive of "olmmoš", since the "ž" was neither an underlying
! nor a surface stem consonant, I had to do something. The rule as it stands
! is meaningless, "(Cns)" contains both (StemCns:) and (:StemCns).
! Think through this.


"Gradation: Clusters ldnj, vdnj etc."                      ! sávdnji:sávnnji
  d:n <=> [ l | v ] _ n j Vow ( StemCns:) (:StemCns) WeG: ;
!€ sávdnjiX4
!€ sávnnji0
   

"Gradation: Clusters rbm, rdn rgŋ"                        ! čorbma:čorpma
  Cx:Cy <=> r _ Cz Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (b d g)
			      Cy in (p t k)
			      Cz in (m n ŋ)
			matched ;
!€ čorbmaX4
!€ čorpma0
   

"Gradation: Clusters rdnj"                                 ! skurdnji:skurtnji
  Cx:Cy <=> r _ Cz j Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (b d g)
			      Cy in (p t k)
			      Cz in (m n ŋ)
			matched ;
!€ skurdnjiX4
!€ skurtnji0
   

"Gradation: ist, vsk etc."                                 ! návs'tu:návsttu
  ':Cx <=> Vow: [ j: | v | l | r | m | n ] s _ 
                Cy Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (k t)
			      Cy in (k t)
			matched ;
!€ návs'tuX4
!€ návsttu0
   

"Gradation: mšk, ršk"                                    ! limš'ki:limškki
  ':k <=> Vow: [ m | r ] š _ k Vow ( StemCns:) (:StemCns) WeG: ;
!€ limš'kiX4
!€ limškki0
   

"Gradation: Clusters kc ks etc. 1"                         ! uk'sa:uvssa
  k:v <=> Vow: _ ': Cx Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (t c č s š) ;
!€ uk'saX4
!€ uvssa0
   

"Gradation: Clusters kc ks etc. 2"                         ! uk'sa:uvssa
  ':Cx <=> Vow: k: _ Cy Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (t c č s š)
			      Cy in (t c č s š)
			matched ;

"Gradation: Cluster kst 1"                                 ! teaks'ta:teavstta
  k:v <=> Vow: _ s ': t Vow ( StemCns:) (:StemCns) WeG: ;
!€ teaks'taX4
!€ teavstta0
   

"Gradation: Cluster kst 2"                                 ! teaks'ta:teavstta
  ':t <=> Vow k: s _ t Vow: ( StemCns:) (:StemCns) WeG: ;

"Gradation: bb dd etc.1"                                   ! spábba:spáppat
  Cx:Cy <=> Vow: _ Cz: Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (b d g z ž)
			      Cy in (p t k c č)
			      Cz in (b d g z ž)
			matched ;
!€ spábbaX4
!€ spáppa0
   

"Gradation: bb dd etc.2"                                   ! spábba:spáppat
  Cx:Cy <=> :Cy _ Vow ;
			where Cx in (b d g z ž)
			      Cy in (p t k c č)
			matched ;

"Gradation: dn to tn, etc."                                ! eadni:eatni
  Cx:Cy <=> Vow: _ Cz: Vow ( StemCns:) (:StemCns) WeG: ;
			where Cx in (b d g )
			      Cy in (p t k )
			      Cz in (m n ŋ)
			matched ;
!€ eadniX4
!€ eatni0
   

"Gradation: dnj to tnj"                                    ! boadnji:boatnji
  d:t <=> Vow: _ n j Vow ( StemCns:) (:StemCns) WeG: ;
!€ boadnjiX4
!€ boatnji0
   
			

! Lengthening of consonants
! -------------------------

! This takes place in certain verb forms, e.g. imperative and certain
! nominalisation forms.

"Lengthening of Central Consonants hk etc."                ! boah'tiY1:boahtti
  ':Cy <=> h: _ Cz Vow ( CntrCns:) Len: ;
			where Cy in (p t k c č)
			      Cz in (p t k c č)
			matched ;
!€ boah'tiY1
!€ boahtti0
   
"Lengthening of Central Consonants pm etc."                ! dapmaY1:dabmi
  Cx:Cy <=> Vow: _ Cz Vow ( CntrCns:) Len: ;
			where Cx in (p t k )
			      Cy in (b d g )
			      Cz in (m n ŋ)
			matched ;
!€ dapmaY1
!€ dabmi0
   
"Lengthening of Central Consonants tnj"                    
  t:d <=> Vow: _ n j Vow ( CntrCns:) Len: ;
!€ bitnjuY1
!€ bidnju0
   
"Lengthening of Central Consonants dj"                     ! dad'jaY1:daddji
  ':d <=> Vow: d _ j Vow ( CntrCns:) Len: ;
!€ dad'jaY1
!€ daddji0
   



! Lenition
! --------

"Lenition: Intervocalic Stops and Affricates"              ! joh'kaX4:jo00ga
  Cx:Cy <=> h:0 ':0 _ Vow ;
			where Cx in (k p c č t)
			      Cy in (g b z ž đ)
			matched ;
!€ joh'kaX4
!€ jo00ga0
   

! Here, the k is reduced to g as an automatic result of the h deletion in the
! "Gradation: h loss" rule.


!"Three-part compounding: Consonant geminates"						! giella:giel
! Cx:0 <=> Vow: _ Cy: Vow WeG: ;
! 			where Cx in (l r)
! 				  Cy in (l r) 
!			matched ;

!"Three-part compounding: Consonant geminates II"					! giella:giel
! Vx:0 <=> Vow: Cx Cx _ ;
! 			where Vx in (a e i o u)
! 				  Cx in (l r) ;


!"Three-part compounding: -iv- consonant center"					! oaivi:oai
! v:0 <=> i: _ Vow WeG: ;

!"Three-part compounding: -iv- consonant center II"					! oaivi:oai
! i:0 <=> i: v:0 _ WeG: ;




! Vowel Shortening
! ----------------

! Nouns

! Compounds with long 1st syll

"Allegro Forms in Compounds"                   ! gáv'piX7:gáv0pe
 Vx:Vy <=> Cns:+ _  (¤:)  X7: ;                 ! bassi¤X7:basse REJ
	   where Vx in (i u á )			 ! bassiX7:basse ok
	         Vy in (e o a )
	   matched ;
!€ gáv'piX7
!€ gáv0pe0

!$ bassi¤X7
!$ basse00
! This one is rejected, given that we use ¤ as weakening stopper.
   
!€ bassiX7
!€ basse0


! Overlapping => constraint wrt. 'i:e', Optional Vow Shortening
! After short 1st Syllable
! The ¤: condition was added in order to account for VIVVA nouns.
! First, it was added as optional, with parentheses, but that did not
! work, for some strange reason. Then the parentheses were removed, and to our
! surprise both forms with and without ¤ worked.
! And parantheses in again. Sigh.


!"Optional Vowel Shortening after Short 1st Syllable"
! Vx:Vy => [ (Hyph) #:  | Cns ] [a|i|o|u] [ Cns Cns:+ | j: Cns:+ | h: ': Cns: ] 
!  Vx:Vy => [ (Hyph) #:  | Cns ] [a|i|o|u] [ Cns Cns:+ | h: ': Cns: ] 
!	_ (StemCns:*) [ X7: | X8: ] ;
!	   where Vx in (u i)
!	         Vy in (o e)
!	   matched ;
! Added + to Cns:+ and made StmCns: optional in LC, for biv'du:bivdo
! Onset relevant?


"Optional Shortening of á in Compounds after Long 1st Syllable 1"
  á:a => [ Vow Vow | á ] Cns:+ Cns _ StemCns:* [ X7: | X8: ] ;


"Optional Shortening of á in Compounds after Long 1st Syllable 2"
  á:a => [ (Hyph) #:  | Cns ] Vz Cns+ Cns: Cns+ _ StemCns:* [ X7: | X8: ] ;
	 where Vz in (a i o u) ;

"Vowel lowering for buorre"
 Vx:Vy <=> [ Vow Vow | á ] Cns:+ Cns _ X8: ;
         where Vx in (u i)
	       Vy in (o e)
	         matched ;
! This rule was actually made for one word only, buorre:buoret
! It replaces the missing "| X8:" sequence that is commented out in the
! "Vowel shortening ... 1" rule above. Why X8: does not work there is unclear.
! It seems to work in certain other cases, though.
!€ buorriX7#
!€ buorre00

!€ buorriX8#
!€ buo0re00


!"Vowel Shortening in Vowel-Final Compounds after Long 1st Syllable 1"
!  Vx:Vy <=> [ Vow Vow | á ] Cns:+ Cns: _ X7: ;
!	where Vx in (u i)
!	      Vy in (o e)
!	matched ;
! This rule was difficult. Look at *)footnote 1 below for comments.
! *) footnote 1
! Older, removed versions:
! Vx:Vy <=> [ Vow Vow | á ] Cns:+ Cns: _ StemCns:* X7: ;
! This one gave vuovden# as only possible form of vuovdin in compounds.
! Vx:Vy <=> [ Vow Vow | á ] Cns:+ Cns _ StemCns:* [ X7: | X8: ] ;
! the problem with this one was that it was not restricted to compounds !!
! The X7: | X8: line was commented out since no lexicon in sme-lex.txt
! pointed from X8 to R. This move should be checked for compounds later.
! The testcases are kept here to ensure that its workload is being taken care of.
!€ várriX7gir'ku#
!€ várre0gir0ku0

 
!"Vowel Shortening in Compounds after Long 1st Syllable 2"
!  Vx:Vy <=> [ (Hyph) #:  | Cns ] Vz Cns+ Cns: Cns+ _ StemCns:* [ X7: | X8: ] ;
!	where Vz in (a i o u) ;
!	where Vx in (u i)
!			             Vy in (o e)
!					   matched ;
! XXX Remainder! This rule is commented out since including it
! spoils the i:á alternation of verbs (boahtit:boađán, for some reason.
! This should be looked into.

"Optional Vowel Shortening in Cns-Final Compounds after Long 1st Syllable 1"
  Vx:Vy => [ Vow Vow | á ] Cns:+ Cns: _ StemCns:+ X7: ;
	   where Vx in (u i)                  ! example?
		          Vy in (o e)
				matched ;
! This is for the vuovdin# and vuovden#, if vuovden# exists.
! If vuovden# etc. is not possible, this rule should be removed.

"Vowel Shortening in Compounds of Contract Stems"          
  Vx:Vy <=> [ Vow Vow | á ] Cns:+ Cns: _ StemCns:* X4: X7: ;
	    where Vx in (u i)
	          Vy in (o e)
	    matched ;
! To account for boazoviessu, the u:o alternation does not work above
! The reason is that we have boa'hcuX4viessu, not X4X7, as required here.
! Examples?


!"Compulsory Vowel Shortening after ij"                ! liigi : liigeruđaid
! Vx:Vy <=> [ (Hyph) #:  | Cns ] i j:i Cns:* _ [ X7: | X8: ] ;
!	   where Vx in (u i)
!	         Vy in (o e)
!	   matched ;
! The rule is too general at the moment, since we do not have illu : illosáhka, 
! Now, we have "Cns:*", the earlier version said "': Cns", and that was wrong, 
! it did not give liidni > liidne-. Still, *illo- must be a different problem, 
! since it has short vowel before the consonants. I leave the rule as it is now
! and reconsider the illu case.
!€ lijgiX7#ruh'taX4jd#
!€ liige00ru00đa0id0


"Optional Vowel Shortening in Caritives"
  Vx:Vy => [ (Hyph) #:  | Cns ] [a|i|o|u] Cns:+ _ ( DelCns:) X9: ;
	   where Vx in (u i)
		 Vy in (o e)
	   matched ;
! Hmm. X9 is used only in the DenominalAdjsV lexicon., in front of
! heapmi, huvva, huhtti, hudda.

"Vowel Shortening in Caritives"
  Vx:Vy <=> [ Vow Vow | á ] Cns:+ _ ( DelCns:) X9: ;
	    where Vx in (u i)
	          Vy in (o e)
	    matched ;


! Verbs

"Vowel Shortening in Bisyllabic Sg2 Imperatives and Connegatives" 
  Vx:Vy <=> Cns _ Q6: ;
	    where Vx in (u i)                  ! čuor'vu:čuorvvo
	          Vy in (o e)                  ! boah'ti:boađe
	    matched ;
!€ čuor'vuQ6
!€ čuorvvo0


!€ boah'tiQ6
!€ boa00đe0
   

! Adjectives

"Vowel Shortening in Attributive Forms, V-final Adjectives" ! láj'kiW1s:láikkes
  Vx:Vy <=> Cns:+ _  [ W1: | W2: ] s (Hyph) #:  ;           ! ál'kiW2s:álkes
	    where Vx in (u i)
	          Vy in (o e)
	    matched ;
!€ láj'kiW1s#
!€ láikke0s0
   
!€ ál'kiW2s#
!€ ál0ke0s0
   
                        ! W1 for WeG Attr, W2 for non-CG Attr form.

"Vowel Shortening in Attributive Forms, s-final Adjectives" ! váttisW1:váttes
  Vx:Vy <=> Cns:+ _  s W1: ; ! (Hyph) #:  ;
	    where Vx in (u i)
		  Vy in (o e)
!€ váttisW1#
!€ váttes00
   
		  
	    matched ;			
! The rule now works for all "s W1:" right contexts. This means that ess of
! guorus becomes guorrosin, as required. Check for side-effects.





! Diphtong simplification
! -----------------------



"Diphthong Simplification in i-Stems before Suffixes Beginning with j:"
!  Vx:0 <=> Vow _ Cns:+ [ i: | e1: ] X5: ;
  Vx:0 <=> Vow _ Cns:+ [ i | e1:e ] X5: ;
	where Vx in (e o a) ;          ! goah'tiX5jd:go0điid
!€ goah'tiX5jd
!€ go000đi0id

"Diphthong Simplification in Actor Nouns from i- and a-Stems"	
! vieh'ki > vihkkiin
  Vx:0 <=> Vow _ Cns:+ [ i: | a: ] ¤: X5: ;			! Western and norm
			where Vx in (e o a) ;

"Diphthong Simplification in Actor Nouns from i- and a-Stems (Optional)" ! vieh'ki > vihkkiin
  Vx:0 => Vow _ Cns:+ [ i: | a: ] ¤: X5: ;				  !	      viehkkiin
			where Vx in (e o a) ;				  ! Eastern, substandard
!€ vieh'ki¤X5jn
!€ vi0hkki00in
! Restored.

"Diphthong Simplification in Certain Forms from u-Stems"
  Vx:0 <=> Vow _ Cns:+ [ u: | o1: ] 
                         [ X2: | X3: | (DelCns:) X6: | Q8: | Y5: | Y6: ] ;
			where Vx in (e o a) ;

"Diphthong Simplification in Actor Nouns from u-Verbs (Optional)"
  Vx:0 => Vow _ Cns:+ u: ¤: [ X2: | X3: | X6: ] ;
			where Vx in (e o a) ;

"Diphthong Simplification in Diminutives etc. from Trisyllabics with 2nd Syll u/o"
  Vx:0 <=> Vow _ Cns:+ [ u: | o1: ] ( NonMPDummy:) Cns:+ X2: ;
			where Vx in (e o a) ;

"Diphthong Simplification: Conditional in -alla- etc. Derivatives from Trisyllabics"
  Vx:0 <=> Vow _ Cns:+ u:o ( NonMPDummy:) Cns:+ X1: ;
			where Vx in (e o a) ;

"Diphthong Simplification in IllSg and Certain Conjug. Forms of a-Stems"
  Vx:0 <=> Vow _ Cns:+ a: [ X3: | Q2: | Q3: | Y7: ] ;
			where Vx in (e o a) ;

"Diphthong Simplification in Certain Conjugational Forms of i- and u-Stems"
  Vx:0 <=> Vow _ Cns:+ HighVow: [ Q2: | Q3: | Q7: | Y7: ] ;
			where Vx in (e o a) ;

"Diphthong Simplification: Optional before Deverbal -alla-, -adda-, -us"
  Vx:0 => Vow _ Cns:+ o1: ( NonMPDummy:) Cns:+ X1: ;
			where Vx in (e o a) ;

"Diphthong Simplification in u-Stems before Conditional Marker"
  Vx:0 => Vow _ Cns:+ u: Q5: ;
			where Vx in (a e o) ;

"Dipthtong simplification in the attribute forms of AD-adjectives"
  Vx:0 <=> Vow _ Cns:+ Vow [ Y9: | X9: ] ;
		       where Vx in (a e o) ;


! Vowel Rising
! ------------

"Vowel Rising"
  Vx:Vy <=> Vow: Cns:+ _ ( CntrCns:0 ) ( Dummy:+) j:i ;
			where Vx in (e o)
			      Vy in (i u)
			matched ;


! Metaphony 
! ---------

"General Metaphony"
  Vx:Vy <=> Cns _ Cns:* [ X2: | X6: ] ;
			where Vx in (i e1 u)
			      Vy in (á á o)
			matched ;

"Metaphony in Derivatives -us, -alla, -adda 1"
  u:o <=> Cns _ ( NonMPDummy2:) Cns:+ X1: ;
! Here I have a new set, NonMPDummy2, without X7 and X8, to avoid clash with
! the allegro shortening rule. Check for alternative solutions !!!

"Metaphony in Derivatives -us, -alla, -adda 2"
  Vx:á <=> Cns _ ( NonMPDummy2:) Cns:+ X1: ;
			where Vx in (i e1) ;

"Illative Singular Metaphony"
  Vx:Vy <=> Cns _ X3: ;
			where Vx in (i a e1)
			      Vy in (á i á )
			matched ;

"Metaphony in Px Contexts of Actor Nouns of i-, a-, and u-Verbs"
Vx:Vy <=> Cns _ ¤: [ X2: | X6: ] ;
			where Vx in (i a u)
			      Vy in (á á o)
			matched ;

"Metaphony in Illative of Actor Nouns of i-, a-, and u-Verbs"
Vx:Vy <=> Cns _ ¤: X3: ;
		       where Vx in (i a )
			     Vy in (á á )
		       matched ;

!"Metaphony in Actor Nouns of i-, a-, and u-Verbs"
!  Vx:Vy <=> Cns _ ¤: [ X2: | X3: | X6: ] ;
!			where Vx in (i a ) !u)
!			      Vy in (á á ) !o)
!			matched ;

"Metaphony in MUSH-Derivatives"
  i:á => Cns _ m: u: š: š: ;

"Potential Marker Metaphony"
  Vx:Vy <=> Cns _ Q7: ;
			where Vx in (i u)
			      Vy in (e o)
			matched ;


! Stem vowel alternations
! -----------------------

"Stem Vowel in Contracted Stems"                ! fijdnisY5t:fiidnát
  Vx:Vy <=> Cns _ ( CntrCns:) Y5: ;
			where Vx in (i a u)
			      Vy in (á á o)
			matched ;
!€ fijdnisY5t
!€ fiidná00t
   

"Stem Vowel before Frequentative d"             ! oažžut:oččodit
  Vx:Vy <=> Cns _ Q8: ;                         ! coahkut:coagostit
			where Vx in (i u)
			      Vy in (a o)
			matched ;
! Note that this rule also triggers other contexts than frequentative -d-
!€ oažžuQ8dit
!€ o0ččo0dit
   
!€ coah'kuX8stit
!€ coa00go0stit
   
!"Stem Vowel before Frequentative l"
!  i:a <=> Cns _ Q9: ;
! This rule is not implemented, there is no Q9 in the sme-lex.txt file (yet).

!"Stem Vowel before Reflexive s"
!  Vx:Vy <=> Cns _ Y8: ;
!			where Vx in (i u)
!			      Vy in (á a)
!			matched ;
! This rule is not implemented, there is no Y8 in the sme-lex.txt file (yet).

"Indicative Present Singular 3rd Final Vowel"      ! jearraQ1:jearrá
  Vx:á <=> Cns _ Q1: ;                             ! boahtiQ1:boahtá
			where Vx in (a i) ;
!€ jearraQ1
!€ jearrá0
   
!€ boah'tiQ1
!€ boah0tá0
   

"Imperative Present 1st/3rd Person and Connegative Final Vowel"
  Vx:o <=> Cns _ Q3: ;                             ! jearraQ3n:jerron
			where Vx in (a i u) ;      ! boahtiQ3n:bohton
                                                   ! čuorvuQ3n:čurvon
!€ jearraQ3n
!€ je0rro0n
   
!€ jearraQ2t
!€ je0rre0t

!€ boah'tiQ3n
!€ bo0h0to0n
   
!€ čuor'vuQ3n
!€ ču0r0vo0n
   

"Stem Vowel Shift a:e, i:e, u:o"                   ! jearra:jerre
  Vx:Vy <=> Cns _ Q2: ;                            ! boahtit:bohtet
			where Vx in (a i u)        ! čuorvu:čurvo
			      Vy in (e e o)
			matched ;
! This is for Prs Du1, Pl3, and 2nd Person Imperative
!€ jearraQ2
!€ je0rre0
   
!€ boah'tiQ2t
!€ bo0h0te0t
   
!€ čuor'vuQ2
!€ ču0r0vo0
   

"Stem Vowel in 1st and 2nd Person Singular Present" ! boah'ti:boađán
  i:á <=> Cns _ Q4: ;
!€ boah'tiQ4n
!€ boa00đá0n
   

"Stem Vowel before Conditional Marker"              ! boahtit:boađálin
   i:á <=> Cns _ Q5: ;
!  Vx:Vy <=> Cns _ Q5: ;                            ! The u:o alternation
!			where Vx in (u i)           ! removed because it gave
!			      Vy in (o á)           ! *čuorvvolin, but Nickel
!			matched ;                   ! gives čuorvvulin.
!€ boah'tiQ5lin
!€ boa00đá0lin
   

"Stem Vowel in Dual 2nd Person Imperative"          ! jearra:jearri
  a:i <=> Cns _ Y1: ;                                  
!€ jearraY1
!€ jearri0
   

"Stem Vowel in Present Participials from i-Verbs"
 a:i <=> Cns _ ¤: [ X1: | X4: | X5: | X7: | X8: | (Hyph) #: | s | n ] ;
! a:i <=> Cns _ ¤: [ X1: | X4: | X5: | X7: | X8: | (Hyph) #:  ] ;
! The problem with the old one was that it didn't trigger for Essive and for 
! the Px forms of the nominative.
! The new one isn't perfect, the s and n are rather quasi for Ess and Px.

"Stem Vowel in Dual 1st Person Imperative"             ! jearra:jearru
  Vx:u <=> Cns _ Y2: ;                                 ! boah'ti:boahttu
			where Vx in (a i) ;
!€ jearraY2
!€ jearru0
   
!€ boah'tiY2
!€ boahttu0
   

"Stem Vowel in Plural 2nd Person Imperative"          
!  Vx:Vy <=> Cns _ Q2: ;                               ! boah'ti:bohtet
   Vx:Vy <=> Cns _ Y3: ;                               ! čuor'vu:čurvot
			where Vx in (a i u)
			      Vy in (e e o)
			matched ;
! Q2 context eplaced by other rule for both imperative and other categories
!€ jearraQ2t
!€ je0rre0t

!! boah'tiY4t ! It seems it should be Q3.
!€ boah'tiQ3t
!€ bo0h0to0t
   
!! čuor'vuY4t ! Q2, it seems.
!€ čuor'vuQ2t
!€ ču0r0vo0t
   
"Stem Vowel in Imperative Plural 1st Person and Passive Stem"
  Vx:o <=> Cns _ [ Y4: | Y7: ] ;                       ! jearra:jerrot
			where Vx in (a i u) matched ;  ! boah'ti:bohtot
                                                       ! čuor'vu:čurvot
!€ čuor'vuQ2t
!€ ču0r0vo0t
   


"Stem Vowel in Past Tense of Derived Passive Stem"
  Vx:u <=> Cns _  Y7: Y6: j: ;                      ! jearra  > jerro:jerrui
			where Vx in (a i) matched ; ! loikat  > loikot:loikui
						    ! 

! Special word final consonants
! -----------------------------

"Word Final Deletion of n2 m2 g2 h2"                   ! beatnag2:beana
  Cx:0 <=> Vow _ [ X4: | X8: | X6: Cns: | X9: ] ;      ! luopmán2:luomi
			where Cx in (DelCns) matched ; ! giellum2:gielu
!€ beatnag2X4
!€ bea0na00
   
!€ luopmin2X4
!€ luo0mi00
   
!€ giellum2X4
!€ gie0lu00
   


"Word Final Neutralization of g2, h2, m2"              
  Cx:Cy <=> Vow _ [ X2: | X7: ] (Hyph) #:  ;
			where Cx in (g2 h2 m2)
			      Cy in (t  t  n )
			matched ;
!€ 
!€ 




! Appendix: Deleted rules that still need attention
! -------------------------------------------------



! *) footnote 1
! Older, removed versions:
! Vx:Vy <=> [ Vow Vow | á ] Cns:+ Cns: _ StemCns:* X7: ;
! This one gave vuovden# as only possible form of vuovdin in compounds.
! Vx:Vy <=> [ Vow Vow | á ] Cns:+ Cns _ StemCns:* [ X7: | X8: ] ;
! the problem with this one was that it was not restricted to compounds !!
! The X7: | X8: line was commented out since no lexicon in sme-lex.txt
! pointed from X8 to R. This move should be checked for compounds later.
 
!"Vowel Shortening in Compounds after Long 1st Syllable 2"
!  Vx:Vy <=> [ (Hyph) #:  | Cns ] Vz Cns+ Cns: Cns+ _ StemCns:* [ X7: | X8: ] ;
!			where Vz in (a i o u) ;
!			where Vx in (u i)
!			      Vy in (o e)
!			matched ;
! XXX Remainder! This rule is commented out since including it
! spoils the i:á alternation of verbs (boahtit:boađán, for some reason.
! This should be looked into.
