# ===========================
# NORTHERN SÁMI DISAMBIGUATOR 
# ===========================

DELIMITERS = "<.>" "<!>" "<?>" ;

# ====
# Tags
# ====

LIST <s> = (<s>); LIST </s> = (</s>); # end and beg. of clause.

LIST WORD = N A Adv V Pron CS CC Adp Po Pr Interj Pcle Num ; # any word



# Atomic tags
# (is there a better way of doing this?)

LIST N = N ; LIST A = A ; LIST Adv = Adv ; LIST V = V ; LIST Pron = Pron ;
LIST CS = CS ; LIST CC = CC ; LIST Adp = Adp ; LIST Po = Po ; LIST Pr = Pr ;
LIST Interj = Interj ; LIST Pcle = Pcle ; LIST Num = Num ; LIST Prop = Prop ;
LIST Pers = Pers ; LIST Dem = Dem ; LIST Interr = Interr ;
LIST Refl = Refl ; LIST Recipr = Recipr ; LIST Rel = Rel ;
LIST Indef = Indef ;

LIST Ess = Ess ; LIST Sg = Sg ; LIST Pl = Pl ;
LIST Nom = Nom ; LIST Gen = Gen ; LIST Acc = Acc ; LIST Ill = Ill ;
LIST Loc = Loc ; LIST Com = Com ;

LIST isuf = isuf ; LIST asuf = asuf ; LIST Cmpnd = Cmpnd ;

LIST PxSg1 = PxSg1 ; LIST PxSg2 = PxSg2 ; LIST PxSg3 = PxSg3 ; LIST
PxDu1 = PxDu1 ; LIST PxDu2 = PxDu2 ; LIST PxDu3 = PxDu3 ; LIST PxPl1 =
PxPl1 ; LIST PxPl2 = PxPl2 ; LIST PxPl3 = PxPl3 ;

LIST Comp = Comp ; LIST Superl = Superl ;

LIST Clt = Clt ; LIST Attr = Attr ; LIST Card = Card ;

LIST Pass = Pass ; LIST Ind = Ind ; LIST Prs = Prs ; LIST Prt = Prt;
LIST Pot = Pot ; LIST Cond = Cond ; LIST Imprt = Imprt ;

LIST Sg1 = Sg1 ; LIST Sg2 = Sg2 ; LIST Sg3 = Sg3 ; LIST Du1 = Du1 ;
LIST Du2 = Du2 ; LIST Du3 = Du3 ; LIST Pl1 = Pl1 ; LIST Pl2 = Pl2 ;
LIST Pl3 = Pl3 ;
LIST Inf = Inf ; LIST Act = Act ; LIST Ger = Ger ; LIST ConNeg =
ConNeg ; LIST Neg = Neg ; LIST ImprtII = ImprtII ; LIST PrsPrc =
PrsPrc ; LIST PrfPrc = PrfPrc ; LIST Sup = Sup ; LIST VGen = VGen ;
LIST VAbess = VAbess ; LIST Actio = Actio ; LIST Actor = Actor ;

LIST ABBR = ABBR ; LIST CLB = CLB ; LIST PUNCT = PUNCT ;

LIST adda = adda ; LIST alla = alla ; LIST d = d ; LIST eaddji = eaddji ;
LIST eamos1 = eamos1 ; LIST eapmi = eapmi ; LIST g = g ;
LIST geahtes = geahtes ; LIST h = h ; LIST asti = asti ; LIST heapmi = heapmi ;
LIST hudda = hudda ; LIST huhtti = huhtti ; LIST huvva = huvva ; LIST j = j ;
LIST l = l ; LIST las1 = las1 ; LIST ahtti = ahtti ; LIST s1 = s1 ;
LIST meahttun = meahttun ; LIST mus1 = mus1 ; LIST st = st ;
LIST stuvva = stuvva ; LIST us = us ; LIST vuohta = vuohta ;
LIST goahti = goahti ; LIST lágan = lágan ; LIST Dimin = Dimin ;

LIST mii = "mii" ; LIST go = "go" ; LIST <leai> = "<leai>" ;
#SET okta = "<okta>";
# These single-word sets do not work.


# Tag sets
# ========

# Derivational affixes
# --------------------

SET V-DER = adda | alla | d | g | h | asti | hudda | huhtti | huvva |
j | l | ahtti | st | stuvva | goahti ;

SET N-DER = eaddji | eamos1 | eapmi | heapmi | s1 | mus1 | us | vuohta ;

SET A-DER = geahtes | lágan | las1 | meahttun ;

SET DER = V-DER | N-DER | A-DER ;

# Nominal sets
# ------------

SET ADVLCASE = (Ill)|(Loc)|(Com)|(Ess);
SET PRE-NP-HEAD = (Pron Pers Gen)|(Pron Dem)|(A);
SET NON-PRE-NP-HEAD = WORD - PRE-NP-HEAD ; 

# Noun sets
# ---------

SET N-SG = (N Sg); SET N-PL = (N Pl) ;
SET N-SG-NOM = (N Sg Nom); SET N-PL-NOM = (N Pl Nom);
SET N-NOM = (N Nom) ; SET N-GEN = (N Gen);

SET N-DER-SG-NOM = (N-DER N Sg Nom) ;
SET N-DER-PL-NOM = (N-DER N Pl Nom) ;
SET LEX-N = N - N-DER;

SET PROP = (N Prop);
SET CNOUN = (N) - (Prop);

# Verb sets
# ---------

SET V-IND-FIN = Prs | Prt ;

SET V-SG1 = (V Ind Prs Sg1)|(V Ind Prt Sg1)|(V Cond Prs Sg1)|
            (V Cond Prt Sg1)|(V Pot Prs Sg1) ; 
SET V-SG2 = (V Ind Prs Sg2)|(V Ind Prt Sg2)|(V Cond Prs Sg2)|
            (V Cond Prt Sg2)|(V Pot Prs Sg2) ; 
SET V-SG3 = (V Ind Prs Sg3)|(V Ind Prt Sg3)|(V Cond Prs Sg3)|
            (V Cond Prt Sg3)|(V Pot Prs Sg3) ; 
SET V-DU1 = (V Ind Prs Du1)|(V Ind Prt Du1)|(V Cond Prs Du1)|
	    (V Cond Prt Du1)|(V Pot Prs Du1) ; 
SET V-DU2 = (V Ind Prs Du2)|(V Ind Prt Du2)|(V Cond Prs Du2)|
	    (V Cond Prt Du2)|(V Pot Prs Du2) ; 
SET V-DU3 = (V Ind Prs Du3)|(V Ind Prt Du3)|(V Cond Prs Du3)|
	    (V Cond Prt Du3)|(V Pot Prs Du3) ; 
SET V-PL1 = (V Ind Prs Pl1)|(V Ind Prt Pl1)|(V Cond Prs Pl1)|
            (V Cond Prt Pl1)|(V Pot Prs Pl1) ; 
SET V-PL2 = (V Ind Prs Pl2)|(V Ind Prt Pl2)|(V Cond Prs Pl2)|
            (V Cond Prt Pl2)|(V Pot Prs Pl2) ; 
SET V-PL3 = (V Ind Prs Pl3)|(V Ind Prt Pl3)|(V Cond Prs Pl3)|
            (V Cond Prt Pl3)|(V Pot Prs Pl3) ; 

SET LEAN = ("leat" V Ind Prs Sg1)|("leat" V PrfPrc);
SET LEAI = ("leat" V Ind Prt Sg3)|("leat" V Imprt Prs Sg3);
SET LEAT = ("leat" V Ind Prs Pl1)|("leat" V Ind Prs Pl3)|
           ("leat" V Ind Prs Sg2)|("leat" V Inf)|
           ("leat" V Ind Prs ConNeg);
SET LIVCCE = ("leat" V Cond Prs Sg3)|("leat" V Cond Prs Pl3)|
             ("leat" V Cond Prs ConNeg);
SET LEA = ("leat" V Ind Prs Sg3);

SET LEAT-FIN-COP = ("leat" V Ind)|("leat" V Imp)|("leat" V Cond)|
                   ("leat" V Pot);
SET LEAT-COP = ("leat" V );
#SET LEAT-COP = LEAT | LEAN | LEA | LEAI | LIVCCE ;

SET VERB = (V) - ( V N ); # V is all readings with a V tag in them, VERB should
                        # be the ones withoud an N tag following the V
SET V-IND-FIN-NON-COP =  V-IND-FIN - LEAT-COP  ;
SET V-NON-COP = VERB - LEAT-COP ;
SET LEX-V = VERB - V-DER;

SET V-DER-PASS = V + V-DER + Pass;
SET V-PASS = V + Pass - V-DER;



# Pronoun sets
# ------------

SET PRON-SG1-NOM = (Pron Pers Sg1 Nom);
SET PRON-SG2-NOM = (Pron Pers Sg2 Nom);
SET PRON-SG3-NOM = (Pron Pers Sg3 Nom);
SET PRON-DU1-NOM = (Pron Pers Du1 Nom);
SET PRON-DU2-NOM = (Pron Pers Du2 Nom);
SET PRON-DU3-NOM = (Pron Pers Du3 Nom);
SET PRON-PL1-NOM = (Pron Pers Pl1 Nom);
SET PRON-PL2-NOM = (Pron Pers Pl2 Nom);
SET PRON-PL3-NOM = (Pron Pers Pl3 Nom);

SET PRON-PL-LOC = (Pron Pers Pl1 Loc)|(Pron Pers Pl2 Loc)|(Pron Pers Pl3 Loc);

SET MII-INTERR = ("mii" Pron Interr Sg Nom);
SET MII-PERS = ("mun" Pron Pers Pl1 Nom);
SET SII = ("son" Pron Pers Pl3 Nom);
SET DON = ("don" Pron Pers Sg1 Nom);

SET DEM-SG = (Pron Dem Sg Nom); SET DEM-PL = (Pron Dem Pl Nom);

# Adjective sets
# --------------

SET A-ADV = ( A Adv ) ;
SET A-ATTR = ( A Attr) ;

SET LEX-A = A - A-DER;

# Sets for closed classes
# -----------------------
#SET PPOS = Adp | Po | Pr ;
SET PPOS = (Adp) | (Po) | (Pr) ;

# Miscellanious sets
# ------------------

LIST COMMA = "<,>" ;
SET MANGA = ("mán1ga")|("galle") ;
#LIST Don = "<Don>"; # ??
SET Don-PRON = ("don" Pron);


SET NUMERALS = (Num) - ("okta");
SET COMP = (Pron Interr);

# ====================
# Disambiguation rules
# ====================
# ===================================
# One-cohort disambiguation - cycle 0
# ===================================

CONSTRAINTS

# Proper nouns
# ------------

REMOVE (Prop Pl) IF (0 (Prop Sg)); # Marit N Sg, not Mari+t Nom Pl

# Lexicalised adverbs
# -------------------
REMOVE (A Adv) IF (0 (Adv - A )) ;#REMOVE A-ADV IF ( 0 Adv ) ;

# Lexicalised derivations
# -----------------------

REMOVE N-DER IF (0 LEX-N); # SELECT instead of REMOVE if one wants to
REMOVE A-DER IF (0 LEX-A); # investigate word structure
REMOVE V-DER IF (0 LEX-V); # THIS IS PROBABLY TOO STRONG, MSC may differ

REMOVE V-DER-PASS IF (0 V-PASS);
# It might be that this one is no longer needed.

# Lexicalised p-positions
# -----------------------

REMOVE (N) IF (0 Po OR Pr OR Adp); # dan várás, dan

# ====================================
# Local disambiguation - cycles 1 and 2
# ====================================

# ---------------------------------------------------------
# Cycle 1a: cases that will be needed in careful mode later
# ---------------------------------------------------------

# The idea with cycle 1a is to disambiguate cases that are judged as easier and
# more secure than later cases, and that at the same may be used as context
# for other rules in later cycles.



CONSTRAINTS


# Personal pronouns
# =================

SELECT (Pers) IF (*-1 V-SG3)(0 (Pron Pers Sg3 Nom)); # leago son? (not Pcle)
SELECT (Pers) IF (*1 V-SG3)(0 (Pron Pers Sg3 Nom));  # de son lea.(not Pcle)

SELECT (Pers) IF (*-1 V-SG2)(0 (Pron Pers Sg2 Nom)); # leatgo don  (not dem)
SELECT (Pers) IF (*1 V-SG2)(0 (Pron Pers Sg2 Nom));  # de don leat (not dem)

# Px constraints
# ==============

# First select some clear Px cases
# Let these come directly after local disamb


SELECT (PxSg1) IF (-1 V-SG1) (-2 PRON-SG1-NOM);
SELECT (PxSg2) IF (-1 V-SG2) (-2 PRON-SG2-NOM);
SELECT (PxSg3) IF (-1 V-SG3) (-2 PRON-SG3-NOM);

# Certain verb forms
# ==================

# Pret Sg2
# --------

SELECT (V Ind Pret Sg2) IF (*-1 (Pron Pers Sg2 Nom));
SELECT (V Ind Pret Sg2) IF (*-1 (Pron Pers Sg2 Nom));

# ----------------------------------------------------------------
# Cycle 1b: removing the readings that were left from the 1a rules
# ----------------------------------------------------------------

CONSTRAINTS

# Removing all remaining Px
REMOVE (PxSg1) ; # IF (0 Ess); # yes, kill'em all
REMOVE (PxSg2) ; # IF (0 Pl);
REMOVE (PxSg3) ; # IF (0 Loc);
# Note: Perhaps rather allow Px only for some key nouns (mother, father, etc).

# Removing remaining Prt Sg2 (philosophy: these are not pro-drop)
REMOVE (V Ind Prt Sg2) IF (NOT -1 (<s>)) (NOT 0 (Clt));
# Proseassas láhc1c1ojuvvojit dilálas1vuod1at nu, ahte 
# fertejitgo dahkat dan?


# --------------------------------------------
# Cycle 2: Other cases of local disambiguation
# --------------------------------------------

CONSTRAINTS

# This is the main part of the local disambiguation.
# Here we go through the grammar in a systematic way.
# Cases that should be handled before or after the main disambiguation, will be
# taken care of in cycoes before or after this one.


# Disambiguating nouns
# ====================


# Proper nouns
# ============


SELECT (Prop) IF (NOT -1 (<s>));
# Capitalised nouns in the middle of a sentence are names.

# Noun or not?
# ============

SELECT (N) IF (-1C (A Attr)); # c1uovvovas1 sajis
SELECT (N) IF (-2C (N)) (-1 CC) (NOT 1 N OR A); # Mánát ja nuorat leat...
SELECT (N) IF (1 Po); # sápmelac1c1aid birra.
SELECT (N) IF (1 COMMA)(2 (Pron Interr)); # Doaimmat, maiguin... #too spec.


# Case disambiguation
# ===================


# Gen
# ===

# Genitive as complement
# ----------------------

# Genitive in front of postposition
SELECT (Gen) IF (1 Po) ;  # nieidda vuod1ul
SELECT (Gen) IF (1 Adp) ; # nieidda birra

# Genitive after quantifier
SELECT (Gen) IF (-1 NUMERALS OR MANGA); #Golbma nieidda, mán1ga nieidda

# Genitive as specifier
# ---------------------

# Genitive in front of noum in the beginning of a sentence
SELECT (Gen) IF (-1 CLB) (1 N); # Nieidda girji lea ruoksat
REMOVE (Acc) IF (-1 (<s>))(1 (N Gen) OR (Attr) OR PPOS) ; # Mu birra don humat.

# Genitive in front of the final word in the sentence
#SELECT (Gen) IF (0 CNOUN OR (Pron Pers))(1 N)(2 CLB); # Oainnán du biilla.
SELECT (Gen) IF (0 (N))(1 N)(2 CLB); # Oainnán nieidda biilla.

# Strange rule
SELECT (Gen) IF (NOT -1 V)(NOT 0 A OR (Prop) OR ("don"))(1 N) (NOT 2 Po);
# NOT A bec. of addit., NOT Prop bec. of firstname lastname sequences.



# CONSTRAINTS # trying t sequentiate the gen and acc rules
# perhaps not needed.

# Acc
# ===

# Accusative between Aux and main verb
# ------------------------------------
SELECT (Acc) IF (-1 V-IND-FIN) (1 Inf); # Od1astus addá vejolasvuod1a geavahit

# Accusative at the end of the sentence
# -------------------------------------
SELECT (Acc) IF (-1 V-NON-COP) (1 CLB)(2 (</s>)); # Hmm, evaluate..
SELECT (Acc) IF (-2 V-NON-COP) (-1 (Adv) OR ADVLCASE)(1 CLB)(2 (</s>));
        ## Áhc1c1i lea oastán munnje sabehiid.

#SELECT (Acc) IF (*-1 V-NON-COP BARRIER (Pron Pers Nom) OR PPOS);

REMOVE (Acc) IF (NOT *-1 V-NON-COP)(NOT *1 V-NON-COP); #Need a verb for an obj.

# Nom
# ===

# Nominative in titles and sentence fragments
# - - - - - - - - - - - - - - - - - - - - - -

# A single word is nominative
SELECT (Nom) IF (-1 (<s>))(0 (N))(1 (</s>)); # Sisdoallu

# Nominative subjects
# - - - - - - - - - -

# Find the subject, and assume it is nominative
SELECT (Nom) IF (-1 CS)(0 Sg)(1 V-SG3); # ahte plána movttiidahttá...
SELECT (Nom) IF (-1 CS)(0 Pl)(1 V-PL3); # ... and in pl..

# Nominative predicates
# - - - - - - - - - - -

# Predicatives are in nominative
SELECT (Nom) IF (-2 (Nom) OR (Ind) )(-1 ("leat"))(1 (</s>)); # Mun lean Bond.
SELECT (Nom) IF (-2 (Nom) OR (Ind))(-1 ("leat"))(1  (Prop))(2 (</s>));
SELECT (Nom) IF (-3 (Nom) OR (Ind))(-2 ("leat"))(-1 (Prop) OR (ABBR))(1 (</s>));
 # Mun lean James Bond. # Mun in leat James Bond.
 # Again, these rules are too specific. Need empirical data to enlarge them.


# Unclassified
# - - - - - -

SELECT (Nom) IF (-1 Gen)(0 N-SG-NOM)(1 V-SG3);
# HMM, brave..
# Note that the tag is selected, the set is in the condition.



# Nominative if two names in a row
SELECT (Nom) IF (-1 PROP) (0 PROP) (1 V-SG3); # Biret Anne galgá...


# Rules for disambiguation around conjunctions
# --------------------------------------------

SELECT (Nom) IF (-2 N-NOM) (-1 CC) (NOT 1 Gen); # Trond ja Kirsti leat ...

SELECT (Nom) IF (-2 (Nom Cmpnd)) (-1 CC);
SELECT (Gen) IF (-2 (Gen Cmpnd)) (-1 CC);
SELECT (Acc) IF (-2 (Acc Cmpnd)) (-1 CC);


# ComSg
# =====

SELECT (Com) IF (0 Prop); # assuming proper names come in sg

SELECT (Com) IF (-1 (Dem Sg Com));         # dainna biillain
SELECT (Com) IF (-2 (Dem Sg Com))(-1 Adv); # dainna biillain

# LocPl
# =====

SELECT (Loc) IF (-1 (Dem Pl Loc));         # dain biillain
SELECT (Loc) IF (-2 (Dem Pl Loc))(-1 Adv); # dain biillain
# Not too elegant, the rule set might be done more general with a barrier

SELECT (Loc) IF (1 ("gos"));           # guovlluin gos sámit ásset
SELECT (Loc) IF (1 COMMA)(2 ("gos"));  # guovlluin, gos sámit ásset
                                       # make this one more general
# Disambiguating verbs
# ====================

# Finite forms
# ============

# Indicative Negative
# -------------------
  # Unique are Sg1, Sg3, Du1, Du2, Du3, Pl1, Pl2, Pl3
  # hom: "it", where Sg2 = ABBR.

# Select Neg Sg2 instead of ABBR
REMOVE (ABBR) IF (*-1 (ConNeg))(0 (Neg)); # Dat don deat it. # äh, bad WO 
REMOVE (ABBR) IF (0 (Neg))(*1 (ConNeg));  # Don it leat dál.

# Indicative Present
# ------------------

# Sg1
# ---
  # Sg1 = PtcPrf (copula)
  # Sg1 = V Act (even)

SELECT (Sg1) IF (0 LEAN) (1 PrfPrc); # Mun lean boahtán.
SELECT (Sg1) IF (*-1 (Pers Pron Sg1 Nom) BARRIER (V Neg)); # Mun ferten lohkat.

# This homonymy is solved by rules selecting PrfPrc.
# Note: We will need a rule selecting Sg1. # Mun muitalan Suoma birra.

# Sg2
# ---
  # Sg2 = Inf (even syllables, copula)
  # Note the homonymy with derived verbs (jearat = jearadit + ...

SELECT (Sg2) IF (0 LEAT) (-1 PRON-SG2-NOM); # no hits

SELECT (Sg2) IF (*-1C (Pron Pers Sg2 Nom)); # fertetgo don vuolgit?
SELECT (Sg2) IF ( *1C (Pron Pers Sg2 Nom)); # de, don fertet vuolgit.

# Sg3
# ---
  # Sg3 = ConNeg (even)
  # Sg3 = ConNeg = Imprt Sg2 (contracted)
  # Disambiguating Prs Sg3 is taken care of by rules removing the other 
  # readings whenever their conditions are not fulfilled.

# Du1
# ---
  # Du1 = Prt Pl3

REMOVE (Pl3) IF (0 Sg3) (-1 (N Sg Nom)); # Dokumeanta c1ilge, mo...

SELECT (DU1) IF (*-1  PRON-DU1-NOM BARRIER PRON-PL1-NOM OR PRON-PL1-NOM OR CLB);
SELECT (Du1) IF (1 Pcle) (2 PRON-DU1-NOM); # jerre go moai # no hits
# SELECT (Du1) IF (-1 PRON-DU1-NOM); # moai jerre # no hits

### Du2, unique, no rules needed

# Du3 
  # Du3 = PrsPrc Clt = Imprt Prs Du2 Clt

# Pl1
# ---
  # Pl1 = Inf for all stem classes
  # Pl1 = Inf = Pl3 = Prt Sg2 for odd syll
  # Pl1 = Inf = Pl3 = Sg2 = ConNeg (copula)

SELECT (Pl1) IF (*-1C PRON-PL1-NOM BARRIER PRON-PL3-NOM OR PRON-DU1-NOM OR CLB);

SELECT (Pl1) IF (-1 MII-PERS);

### Pl2 unique, no rules needed

# Pl3
# ---

SELECT (Pl3) IF (0 LEAT) (-1 (Pl Loc)); # Mis leat
SELECT (Pl3) IF (0 LEAT) (-1 (Du Loc)); # Munnos leat

SELECT (Pl3) IF (*-1  PRON-PL3-NOM BARRIER PRON-PL1-NOM OR PRON-DU1-NOM OR CLB);
SELECT (Pl3) IF (-1 Adv) (1 N-NOM)(2 CC)(3 N-NOM);
SELECT (Pl3) IF (-1 Adv) (1 PRON-PL3-NOM); # Nu jerre sii
SELECT (Pl3) IF (-1 Adv) (1C N-PL-NOM); # Nu jerre nieiddat

SELECT (Pl3) IF (-1C N-PL-NOM); # Nieiddat jerre
SELECT (Pl3) IF (-3 N-NOM)(-2 CC)(-1 N-NOM); # Nieida ja gánda jerre

SELECT (Pl3) IF (0 Clt) (1 N-NOM) (2 CC) (3 N-NOM); 
SELECT (Pl3) IF (0 Clt) (1 PRON-PL3-NOM); # Jerrego sii 
SELECT (Pl3) IF (0 Clt) (1C N-PL-NOM); # Jerrego nieiddat

SELECT (Pl3) IF (1 Pcle) (2 N-NOM) (3 CC) (4 N-NOM);
SELECT (Pl3) IF (1 Pcle) (2 PRON-PL3-NOM); # jerre go sii
SELECT (Pl3) IF (1 Pcle) (2C N-PL-NOM); # Nieiddat jerre
					# Nu jerre ieida ja gánda
                                        # Jerre go nieida ja gánda?
                                        # Jerrego nieida ja gánda?

SELECT (Pl3) IF (-1 (Pron Interr Pl Nom)) (-2 COMMA) (-3 N-PL);
             #olbmot, geat fállet (too specific?)

# Number phrases as subjects
SELECT (Pl3) IF (-2 Num) (-1 N-GEN) ; # Golbma nieidda leat boahtán.
SELECT (Pl3) IF (-1 Adv) (1 Num); # Nu jerre golbma nieidda

SELECT ("leat" Pl3) IF (-1 (Loc))(1 (N Pl)); ## Mis leat beatnagat.


# Selecting some present
# ----------------------
SELECT (Prs) IF (0 LEAT) (NOT *-1 V-IND-FIN); # one strange hit, revise!
# The same should be done 

SELECT (Prs) IF (-1 Neg + Prs) ; # no hits

# Select some finite
REMOVE (Inf) IF (-2 CLB) (-1 CS); # dus1s1e, juos leat doarvái...
REMOVE (Inf) IF (-1 Inf ) ; # 1 hit

# Indicative Past
# ---------------

### Past Sg1 is unique

# Past Sg2
# --------
# Past Pl1
# Prt Sg2 = Prs Pl3 = Imprt Prs Pl2 (even syll)
  # Prt Sg2 = Prs Pl3 = Prs Pl1 = Inf (odd syll)
  # Prt Sg2 = Prs Pl3                 (contracted)

# Past Sg3
# --------
  # Prt Sg3 = Imprt Prs Sg3 (leai)
 
# Past Du1
# --------
# Past Du2
# --------
# Past Du3
# --------
# Past Pl1
# --------
# Past Pl2
# --------
# Past Pl3
# --------

# leai disambiguation
SELECT (Prt) IF (0 LEAI)(-1 N-SG); # Introduced 0 LEAI

# Pl3
# ---
# Pl3 = Prs Du1

REMOVE (Du1) IF (0 Sg3) (-1 (N Sg Nom)); # Dokumeanta c1ilge, mo...


# Potential Present
# -----------------
# Potential Past
# --------------
# Conditional
# -----------
# Imperative
# ----------

SELECT (Imprt) IF (0 ConNeg) (-1 Neg + Imprt);
#SELECT (Imprt) IF (0 ConNeg) (-1 Neg + Imprt);

SELECT (Imprt) IF (-1 Neg + Imprt) ;

REMOVE (Imprt) IF (NOT -1 COMMA OR (<s>))(NOT 0 ConNeg) ;
# Imprt must be either a negative verb form, or in the middle of a sentencne.

# Infinite forms
# ==============

# Infinitive
# ----------

#SELECT (Inf) IF (*-1 V-IND-FIN BARRIER MII-PERS OR SII)(NOT 0 LEAT);#23000 hits
SELECT (Inf) IF (*-1 V-IND-FIN BARRIER MII-PERS OR SII OR CS OR CLB OR (<s>));
# reintroduce (NOT 0 LEAT)? check this!

REMOVE (Prs Pl1) IF (-1 (<s>))(1C V-SG3); ## Vuolgit lea suohtas
REMOVE (N Pl) IF (0 (Inf) OR (N Sg))(1C V-SG3); # EXAMPLE? 

# ConNeg forms
# ------------

SELECT (ConNeg) IF (0 LEAT) (-1 Neg);
SELECT (ConNeg) IF (0 LEAT) (-2 Neg) (-1 Pcle);
REMOVE (ConNeg) IF (0 LEAT) (NOT *-1 Neg);
# Need more advanced rule to select ConNeg when more
# material between neg and conneg
# SELECT (ConNeg IF (0 LEAT) (*-1 Neg);

REMOVE (VGen) IF (NOT *-1 V-IND-FIN)(Not *1 V-IND-FIN); # too sloppy!

SELECT (ConNeg) IF (*-1 Neg BARRIER CLB OR V-IND-FIN) ;
REMOVE (ConNeg) IF (NOT *-1 Neg BARRIER CLB OR V-IND-FIN); # 20000 hits

REMOVE (Imprt) IF (*-1 (Neg Ind) BARRIER CLB OR V-IND-FIN)(0 ConNeg);
REMOVE (Prs) IF (*-1 (Neg Imprt) BARRIER CLB OR V-IND-FIN)(0 ConNeg);

# Act
# ---
# Act = Prs Sg1 = PrfPrc (odd-syll verbs, contracted verbs)
# => make rules for Act.


# PrfPrc
# ------

SELECT (PrfPrc) IF (-1 V-IND-FIN ) ;

SELECT (PrfPrc) IF (-1 Neg) ;
SELECT (PrfPrc) IF (-1 Pcle)(-2 Neg) ;

SELECT (PrfPrc) IF (0 LEAN) (-1 Neg);

# PrsPrc
# ------
# PrsPrc = Imprt Prs Du2 (even-syll)




# ImprtII
# VGen
# -------

# Gerund,  Verb abessive and Supine do have uniqe forms and need no rules

                                                

# Disambiguating adjectives
# =========================



# Attribute disambiguation
# ------------------------

SELECT (Attr) IF (1 N) ; # 22000
REMOVE (Attr) IF (NOT 1 N ) ; # 11000


# Disambiguating adverbs
# ======================
SELECT (Adv) IF (-1C V-IND-FIN) (0 A-ATTR)(NOT 1 N); # Adv if postverbally
REMOVE (Adv) IF (-1 (N Gen) OR (Pron Gen))(0 (Po) OR (Adp)); # Po if after Gen

SELECT (Adv) IF (0 "ikte")(*1 (V Prt)); ## Ikte lei hui buolas1

# Disambiguating demonstratives
# =============================

SELECT DEM-SG IF (1 V-SG3); # no hits
# Need a way of stating ".. and I am a the beginning of the sentence"


# Disambiguating pronouns
# =======================

# Personal pronouns


# Mii
# ---

SELECT (Interr) IF (0 MII-INTERR) (-1 COMMA) (1 Sg3) ;
SELECT (Pers) IF (0 MII-PERS) (1 V-PL1) ;

SELECT (Gen) IF (0 Interr) (-1 COMMA) (1 N + Nom) ; # no hits

SELECT (Pron) IF (0 PRON-PL-LOC) (1 V-SG3) (*2 N BARRIER V-IND-FIN);

# Recipr and refl
# ---------------

SELECT (Recipr) IF (-1 Recipr); # ... guhtet
SELECT (Recipr) IF (1  Recipr); # ... ...    guoimmiset


# Disambiguating subjunctions
# ===========================

SELECT (CS) IF (-1 CLB); # this one too general, there must be separate
                         # rules for different groups of CS.

# other words
# ===========

#"<go>" SELECT (CS) IF (-1 COMMA) ;

SELECT Don-PRON IF (*1 V-SG2);



# =====================
# Global disambiguation
# =====================


CONSTRAINTS

REMOVE (Sg) IF (0 DEM-SG) (NOT *1 V-SG3);
REMOVE (Pl) IF (0 DEM-PL) (NOT *1 V-PL3);


# At least one finite verb in the sentence
# The rule scans to the left until it finds a finite verb
SELECT V-IND-FIN IF (NOT *-1 V-IND-FIN)(NOT *1 V-IND-FIN); # no hits

# Stop at guhto to the left and comma to the right.
SELECT V-IND-FIN IF (NOT *-1 V-IND-FIN BARRIER COMP)(NOT *1 V-IND-FIN BARRIER CLB);
# This does not work... # no hits



END
