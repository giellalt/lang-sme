! Divvun & Giellatekno - open source grammars for Sámi and other languages
! Copyright © 2000-2010 The University of Tromsø & the Norwegian Sámi Parliament
! http://giellatekno.uit.no & http://divvun.no
!
! This program is free software; you can redistribute and/or modify
! this file under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version. The GNU General Public License
! is found at http://www.gnu.org/licenses/gpl.html. It is
! also available in the file $GTHOME/LICENSE.txt.
!
! Other licensing options are available upon request, please contact
! giellatekno@uit.no or feedback@divvun.no

! ============================= !
!! !!!File containing abbreviations 
! ============================= !

!! !!Lexica for adding tags and periods
! ----------------------------------

!! !!The sublexica

!! !Dividing between abbreviations with and witout final period

LEXICON ab-dot-noun-adj   !!= * __@CODE@__
+N+Sem/Lang:  ab-dot-noun ;
+A+Sem/Lang:  ab-dot-adj ;

LEXICON ab-noun   !!= * __@CODE@__
ab-nodot-noun ;
+Use/NG: ab-dot-noun ;

LEXICON ab-adj   !!= * __@CODE@__
ab-nodot-adj ;
+Use/NG: ab-dot-adj ;

LEXICON ab-adv   !!= * __@CODE@__
ab-nodot-adv ;
+Use/NG: ab-dot-adv ;

LEXICON ab-num   !!= * __@CODE@__
ab-nodot-num ;
+Use/NG: ab-dot-num;

!! !The lexicons that add tags

LEXICON ab-nodot-noun   !!= * __@CODE@__  The bulk
       +ABBR+Attr:      # ; ! no period, that is.
        +ABBR+Sg+Nom:      # ; ! no period, that is.
        +ABBR+Sg+Acc:      # ; ! no period, that is.
        +ABBR+Sg+Gen:      # ; ! no period, that is.
        +ABBR+Sg+Ill:%>%:i   # ; ! no period, that is.
        +ABBR+Sg+Loc:%>%:s   # ; ! no period, that is.
        +ABBR+Sg+Com:%>%:in  # ; ! no period, that is.
        +ABBR+Sg+Ess:%>%:n   # ; ! no period, that is.
        +ABBR+Pl+Nom:%>%:t      # ; ! no period, that is.
        +ABBR+Pl+Gen:%>%:id     # ; ! no period, that is.
        +ABBR+Pl+Acc:%>%:id     # ; ! no period, that is.
        +ABBR+Pl+Ill:%>%:ide    # ; ! no period, that is.
        +ABBR+Pl+Loc:%>%:in     # ; ! no period, that is.
        +ABBR+Pl+Com:%>%:igujn  # ; ! no period, that is.
+ABBR+Sg+Ill+Err/Orth:%>%:ii  # ; ! no period, that is. !
+ABBR+Sg+Loc+Err/Orth:%>%:as  # ; ! no period, that is. !
+ABBR+Sg+Com+Err/Orth:%>%:ain # ;! no period, that is. !
+ABBR+Sg+Com+Err/Orth:%>%:iin # ;! no period, that is. !
+ABBR+Sg+Ess+Err/Orth:%>%:an  # ; ! no period, that is. !
+ABBR: RHyph ;

LEXICON ab-nodot-adj   !!= * __@CODE@__
+ABBR+Attr: # ; ! no period, that is.
+ABBR+Sg+Nom: # ; ! no period, that is.
+ABBR+Sg+Acc: # ; ! no period, that is.
+ABBR+Sg+Gen: # ; ! no period, that is.
+ABBR: RHyph ;

LEXICON ab-nodot-adv   !!= * __@CODE@__
 +ABBR: # ; ! no period, that is.
 +ABBR+Attr: # ; ! no period, that is.
! +Adv+ABBR+Sg+Nom: # ; ! no period, that is.
! +Adv+ABBR+Sg+Acc: # ; ! no period, that is.
! +Adv+ABBR+Sg+Gen: # ; ! no period, that is.
 +ABBR: RHyph ;

LEXICON ab-nodot-num   !!= * __@CODE@__
+ABBR+Sg+Nom: # ; ! no period, that is.
+ABBR+Sg+Acc: # ; ! no period, that is.
+ABBR+Sg+Gen: # ; ! no period, that is.
+ABBR: RHyph ;


LEXICON ab-dot-noun   !!= * __@CODE@__  This is the lexicon for abbrs that must have a period.
         +ABBR+Attr:        DOT ;
          +ABBR+Sg+Nom:        DOT ;
          +ABBR+Sg+Acc:        DOT ;
          +ABBR+Sg+Gen:        DOT ;


LEXICON ab-dot-adj   !!= * __@CODE@__  This is the lexicon for abbrs that must have a period.
 +ABBR+Attr: DOT ;
 +ABBR+Sg+Nom: DOT ;
 +ABBR+Sg+Acc: DOT ;
 +ABBR+Sg+Gen: DOT ;

LEXICON ab-dot-adv   !!= * __@CODE@__  This is the lexicon for abbrs that must have a period.
+ABBR: DOT ; ! Adv without case.

LEXICON ab-dot-num   !!= * __@CODE@__  This is the lexicon for abbrs that must have a period.
+Num+ABBR+Sg+Nom: DOT ;
+Num+ABBR+Sg+Acc: DOT ;
+Num+ABBR+Sg+Gen: DOT ;

LEXICON ab-dot-cc   !!= * __@CODE@__
+CC+ABBR: DOT ;


! Then, as an afterthought, come our two verbs, gč. and vrd.

LEXICON ab-verb   !!= * __@CODE@__  A lexicon for "gč." and perhaps also other abbreviated verbs.
+Use/NG: ab-dot-verb ;
ab-nodot-verb ;


LEXICON ab-dot-verb   !!= * __@CODE@__
+V+ABBR+TV+Imprt: DOT ; ! Period.

LEXICON ab-nodot-verb   !!= * __@CODE@__
+V+ABBR+TV+Imprt: # ; ! No period.

! riegádan:

LEXICON ab-dot-IVprfprc   !!= * __@CODE@__
+V+ABBR+Sg+IV+PrfPrc: DOT ; ! Period.

LEXICON SYMBOLconnector   !!= * __@CODE@__
  +Attr+Use/Circ:   K ; ! §
  +Sg+Nom+Use/Circ:   K ; ! §
  +Sg+Acc+Use/Circ:   K ; ! §
  +Sg+Gen+Use/Circ:   K ; ! §
!          +Sg+Gen:   K ; ! §
!          +Sg+Acc:   K ; ! §
 +Err/Orth+Use/Circ:   SYMBOLsuff ; ! §as
         +Use/Circ:%: SYMBOLsuff ; ! §:s
 +Err/Orth+Use/Circ:%- SYMBOLsuff ; ! §-as ! Perhaps.
 +Err/Orth+Use/Circ:%' SYMBOLsuff ; ! §'as ! Perhaps.

LEXICON SYMBOLsuff   !!= * __@CODE@__
 +Sg+Gen+Err/Orth:a      K ;	! §:a  (case suffix on the rest, in case of explicit
 +Sg+Acc+Err/Orth:a      K ;	!       suffix)
 +Sg+Ill+Err/Orth:ij     K ;
         +Sg+Ill:i      K ;
         +Sg+Loc:s      K ;  ! §:s
 +Sg+Loc+Err/Orth:as     K ;  ! §:as
         +Sg+Com:in     K ;
            +Ess:n      K ;
    +Ess+Err/Orth:an     K ;
         +Pl+Nom:t      K ;
         +Pl+Gen:id     K ;
         +Pl+Acc:id     K ;
         +Pl+Ill:ide    K ;
         +Pl+Loc:in     K ;
         +Pl+Com:igujn  K ;
 +Pl+Nom+Err/Orth:at     K ;
 +Pl+Gen+Err/Orth:ajd    K ;
 +Pl+Acc+Err/Orth:ajd    K ;
 +Pl+Ill+Err/Orth:ajde   K ;
 +Pl+Loc+Err/Orth:ajn    K ;
 +Pl+Com+Err/Orth:ajgujn K ;





LEXICON DOT   !!= * __@CODE@__ - Adds the dot to dotted abbreviations.

! This one should create a new backtrack-point before the dot, but no sub-reading:
< "@P.Pmatch.Backtrack@" 0:{.} > # ;
! This one should create an mwe sub-reading:
< "@P.Pmatch.Loc@" {.} "+PUNCT":0 "+Use/Disamb":0 > # ;

! Gives:
!"<su.>"
!	"." PUNCT "<.>"
!		"su" Adv Abbr "<su>"
!	"su" Adv Abbr
!	"." PUNCT "<.>"
!		"su" Pron Pers Sg3 Acc "<su>"
!	"." PUNCT "<.>"
!		"su" Pron Pers Sg3 Gen "<su>"

! TODO: Split DOT into ABBRDOT, NOUNDOT etc where we expect there to
! be no tags added yet, so we can add the dot the lemma in ABBRDOT like
! < "@P.Pmatch.Backtrack@" {.} "+ABBR":0 > # ;
! < "@P.Pmatch.Loc@"     {.}:0 "+ABBR":0 {.} "+PUNCT":0 "+Use/Disamb":0 > # ;
!
! That should give:
!"<su.>"
!	"." PUNCT "<.>"
!		"su." Adv Abbr "<su>"
!	"su." Adv Abbr
!	"." PUNCT "<.>"
!		"su" Pron Pers Sg3 Acc "<su>"
!	"." PUNCT "<.>"
!		"su" Pron Pers Sg3 Gen "<su>"
